
TA_Elka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba24  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800bc28  0800bc28  0001bc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1bc  0800c1bc  00020324  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1bc  0800c1bc  0001c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1c4  0800c1c4  00020324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1c4  0800c1c4  0001c1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1c8  0800c1c8  0001c1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e4  0800c3b0  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000284  0800c450  00020284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005334  20000328  0800c4f0  00020328  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000565c  0800c4f0  0002565c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020b6c  00000000  00000000  00020352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000045dd  00000000  00000000  00040ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001680  00000000  00000000  000454a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014b8  00000000  00000000  00046b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cdaf  00000000  00000000  00047fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cb87  00000000  00000000  00074d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010758f  00000000  00000000  0009190e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00198e9d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006c7c  00000000  00000000  00198ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000328 	.word	0x20000328
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bc0c 	.word	0x0800bc0c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000032c 	.word	0x2000032c
 800023c:	0800bc0c 	.word	0x0800bc0c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_ETH_Init+0x84>)
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <MX_ETH_Init+0x88>)
 80009e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009f4:	22e1      	movs	r2, #225	; 0xe1
 80009f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a16:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a1c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <MX_ETH_Init+0x94>)
 8000a22:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a2a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a2e:	f001 fe03 	bl	8002638 <HAL_ETH_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a38:	f001 f840 	bl	8001abc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a3c:	2238      	movs	r2, #56	; 0x38
 8000a3e:	2100      	movs	r1, #0
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a42:	f008 fb14 	bl	800906e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a48:	2221      	movs	r2, #33	; 0x21
 8000a4a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a4e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a52:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000037c 	.word	0x2000037c
 8000a64:	40028000 	.word	0x40028000
 8000a68:	2000042c 	.word	0x2000042c
 8000a6c:	20000284 	.word	0x20000284
 8000a70:	200001e4 	.word	0x200001e4
 8000a74:	20000344 	.word	0x20000344

08000a78 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a4e      	ldr	r2, [pc, #312]	; (8000bd0 <HAL_ETH_MspInit+0x158>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 8096 	bne.w	8000bc8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a4c      	ldr	r2, [pc, #304]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab0:	623b      	str	r3, [r7, #32]
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a46      	ldr	r2, [pc, #280]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a3a      	ldr	r2, [pc, #232]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b44:	2332      	movs	r3, #50	; 0x32
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <HAL_ETH_MspInit+0x160>)
 8000b60:	f002 f890 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b64:	2386      	movs	r3, #134	; 0x86
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b74:	230b      	movs	r3, #11
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <HAL_ETH_MspInit+0x164>)
 8000b80:	f002 f880 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b96:	230b      	movs	r3, #11
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <HAL_ETH_MspInit+0x168>)
 8000ba2:	f002 f86f 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <HAL_ETH_MspInit+0x16c>)
 8000bc4:	f002 f85e 	bl	8002c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40028000 	.word	0x40028000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021800 	.word	0x40021800

08000be8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 8000bec:	4817      	ldr	r0, [pc, #92]	; (8000c4c <MX_FREERTOS_Init+0x64>)
 8000bee:	f005 fb2b 	bl	8006248 <osMutexNew>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <MX_FREERTOS_Init+0x68>)
 8000bf6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000bf8:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <MX_FREERTOS_Init+0x6c>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4816      	ldr	r0, [pc, #88]	; (8000c58 <MX_FREERTOS_Init+0x70>)
 8000bfe:	f005 fa4f 	bl	80060a0 <osThreadNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a15      	ldr	r2, [pc, #84]	; (8000c5c <MX_FREERTOS_Init+0x74>)
 8000c06:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000c08:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_FREERTOS_Init+0x78>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4815      	ldr	r0, [pc, #84]	; (8000c64 <MX_FREERTOS_Init+0x7c>)
 8000c0e:	f005 fa47 	bl	80060a0 <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <MX_FREERTOS_Init+0x80>)
 8000c16:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <MX_FREERTOS_Init+0x84>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4814      	ldr	r0, [pc, #80]	; (8000c70 <MX_FREERTOS_Init+0x88>)
 8000c1e:	f005 fa3f 	bl	80060a0 <osThreadNew>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <MX_FREERTOS_Init+0x8c>)
 8000c26:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_FREERTOS_Init+0x90>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4813      	ldr	r0, [pc, #76]	; (8000c7c <MX_FREERTOS_Init+0x94>)
 8000c2e:	f005 fa37 	bl	80060a0 <osThreadNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_FREERTOS_Init+0x98>)
 8000c36:	6013      	str	r3, [r2, #0]

  /* creation of Task05 */
  Task05Handle = osThreadNew(StartTask05, NULL, &Task05_attributes);
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_FREERTOS_Init+0x9c>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_FREERTOS_Init+0xa0>)
 8000c3e:	f005 fa2f 	bl	80060a0 <osThreadNew>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <MX_FREERTOS_Init+0xa4>)
 8000c46:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	0800bd64 	.word	0x0800bd64
 8000c50:	20000448 	.word	0x20000448
 8000c54:	0800bcb0 	.word	0x0800bcb0
 8000c58:	08000c91 	.word	0x08000c91
 8000c5c:	20000434 	.word	0x20000434
 8000c60:	0800bcd4 	.word	0x0800bcd4
 8000c64:	08000ccd 	.word	0x08000ccd
 8000c68:	20000438 	.word	0x20000438
 8000c6c:	0800bcf8 	.word	0x0800bcf8
 8000c70:	08000cf5 	.word	0x08000cf5
 8000c74:	2000043c 	.word	0x2000043c
 8000c78:	0800bd1c 	.word	0x0800bd1c
 8000c7c:	08000d05 	.word	0x08000d05
 8000c80:	20000440 	.word	0x20000440
 8000c84:	0800bd40 	.word	0x0800bd40
 8000c88:	08000d15 	.word	0x08000d15
 8000c8c:	20000444 	.word	0x20000444

08000c90 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */

  /* Infinite loop */
  for(;;)
  {
	latitude_gps = gps.latitude;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <StartTask01+0x30>)
 8000c9a:	ed93 7b00 	vldr	d7, [r3]
 8000c9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <StartTask01+0x34>)
 8000ca4:	edc3 7a00 	vstr	s15, [r3]
	longitude_gps = gps.longitude;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <StartTask01+0x30>)
 8000caa:	ed93 7b02 	vldr	d7, [r3, #8]
 8000cae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <StartTask01+0x38>)
 8000cb4:	edc3 7a00 	vstr	s15, [r3]
    osDelay(1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f005 fa97 	bl	80061ec <osDelay>
	latitude_gps = gps.latitude;
 8000cbe:	e7eb      	b.n	8000c98 <StartTask01+0x8>
 8000cc0:	20000450 	.word	0x20000450
 8000cc4:	20000584 	.word	0x20000584
 8000cc8:	20000588 	.word	0x20000588

08000ccc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Receive_IT(&huart4, (uint8_t*) &bt_rx_buffer, sizeof(bt_rx_buffer));
 8000cd4:	220d      	movs	r2, #13
 8000cd6:	4905      	ldr	r1, [pc, #20]	; (8000cec <StartTask02+0x20>)
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <StartTask02+0x24>)
 8000cda:	f003 fc3b 	bl	8004554 <HAL_UART_Receive_IT>

	if (bt_rx_buffer[0] == 'A' && bt_rx_buffer[11] == 'B'){
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <StartTask02+0x20>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b41      	cmp	r3, #65	; 0x41

	}
    osDelay(1);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f005 fa81 	bl	80061ec <osDelay>
	HAL_UART_Receive_IT(&huart4, (uint8_t*) &bt_rx_buffer, sizeof(bt_rx_buffer));
 8000cea:	e7f3      	b.n	8000cd4 <StartTask02+0x8>
 8000cec:	2000058c 	.word	0x2000058c
 8000cf0:	200005a0 	.word	0x200005a0

08000cf4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f005 fa75 	bl	80061ec <osDelay>
 8000d02:	e7fb      	b.n	8000cfc <StartTask03+0x8>

08000d04 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f005 fa6d 	bl	80061ec <osDelay>
 8000d12:	e7fb      	b.n	8000d0c <StartTask04+0x8>

08000d14 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f005 fa65 	bl	80061ec <osDelay>
 8000d22:	e7fb      	b.n	8000d1c <StartTask05+0x8>

08000d24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	; 0x30
 8000d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b47      	ldr	r3, [pc, #284]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a46      	ldr	r2, [pc, #280]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b44      	ldr	r3, [pc, #272]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a3a      	ldr	r2, [pc, #232]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b38      	ldr	r3, [pc, #224]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a34      	ldr	r2, [pc, #208]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a2e      	ldr	r2, [pc, #184]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_GPIO_Init+0x134>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_GPIO_Init+0x138>)
 8000dd2:	f002 f903 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	4821      	ldr	r0, [pc, #132]	; (8000e60 <MX_GPIO_Init+0x13c>)
 8000ddc:	f002 f8fe 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	481b      	ldr	r0, [pc, #108]	; (8000e64 <MX_GPIO_Init+0x140>)
 8000df8:	f001 ff44 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dfc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4811      	ldr	r0, [pc, #68]	; (8000e5c <MX_GPIO_Init+0x138>)
 8000e16:	f001 ff35 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e1a:	2340      	movs	r3, #64	; 0x40
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <MX_GPIO_Init+0x13c>)
 8000e32:	f001 ff27 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_GPIO_Init+0x13c>)
 8000e4a:	f001 ff1b 	bl	8002c84 <HAL_GPIO_Init>

}
 8000e4e:	bf00      	nop
 8000e50:	3730      	adds	r7, #48	; 0x30
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40021800 	.word	0x40021800
 8000e64:	40020800 	.word	0x40020800

08000e68 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3371      	adds	r3, #113	; 0x71
 8000e80:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000e82:	e002      	b.n	8000e8a <prv_parse_number+0x22>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <prv_parse_number+0x30>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b20      	cmp	r3, #32
 8000e96:	d0f5      	beq.n	8000e84 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b2d      	cmp	r3, #45	; 0x2d
 8000e9e:	d104      	bne.n	8000eaa <prv_parse_number+0x42>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <prv_parse_number+0x44>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000eae:	e00d      	b.n	8000ecc <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	461a      	mov	r2, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	3b30      	subs	r3, #48	; 0x30
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <prv_parse_number+0x7a>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ed8:	d903      	bls.n	8000ee2 <prv_parse_number+0x7a>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b39      	cmp	r3, #57	; 0x39
 8000ee0:	d9e6      	bls.n	8000eb0 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000ee2:	7afb      	ldrb	r3, [r7, #11]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <prv_parse_number+0x86>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	425b      	negs	r3, r3
 8000eec:	e000      	b.n	8000ef0 <prv_parse_number+0x88>
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d106      	bne.n	8000f1a <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3371      	adds	r3, #113	; 0x71
 8000f10:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000f12:	e002      	b.n	8000f1a <prv_parse_float_number+0x1e>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <prv_parse_float_number+0x2c>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d0f5      	beq.n	8000f14 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6838      	ldr	r0, [r7, #0]
 8000f2c:	f008 ffde 	bl	8009eec <strtod>
 8000f30:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8000f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f3c:	eeb0 0b47 	vmov.f64	d0, d7
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8000f50:	2100      	movs	r1, #0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffd2 	bl	8000efc <prv_parse_float_number>
 8000f58:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8000f5c:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f60:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f64:	ee17 1a90 	vmov	r1, s15
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <prv_parse_lat_long+0x90>)
 8000f6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000f6e:	115a      	asrs	r2, r3, #5
 8000f70:	17cb      	asrs	r3, r1, #31
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f7c:	ed87 7b04 	vstr	d7, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8000f80:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f84:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000fc8 <prv_parse_lat_long+0x80>
 8000f88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f8c:	ed97 6b06 	vldr	d6, [r7, #24]
 8000f90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f94:	ed87 7b02 	vstr	d7, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8000f98:	ed97 6b02 	vldr	d6, [r7, #8]
 8000f9c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000fd0 <prv_parse_lat_long+0x88>
 8000fa0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fa4:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fa8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fac:	ed87 7b06 	vstr	d7, [r7, #24]

    return ll;
 8000fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fb4:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fb8:	eeb0 0b47 	vmov.f64	d0, d7
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	40590000 	.word	0x40590000
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	404e0000 	.word	0x404e0000
 8000fd8:	51eb851f 	.word	0x51eb851f

08000fdc <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d169      	bne.n	80010c2 <prv_parse_term+0xe6>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3371      	adds	r3, #113	; 0x71
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	49bf      	ldr	r1, [pc, #764]	; (80012f4 <prv_parse_term+0x318>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f008 f993 	bl	8009322 <strncmp>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d009      	beq.n	8001016 <prv_parse_term+0x3a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3371      	adds	r3, #113	; 0x71
 8001006:	2206      	movs	r2, #6
 8001008:	49bb      	ldr	r1, [pc, #748]	; (80012f8 <prv_parse_term+0x31c>)
 800100a:	4618      	mov	r0, r3
 800100c:	f008 f989 	bl	8009322 <strncmp>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d104      	bne.n	8001020 <prv_parse_term+0x44>
            gh->p.stat = STAT_GGA;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800101e:	e04e      	b.n	80010be <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3371      	adds	r3, #113	; 0x71
 8001024:	2206      	movs	r2, #6
 8001026:	49b5      	ldr	r1, [pc, #724]	; (80012fc <prv_parse_term+0x320>)
 8001028:	4618      	mov	r0, r3
 800102a:	f008 f97a 	bl	8009322 <strncmp>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d009      	beq.n	8001048 <prv_parse_term+0x6c>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3371      	adds	r3, #113	; 0x71
 8001038:	2206      	movs	r2, #6
 800103a:	49b1      	ldr	r1, [pc, #708]	; (8001300 <prv_parse_term+0x324>)
 800103c:	4618      	mov	r0, r3
 800103e:	f008 f970 	bl	8009322 <strncmp>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d104      	bne.n	8001052 <prv_parse_term+0x76>
            gh->p.stat = STAT_GSA;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2202      	movs	r2, #2
 800104c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001050:	e035      	b.n	80010be <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3371      	adds	r3, #113	; 0x71
 8001056:	2206      	movs	r2, #6
 8001058:	49aa      	ldr	r1, [pc, #680]	; (8001304 <prv_parse_term+0x328>)
 800105a:	4618      	mov	r0, r3
 800105c:	f008 f961 	bl	8009322 <strncmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d009      	beq.n	800107a <prv_parse_term+0x9e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3371      	adds	r3, #113	; 0x71
 800106a:	2206      	movs	r2, #6
 800106c:	49a6      	ldr	r1, [pc, #664]	; (8001308 <prv_parse_term+0x32c>)
 800106e:	4618      	mov	r0, r3
 8001070:	f008 f957 	bl	8009322 <strncmp>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d104      	bne.n	8001084 <prv_parse_term+0xa8>
            gh->p.stat = STAT_GSV;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2203      	movs	r2, #3
 800107e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001082:	e01c      	b.n	80010be <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3371      	adds	r3, #113	; 0x71
 8001088:	2206      	movs	r2, #6
 800108a:	49a0      	ldr	r1, [pc, #640]	; (800130c <prv_parse_term+0x330>)
 800108c:	4618      	mov	r0, r3
 800108e:	f008 f948 	bl	8009322 <strncmp>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d009      	beq.n	80010ac <prv_parse_term+0xd0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3371      	adds	r3, #113	; 0x71
 800109c:	2206      	movs	r2, #6
 800109e:	499c      	ldr	r1, [pc, #624]	; (8001310 <prv_parse_term+0x334>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f008 f93e 	bl	8009322 <strncmp>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d104      	bne.n	80010b6 <prv_parse_term+0xda>
            gh->p.stat = STAT_RMC;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2204      	movs	r2, #4
 80010b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80010b4:	e003      	b.n	80010be <prv_parse_term+0xe2>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	e21d      	b.n	80014fe <prv_parse_term+0x522>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8217 	beq.w	80014fc <prv_parse_term+0x520>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	f040 80c0 	bne.w	800125a <prv_parse_term+0x27e>
        switch (gh->p.term_num) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80010e0:	3b01      	subs	r3, #1
 80010e2:	2b0a      	cmp	r3, #10
 80010e4:	f200 81fd 	bhi.w	80014e2 <prv_parse_term+0x506>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <prv_parse_term+0x114>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	0800111d 	.word	0x0800111d
 80010f4:	08001197 	.word	0x08001197
 80010f8:	080011a9 	.word	0x080011a9
 80010fc:	080011d1 	.word	0x080011d1
 8001100:	080011e3 	.word	0x080011e3
 8001104:	0800120b 	.word	0x0800120b
 8001108:	0800121f 	.word	0x0800121f
 800110c:	080014e3 	.word	0x080014e3
 8001110:	08001233 	.word	0x08001233
 8001114:	080014e3 	.word	0x080014e3
 8001118:	08001247 	.word	0x08001247
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001122:	3b30      	subs	r3, #48	; 0x30
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4413      	add	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001136:	4413      	add	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	3b30      	subs	r3, #48	; 0x30
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800114a:	3b30      	subs	r3, #48	; 0x30
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800115e:	4413      	add	r3, r2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3b30      	subs	r3, #48	; 0x30
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001172:	3b30      	subs	r3, #48	; 0x30
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001186:	4413      	add	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3b30      	subs	r3, #48	; 0x30
 800118c:	b2da      	uxtb	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001194:	e1b2      	b.n	80014fc <prv_parse_term+0x520>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fed6 	bl	8000f48 <prv_parse_lat_long>
 800119c:	eeb0 7b40 	vmov.f64	d7, d0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80011a6:	e1a9      	b.n	80014fc <prv_parse_term+0x520>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011ae:	2b53      	cmp	r3, #83	; 0x53
 80011b0:	d005      	beq.n	80011be <prv_parse_term+0x1e2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011b8:	2b73      	cmp	r3, #115	; 0x73
 80011ba:	f040 8194 	bne.w	80014e6 <prv_parse_term+0x50a>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80011c4:	eeb1 7b47 	vneg.f64	d7, d7
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                }
                break;
 80011ce:	e18a      	b.n	80014e6 <prv_parse_term+0x50a>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff feb9 	bl	8000f48 <prv_parse_lat_long>
 80011d6:	eeb0 7b40 	vmov.f64	d7, d0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80011e0:	e18c      	b.n	80014fc <prv_parse_term+0x520>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011e8:	2b57      	cmp	r3, #87	; 0x57
 80011ea:	d005      	beq.n	80011f8 <prv_parse_term+0x21c>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011f2:	2b77      	cmp	r3, #119	; 0x77
 80011f4:	f040 8179 	bne.w	80014ea <prv_parse_term+0x50e>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80011fe:	eeb1 7b47 	vneg.f64	d7, d7
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                }
                break;
 8001208:	e16f      	b.n	80014ea <prv_parse_term+0x50e>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 800120a:	2100      	movs	r1, #0
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fe2b 	bl	8000e68 <prv_parse_number>
 8001212:	4603      	mov	r3, r0
 8001214:	b2da      	uxtb	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 800121c:	e16e      	b.n	80014fc <prv_parse_term+0x520>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800121e:	2100      	movs	r1, #0
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fe21 	bl	8000e68 <prv_parse_number>
 8001226:	4603      	mov	r3, r0
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001230:	e164      	b.n	80014fc <prv_parse_term+0x520>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8001232:	2100      	movs	r1, #0
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fe61 	bl	8000efc <prv_parse_float_number>
 800123a:	eeb0 7b40 	vmov.f64	d7, d0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001244:	e15a      	b.n	80014fc <prv_parse_term+0x520>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001246:	2100      	movs	r1, #0
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fe57 	bl	8000efc <prv_parse_float_number>
 800124e:	eeb0 7b40 	vmov.f64	d7, d0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001258:	e150      	b.n	80014fc <prv_parse_term+0x520>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001260:	2b02      	cmp	r3, #2
 8001262:	d17d      	bne.n	8001360 <prv_parse_term+0x384>
        switch (gh->p.term_num) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800126a:	3b02      	subs	r3, #2
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d85b      	bhi.n	8001328 <prv_parse_term+0x34c>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <prv_parse_term+0x29c>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	080012b9 	.word	0x080012b9
 800127c:	08001329 	.word	0x08001329
 8001280:	08001329 	.word	0x08001329
 8001284:	08001329 	.word	0x08001329
 8001288:	08001329 	.word	0x08001329
 800128c:	08001329 	.word	0x08001329
 8001290:	08001329 	.word	0x08001329
 8001294:	08001329 	.word	0x08001329
 8001298:	08001329 	.word	0x08001329
 800129c:	08001329 	.word	0x08001329
 80012a0:	08001329 	.word	0x08001329
 80012a4:	08001329 	.word	0x08001329
 80012a8:	08001329 	.word	0x08001329
 80012ac:	080012cd 	.word	0x080012cd
 80012b0:	080012e1 	.word	0x080012e1
 80012b4:	08001315 	.word	0x08001315
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80012b8:	2100      	movs	r1, #0
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fdd4 	bl	8000e68 <prv_parse_number>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80012ca:	e117      	b.n	80014fc <prv_parse_term+0x520>
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80012cc:	2100      	movs	r1, #0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fe14 	bl	8000efc <prv_parse_float_number>
 80012d4:	eeb0 7b40 	vmov.f64	d7, d0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80012de:	e10d      	b.n	80014fc <prv_parse_term+0x520>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80012e0:	2100      	movs	r1, #0
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fe0a 	bl	8000efc <prv_parse_float_number>
 80012e8:	eeb0 7b40 	vmov.f64	d7, d0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80012f2:	e103      	b.n	80014fc <prv_parse_term+0x520>
 80012f4:	0800bc58 	.word	0x0800bc58
 80012f8:	0800bc60 	.word	0x0800bc60
 80012fc:	0800bc68 	.word	0x0800bc68
 8001300:	0800bc70 	.word	0x0800bc70
 8001304:	0800bc78 	.word	0x0800bc78
 8001308:	0800bc80 	.word	0x0800bc80
 800130c:	0800bc88 	.word	0x0800bc88
 8001310:	0800bc90 	.word	0x0800bc90
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001314:	2100      	movs	r1, #0
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fdf0 	bl	8000efc <prv_parse_float_number>
 800131c:	eeb0 7b40 	vmov.f64	d7, d0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001326:	e0e9      	b.n	80014fc <prv_parse_term+0x520>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800132e:	2b02      	cmp	r3, #2
 8001330:	f240 80dd 	bls.w	80014ee <prv_parse_term+0x512>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800133a:	2b0e      	cmp	r3, #14
 800133c:	f200 80d7 	bhi.w	80014ee <prv_parse_term+0x512>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001340:	2100      	movs	r1, #0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fd90 	bl	8000e68 <prv_parse_number>
 8001348:	4602      	mov	r2, r0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001350:	3b03      	subs	r3, #3
 8001352:	b2d1      	uxtb	r1, r2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	460a      	mov	r2, r1
 800135a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 800135e:	e0c6      	b.n	80014ee <prv_parse_term+0x512>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001366:	2b03      	cmp	r3, #3
 8001368:	d11b      	bne.n	80013a2 <prv_parse_term+0x3c6>
        switch (gh->p.term_num) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001370:	2b02      	cmp	r3, #2
 8001372:	d002      	beq.n	800137a <prv_parse_term+0x39e>
 8001374:	2b03      	cmp	r3, #3
 8001376:	d00a      	beq.n	800138e <prv_parse_term+0x3b2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001378:	e0c0      	b.n	80014fc <prv_parse_term+0x520>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800137a:	2100      	movs	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fd73 	bl	8000e68 <prv_parse_number>
 8001382:	4603      	mov	r3, r0
 8001384:	b2da      	uxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 800138c:	e0b6      	b.n	80014fc <prv_parse_term+0x520>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800138e:	2100      	movs	r1, #0
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fd69 	bl	8000e68 <prv_parse_number>
 8001396:	4603      	mov	r3, r0
 8001398:	b2da      	uxtb	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80013a0:	e0ac      	b.n	80014fc <prv_parse_term+0x520>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	f040 80a2 	bne.w	80014f2 <prv_parse_term+0x516>
        switch (gh->p.term_num) {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80013b4:	3b02      	subs	r3, #2
 80013b6:	2b09      	cmp	r3, #9
 80013b8:	f200 809d 	bhi.w	80014f6 <prv_parse_term+0x51a>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <prv_parse_term+0x3e8>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080013ed 	.word	0x080013ed
 80013c8:	080014f7 	.word	0x080014f7
 80013cc:	080014f7 	.word	0x080014f7
 80013d0:	080014f7 	.word	0x080014f7
 80013d4:	080014f7 	.word	0x080014f7
 80013d8:	08001407 	.word	0x08001407
 80013dc:	0800141b 	.word	0x0800141b
 80013e0:	0800142f 	.word	0x0800142f
 80013e4:	080014a9 	.word	0x080014a9
 80013e8:	080014bd 	.word	0x080014bd
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80013f2:	2b41      	cmp	r3, #65	; 0x41
 80013f4:	bf0c      	ite	eq
 80013f6:	2301      	moveq	r3, #1
 80013f8:	2300      	movne	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001404:	e07a      	b.n	80014fc <prv_parse_term+0x520>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8001406:	2100      	movs	r1, #0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fd77 	bl	8000efc <prv_parse_float_number>
 800140e:	eeb0 7b40 	vmov.f64	d7, d0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001418:	e070      	b.n	80014fc <prv_parse_term+0x520>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800141a:	2100      	movs	r1, #0
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fd6d 	bl	8000efc <prv_parse_float_number>
 8001422:	eeb0 7b40 	vmov.f64	d7, d0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800142c:	e066      	b.n	80014fc <prv_parse_term+0x520>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001434:	3b30      	subs	r3, #48	; 0x30
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4413      	add	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	b2da      	uxtb	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001448:	4413      	add	r3, r2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3b30      	subs	r3, #48	; 0x30
 800144e:	b2da      	uxtb	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800145c:	3b30      	subs	r3, #48	; 0x30
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	0092      	lsls	r2, r2, #2
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001470:	4413      	add	r3, r2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3b30      	subs	r3, #48	; 0x30
 8001476:	b2da      	uxtb	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001484:	3b30      	subs	r3, #48	; 0x30
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001498:	4413      	add	r3, r2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3b30      	subs	r3, #48	; 0x30
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80014a6:	e029      	b.n	80014fc <prv_parse_term+0x520>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80014a8:	2100      	movs	r1, #0
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fd26 	bl	8000efc <prv_parse_float_number>
 80014b0:	eeb0 7b40 	vmov.f64	d7, d0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80014ba:	e01f      	b.n	80014fc <prv_parse_term+0x520>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014c2:	2b57      	cmp	r3, #87	; 0x57
 80014c4:	d004      	beq.n	80014d0 <prv_parse_term+0x4f4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014cc:	2b77      	cmp	r3, #119	; 0x77
 80014ce:	d114      	bne.n	80014fa <prv_parse_term+0x51e>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80014d6:	eeb1 7b47 	vneg.f64	d7, d7
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                }
                break;
 80014e0:	e00b      	b.n	80014fa <prv_parse_term+0x51e>
                break;
 80014e2:	bf00      	nop
 80014e4:	e00a      	b.n	80014fc <prv_parse_term+0x520>
                break;
 80014e6:	bf00      	nop
 80014e8:	e008      	b.n	80014fc <prv_parse_term+0x520>
                break;
 80014ea:	bf00      	nop
 80014ec:	e006      	b.n	80014fc <prv_parse_term+0x520>
                break;
 80014ee:	bf00      	nop
 80014f0:	e004      	b.n	80014fc <prv_parse_term+0x520>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 80014f2:	bf00      	nop
 80014f4:	e002      	b.n	80014fc <prv_parse_term+0x520>
                break;
 80014f6:	bf00      	nop
 80014f8:	e000      	b.n	80014fc <prv_parse_term+0x520>
                break;
 80014fa:	bf00      	nop
    return 1;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop

08001508 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001516:	2b2f      	cmp	r3, #47	; 0x2f
 8001518:	d90d      	bls.n	8001536 <prv_check_crc+0x2e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001520:	2b39      	cmp	r3, #57	; 0x39
 8001522:	d808      	bhi.n	8001536 <prv_check_crc+0x2e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800152a:	3b30      	subs	r3, #48	; 0x30
 800152c:	b2db      	uxtb	r3, r3
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	b2db      	uxtb	r3, r3
 8001532:	b25a      	sxtb	r2, r3
 8001534:	e026      	b.n	8001584 <prv_check_crc+0x7c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800153c:	2b60      	cmp	r3, #96	; 0x60
 800153e:	d90d      	bls.n	800155c <prv_check_crc+0x54>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001546:	2b7a      	cmp	r3, #122	; 0x7a
 8001548:	d808      	bhi.n	800155c <prv_check_crc+0x54>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001550:	3b57      	subs	r3, #87	; 0x57
 8001552:	b2db      	uxtb	r3, r3
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	b2db      	uxtb	r3, r3
 8001558:	b25a      	sxtb	r2, r3
 800155a:	e013      	b.n	8001584 <prv_check_crc+0x7c>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001562:	2b40      	cmp	r3, #64	; 0x40
 8001564:	d90d      	bls.n	8001582 <prv_check_crc+0x7a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800156c:	2b5a      	cmp	r3, #90	; 0x5a
 800156e:	d808      	bhi.n	8001582 <prv_check_crc+0x7a>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001576:	3b37      	subs	r3, #55	; 0x37
 8001578:	b2db      	uxtb	r3, r3
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	b2db      	uxtb	r3, r3
 800157e:	b25a      	sxtb	r2, r3
 8001580:	e000      	b.n	8001584 <prv_check_crc+0x7c>
 8001582:	2200      	movs	r2, #0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800158a:	2b2f      	cmp	r3, #47	; 0x2f
 800158c:	d90c      	bls.n	80015a8 <prv_check_crc+0xa0>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001594:	2b39      	cmp	r3, #57	; 0x39
 8001596:	d807      	bhi.n	80015a8 <prv_check_crc+0xa0>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	e028      	b.n	80015fa <prv_check_crc+0xf2>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015ae:	2b60      	cmp	r3, #96	; 0x60
 80015b0:	d90e      	bls.n	80015d0 <prv_check_crc+0xc8>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015b8:	2b7a      	cmp	r3, #122	; 0x7a
 80015ba:	d809      	bhi.n	80015d0 <prv_check_crc+0xc8>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015c2:	3b57      	subs	r3, #87	; 0x57
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	e014      	b.n	80015fa <prv_check_crc+0xf2>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015d6:	2b40      	cmp	r3, #64	; 0x40
 80015d8:	d90e      	bls.n	80015f8 <prv_check_crc+0xf0>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015e0:	2b5a      	cmp	r3, #90	; 0x5a
 80015e2:	d809      	bhi.n	80015f8 <prv_check_crc+0xf0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015ea:	3b37      	subs	r3, #55	; 0x37
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	e000      	b.n	80015fa <prv_check_crc+0xf2>
 80015f8:	2300      	movs	r3, #0
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	429a      	cmp	r2, r3
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800162c:	2b01      	cmp	r3, #1
 800162e:	d136      	bne.n	800169e <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800169c:	e061      	b.n	8001762 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d121      	bne.n	80016ec <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f103 0041 	add.w	r0, r3, #65	; 0x41
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	33a1      	adds	r3, #161	; 0xa1
 80016e2:	220c      	movs	r2, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	f007 fcb4 	bl	8009052 <memcpy>
 80016ea:	e03a      	b.n	8001762 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d106      	bne.n	8001704 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001702:	e02e      	b.n	8001762 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800170a:	2b04      	cmp	r3, #4
 800170c:	d129      	bne.n	8001762 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001774:	22b0      	movs	r2, #176	; 0xb0
 8001776:	2100      	movs	r1, #0
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f007 fc78 	bl	800906e <memset>
    return 1;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001798:	e0ad      	b.n	80018f6 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b24      	cmp	r3, #36	; 0x24
 80017a0:	d128      	bne.n	80017f4 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3370      	adds	r3, #112	; 0x70
 80017a6:	2240      	movs	r2, #64	; 0x40
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f007 fc5f 	bl	800906e <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80017b6:	2b0b      	cmp	r3, #11
 80017b8:	f200 8097 	bhi.w	80018ea <lwgps_process+0x162>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80017c2:	4619      	mov	r1, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80017f2:	e07a      	b.n	80018ea <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b2c      	cmp	r3, #44	; 0x2c
 80017fa:	d11d      	bne.n	8001838 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff fbed 	bl	8000fdc <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4053      	eors	r3, r2
 800180e:	b2da      	uxtb	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800182c:	3301      	adds	r3, #1
 800182e:	b2da      	uxtb	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001836:	e058      	b.n	80018ea <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b2a      	cmp	r3, #42	; 0x2a
 800183e:	d117      	bne.n	8001870 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7ff fbcb 	bl	8000fdc <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001864:	3301      	adds	r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800186e:	e03c      	b.n	80018ea <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b0d      	cmp	r3, #13
 8001876:	d109      	bne.n	800188c <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff fe45 	bl	8001508 <prv_check_crc>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d032      	beq.n	80018ea <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff feca 	bl	800161e <prv_copy_from_tmp_memory>
 800188a:	e02e      	b.n	80018ea <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4053      	eors	r3, r2
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018b0:	2b0b      	cmp	r3, #11
 80018b2:	d81a      	bhi.n	80018ea <lwgps_process+0x162>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018ba:	4619      	mov	r1, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018ce:	3301      	adds	r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f47f af4e 	bne.w	800179a <lwgps_process+0x12>
        }
    }
    return 1;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if(huart == &huart5) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_UART_RxCpltCallback+0x68>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d122      	bne.n	800195e <HAL_UART_RxCpltCallback+0x56>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_UART_RxCpltCallback+0x6c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b0a      	cmp	r3, #10
 800191e:	d010      	beq.n	8001942 <HAL_UART_RxCpltCallback+0x3a>
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_UART_RxCpltCallback+0x70>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_UART_RxCpltCallback+0x70>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	b2d1      	uxtb	r1, r2
 8001932:	4a11      	ldr	r2, [pc, #68]	; (8001978 <HAL_UART_RxCpltCallback+0x70>)
 8001934:	7011      	strb	r1, [r2, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_UART_RxCpltCallback+0x6c>)
 800193a:	7819      	ldrb	r1, [r3, #0]
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_UART_RxCpltCallback+0x74>)
 800193e:	5499      	strb	r1, [r3, r2]
 8001940:	e00d      	b.n	800195e <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_UART_RxCpltCallback+0x70>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	461a      	mov	r2, r3
 800194a:	490c      	ldr	r1, [pc, #48]	; (800197c <HAL_UART_RxCpltCallback+0x74>)
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <HAL_UART_RxCpltCallback+0x78>)
 800194e:	f7ff ff1b 	bl	8001788 <lwgps_process>
			rx_index = 0;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_UART_RxCpltCallback+0x70>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_UART_RxCpltCallback+0x6c>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart5, &rx_data, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	4904      	ldr	r1, [pc, #16]	; (8001974 <HAL_UART_RxCpltCallback+0x6c>)
 8001962:	4803      	ldr	r0, [pc, #12]	; (8001970 <HAL_UART_RxCpltCallback+0x68>)
 8001964:	f002 fdf6 	bl	8004554 <HAL_UART_Receive_IT>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000628 	.word	0x20000628
 8001974:	20000581 	.word	0x20000581
 8001978:	20000580 	.word	0x20000580
 800197c:	20000500 	.word	0x20000500
 8001980:	20000450 	.word	0x20000450

08001984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001988:	f000 fc31 	bl	80021ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198c:	f000 f82a 	bl	80019e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001990:	f7ff f9c8 	bl	8000d24 <MX_GPIO_Init>
  MX_ETH_Init();
 8001994:	f7ff f822 	bl	80009dc <MX_ETH_Init>
  MX_UART5_Init();
 8001998:	f000 f9fe 	bl	8001d98 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800199c:	f000 fa2c 	bl	8001df8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019a0:	f000 fb54 	bl	800204c <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80019a4:	f000 f9c8 	bl	8001d38 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  lwgps_init(&gps);
 80019a8:	4809      	ldr	r0, [pc, #36]	; (80019d0 <main+0x4c>)
 80019aa:	f7ff fedf 	bl	800176c <lwgps_init>
  HAL_UART_Receive_IT(&huart5, &rx_data, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	4908      	ldr	r1, [pc, #32]	; (80019d4 <main+0x50>)
 80019b2:	4809      	ldr	r0, [pc, #36]	; (80019d8 <main+0x54>)
 80019b4:	f002 fdce 	bl	8004554 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, (uint8_t*) &bt_rx_buffer, sizeof(bt_rx_buffer));
 80019b8:	220d      	movs	r2, #13
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <main+0x58>)
 80019bc:	4808      	ldr	r0, [pc, #32]	; (80019e0 <main+0x5c>)
 80019be:	f002 fdc9 	bl	8004554 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80019c2:	f004 fb03 	bl	8005fcc <osKernelInitialize>
  MX_FREERTOS_Init();
 80019c6:	f7ff f90f 	bl	8000be8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019ca:	f004 fb33 	bl	8006034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <main+0x4a>
 80019d0:	20000450 	.word	0x20000450
 80019d4:	20000581 	.word	0x20000581
 80019d8:	20000628 	.word	0x20000628
 80019dc:	2000058c 	.word	0x2000058c
 80019e0:	200005a0 	.word	0x200005a0

080019e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b094      	sub	sp, #80	; 0x50
 80019e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	2234      	movs	r2, #52	; 0x34
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fb3b 	bl	800906e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f8:	f107 0308 	add.w	r3, r7, #8
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a08:	f001 fc4a 	bl	80032a0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <SystemClock_Config+0xd0>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <SystemClock_Config+0xd0>)
 8001a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6413      	str	r3, [r2, #64]	; 0x40
 8001a18:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <SystemClock_Config+0xd0>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <SystemClock_Config+0xd4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a2c:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <SystemClock_Config+0xd4>)
 8001a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <SystemClock_Config+0xd4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a54:	2304      	movs	r3, #4
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a58:	23a8      	movs	r3, #168	; 0xa8
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a60:	2307      	movs	r3, #7
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a64:	2302      	movs	r3, #2
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fc27 	bl	80032c0 <HAL_RCC_OscConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a78:	f000 f820 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a80:	2302      	movs	r3, #2
 8001a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	2105      	movs	r1, #5
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 febe 	bl	800381c <HAL_RCC_ClockConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aa6:	f000 f809 	bl	8001abc <Error_Handler>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3750      	adds	r7, #80	; 0x50
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40007000 	.word	0x40007000

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <Error_Handler+0x8>
	...

08001ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_MspInit+0x4c>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_MspInit+0x4c>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_MspInit+0x4c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	210f      	movs	r1, #15
 8001b02:	f06f 0001 	mvn.w	r0, #1
 8001b06:	f000 fcce 	bl	80024a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b48:	f000 fb8e 	bl	8002268 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b4c:	f006 f8fe 	bl	8007d4c <xTaskGetSchedulerState>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b56:	f006 fedf 	bl	8008918 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <UART4_IRQHandler+0x10>)
 8001b66:	f002 fd39 	bl	80045dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200005a0 	.word	0x200005a0

08001b74 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <UART5_IRQHandler+0x10>)
 8001b7a:	f002 fd2f 	bl	80045dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000628 	.word	0x20000628

08001b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_kill>:

int _kill(int pid, int sig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba2:	f007 f933 	bl	8008e0c <__errno>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2216      	movs	r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_exit>:

void _exit (int status)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffe7 	bl	8001b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bca:	e7fe      	b.n	8001bca <_exit+0x12>

08001bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e00a      	b.n	8001bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bde:	f3af 8000 	nop.w
 8001be2:	4601      	mov	r1, r0
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf0      	blt.n	8001bde <_read+0x12>
  }

  return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e009      	b.n	8001c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf1      	blt.n	8001c18 <_write+0x12>
  }
  return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_close>:

int _close(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c66:	605a      	str	r2, [r3, #4]
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_isatty>:

int _isatty(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f007 f898 	bl	8008e0c <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20080000 	.word	0x20080000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	2000059c 	.word	0x2000059c
 8001d10:	20005660 	.word	0x20005660

08001d14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <SystemInit+0x20>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <SystemInit+0x20>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d3e:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <MX_UART4_Init+0x5c>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d5e:	2204      	movs	r2, #4
 8001d60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_UART4_Init+0x58>)
 8001d7c:	f002 fb9c 	bl	80044b8 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d86:	f7ff fe99 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200005a0 	.word	0x200005a0
 8001d94:	40004c00 	.word	0x40004c00

08001d98 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <MX_UART5_Init+0x58>)
 8001d9e:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <MX_UART5_Init+0x5c>)
 8001da0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <MX_UART5_Init+0x58>)
 8001da4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001da8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_UART5_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <MX_UART5_Init+0x58>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_UART5_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_UART5_Init+0x58>)
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <MX_UART5_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_UART5_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <MX_UART5_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_UART5_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_UART5_Init+0x58>)
 8001ddc:	f002 fb6c 	bl	80044b8 <HAL_UART_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001de6:	f7ff fe69 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000628 	.word	0x20000628
 8001df4:	40005000 	.word	0x40005000

08001df8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <MX_USART3_UART_Init+0x5c>)
 8001e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e1e:	220c      	movs	r2, #12
 8001e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_USART3_UART_Init+0x58>)
 8001e3c:	f002 fb3c 	bl	80044b8 <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e46:	f7ff fe39 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200006b0 	.word	0x200006b0
 8001e54:	40004800 	.word	0x40004800

08001e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0b2      	sub	sp, #200	; 0xc8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	2290      	movs	r2, #144	; 0x90
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f007 f8f8 	bl	800906e <memset>
  if(uartHandle->Instance==UART4)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6c      	ldr	r2, [pc, #432]	; (8002034 <HAL_UART_MspInit+0x1dc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d144      	bne.n	8001f12 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 fee6 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ea2:	f7ff fe0b 	bl	8001abc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ea6:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a63      	ldr	r2, [pc, #396]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001eac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b61      	ldr	r3, [pc, #388]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ebe:	4b5e      	ldr	r3, [pc, #376]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a5d      	ldr	r2, [pc, #372]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001ec4:	f043 0308 	orr.w	r3, r3, #8
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b5b      	ldr	r3, [pc, #364]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4850      	ldr	r0, [pc, #320]	; (800203c <HAL_UART_MspInit+0x1e4>)
 8001efc:	f000 fec2 	bl	8002c84 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2105      	movs	r1, #5
 8001f04:	2034      	movs	r0, #52	; 0x34
 8001f06:	f000 face 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f0a:	2034      	movs	r0, #52	; 0x34
 8001f0c:	f000 fae7 	bl	80024de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f10:	e08c      	b.n	800202c <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==UART5)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <HAL_UART_MspInit+0x1e8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d145      	bne.n	8001fa8 <HAL_UART_MspInit+0x150>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 fe9c 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001f36:	f7ff fdc1 	bl	8001abc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a3e      	ldr	r2, [pc, #248]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a38      	ldr	r2, [pc, #224]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b36      	ldr	r3, [pc, #216]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8001f84:	2307      	movs	r3, #7
 8001f86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	482c      	ldr	r0, [pc, #176]	; (8002044 <HAL_UART_MspInit+0x1ec>)
 8001f92:	f000 fe77 	bl	8002c84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2105      	movs	r1, #5
 8001f9a:	2035      	movs	r0, #53	; 0x35
 8001f9c:	f000 fa83 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001fa0:	2035      	movs	r0, #53	; 0x35
 8001fa2:	f000 fa9c 	bl	80024de <HAL_NVIC_EnableIRQ>
}
 8001fa6:	e041      	b.n	800202c <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a26      	ldr	r2, [pc, #152]	; (8002048 <HAL_UART_MspInit+0x1f0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d13c      	bne.n	800202c <HAL_UART_MspInit+0x1d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 fe51 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8001fcc:	f7ff fd76 	bl	8001abc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a18      	ldr	r2, [pc, #96]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001fee:	f043 0308 	orr.w	r3, r3, #8
 8001ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_UART_MspInit+0x1e0>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002000:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800201a:	2307      	movs	r3, #7
 800201c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002020:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002024:	4619      	mov	r1, r3
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <HAL_UART_MspInit+0x1e4>)
 8002028:	f000 fe2c 	bl	8002c84 <HAL_GPIO_Init>
}
 800202c:	bf00      	nop
 800202e:	37c8      	adds	r7, #200	; 0xc8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40004c00 	.word	0x40004c00
 8002038:	40023800 	.word	0x40023800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40005000 	.word	0x40005000
 8002044:	40020400 	.word	0x40020400
 8002048:	40004800 	.word	0x40004800

0800204c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002052:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002056:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800205a:	2206      	movs	r2, #6
 800205c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002060:	2202      	movs	r2, #2
 8002062:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800206c:	2202      	movs	r2, #2
 800206e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002072:	2201      	movs	r2, #1
 8002074:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002084:	2201      	movs	r2, #1
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002090:	f000 ffbd 	bl	800300e <HAL_PCD_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800209a:	f7ff fd0f 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000738 	.word	0x20000738

080020a8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0ae      	sub	sp, #184	; 0xb8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2290      	movs	r2, #144	; 0x90
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f006 ffd0 	bl	800906e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d6:	d159      	bne.n	800218c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80020d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 fdbd 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80020f4:	f7ff fce2 	bl	8001abc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_PCD_MspInit+0xec>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4a25      	ldr	r2, [pc, #148]	; (8002194 <HAL_PCD_MspInit+0xec>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6313      	str	r3, [r2, #48]	; 0x30
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_PCD_MspInit+0xec>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002110:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800212a:	230a      	movs	r3, #10
 800212c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002134:	4619      	mov	r1, r3
 8002136:	4818      	ldr	r0, [pc, #96]	; (8002198 <HAL_PCD_MspInit+0xf0>)
 8002138:	f000 fda4 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800213c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002154:	4619      	mov	r1, r3
 8002156:	4810      	ldr	r0, [pc, #64]	; (8002198 <HAL_PCD_MspInit+0xf0>)
 8002158:	f000 fd94 	bl	8002c84 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_PCD_MspInit+0xec>)
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_PCD_MspInit+0xec>)
 8002162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002166:	6353      	str	r3, [r2, #52]	; 0x34
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_PCD_MspInit+0xec>)
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_PCD_MspInit+0xec>)
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_PCD_MspInit+0xec>)
 800217a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217e:	6453      	str	r3, [r2, #68]	; 0x44
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_PCD_MspInit+0xec>)
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800218c:	bf00      	nop
 800218e:	37b8      	adds	r7, #184	; 0xb8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	40020000 	.word	0x40020000

0800219c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800219c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a0:	480d      	ldr	r0, [pc, #52]	; (80021d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021a2:	490e      	ldr	r1, [pc, #56]	; (80021dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b8:	4c0b      	ldr	r4, [pc, #44]	; (80021e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021c6:	f7ff fda5 	bl	8001d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ca:	f006 ff1b 	bl	8009004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ce:	f7ff fbd9 	bl	8001984 <main>
  bx  lr    
 80021d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80021e0:	0800c1cc 	.word	0x0800c1cc
  ldr r2, =_sbss
 80021e4:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 80021e8:	2000565c 	.word	0x2000565c

080021ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC_IRQHandler>

080021ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f2:	2003      	movs	r0, #3
 80021f4:	f000 f94c 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f8:	200f      	movs	r0, #15
 80021fa:	f000 f805 	bl	8002208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fe:	f7ff fc63 	bl	8001ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_InitTick+0x54>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x58>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f967 	bl	80024fa <HAL_SYSTICK_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00e      	b.n	8002254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d80a      	bhi.n	8002252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f000 f92f 	bl	80024a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002248:	4a06      	ldr	r2, [pc, #24]	; (8002264 <HAL_InitTick+0x5c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000000 	.word	0x20000000
 8002260:	20000008 	.word	0x20000008
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x20>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x24>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4413      	add	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_IncTick+0x24>)
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	20000c40 	.word	0x20000c40

08002290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_GetTick+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000c40 	.word	0x20000c40

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff ffee 	bl	8002290 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_Delay+0x44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ce:	bf00      	nop
 80022d0:	f7ff ffde 	bl	8002290 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008

080022f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <__NVIC_SetPriorityGrouping+0x40>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800230c:	4013      	ands	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	4313      	orrs	r3, r2
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <__NVIC_SetPriorityGrouping+0x40>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00
 8002334:	05fa0000 	.word	0x05fa0000

08002338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <__NVIC_GetPriorityGrouping+0x18>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f003 0307 	and.w	r3, r3, #7
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	db0b      	blt.n	800237e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <__NVIC_EnableIRQ+0x38>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	2001      	movs	r0, #1
 8002376:	fa00 f202 	lsl.w	r2, r0, r2
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e100 	.word	0xe000e100

08002390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db0a      	blt.n	80023ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	490c      	ldr	r1, [pc, #48]	; (80023dc <__NVIC_SetPriority+0x4c>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	440b      	add	r3, r1
 80023b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b8:	e00a      	b.n	80023d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <__NVIC_SetPriority+0x50>)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3b04      	subs	r3, #4
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	440b      	add	r3, r1
 80023ce:	761a      	strb	r2, [r3, #24]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f1c3 0307 	rsb	r3, r3, #7
 80023fe:	2b04      	cmp	r3, #4
 8002400:	bf28      	it	cs
 8002402:	2304      	movcs	r3, #4
 8002404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3304      	adds	r3, #4
 800240a:	2b06      	cmp	r3, #6
 800240c:	d902      	bls.n	8002414 <NVIC_EncodePriority+0x30>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3b03      	subs	r3, #3
 8002412:	e000      	b.n	8002416 <NVIC_EncodePriority+0x32>
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	43d9      	mvns	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	4313      	orrs	r3, r2
         );
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800245c:	d301      	bcc.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e00f      	b.n	8002482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <SysTick_Config+0x40>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	210f      	movs	r1, #15
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f7ff ff8e 	bl	8002390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <SysTick_Config+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <SysTick_Config+0x40>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff29 	bl	80022f0 <__NVIC_SetPriorityGrouping>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff3e 	bl	8002338 <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff8e 	bl	80023e4 <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff5d 	bl	8002390 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff31 	bl	8002354 <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffa2 	bl	800244c <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff feb6 	bl	8002290 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d008      	beq.n	8002544 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e052      	b.n	80025ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0216 	bic.w	r2, r2, #22
 8002552:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002562:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <HAL_DMA_Abort+0x62>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0208 	bic.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002594:	e013      	b.n	80025be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002596:	f7ff fe7b 	bl	8002290 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d90c      	bls.n	80025be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2203      	movs	r2, #3
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e015      	b.n	80025ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e4      	bne.n	8002596 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	223f      	movs	r2, #63	; 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d004      	beq.n	8002610 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e00c      	b.n	800262a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2205      	movs	r2, #5
 8002614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06a      	b.n	8002720 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2223      	movs	r2, #35	; 0x23
 8002658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fe fa0b 	bl	8000a78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_ETH_Init+0xf0>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	4a30      	ldr	r2, [pc, #192]	; (8002728 <HAL_ETH_Init+0xf0>)
 8002668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266c:	6453      	str	r3, [r2, #68]	; 0x44
 800266e:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <HAL_ETH_Init+0xf0>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <HAL_ETH_Init+0xf4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4a2b      	ldr	r2, [pc, #172]	; (800272c <HAL_ETH_Init+0xf4>)
 8002680:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002684:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002686:	4b29      	ldr	r3, [pc, #164]	; (800272c <HAL_ETH_Init+0xf4>)
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4927      	ldr	r1, [pc, #156]	; (800272c <HAL_ETH_Init+0xf4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_ETH_Init+0xf4>)
 8002696:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b0:	f7ff fdee 	bl	8002290 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026b6:	e011      	b.n	80026dc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026b8:	f7ff fdea 	bl	8002290 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026c6:	d909      	bls.n	80026dc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	22e0      	movs	r2, #224	; 0xe0
 80026d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e021      	b.n	8002720 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e4      	bne.n	80026b8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f958 	bl	80029a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f9ff 	bl	8002af8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa55 	bl	8002baa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	461a      	mov	r2, r3
 8002706:	2100      	movs	r1, #0
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f9bd 	bl	8002a88 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2210      	movs	r2, #16
 800271a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	40013800 	.word	0x40013800

08002730 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4b51      	ldr	r3, [pc, #324]	; (800288c <ETH_SetMACConfig+0x15c>)
 8002746:	4013      	ands	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	7c1b      	ldrb	r3, [r3, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <ETH_SetMACConfig+0x28>
 8002752:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002756:	e000      	b.n	800275a <ETH_SetMACConfig+0x2a>
 8002758:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7c5b      	ldrb	r3, [r3, #17]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <ETH_SetMACConfig+0x38>
 8002762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002766:	e000      	b.n	800276a <ETH_SetMACConfig+0x3a>
 8002768:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800276a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002770:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	7fdb      	ldrb	r3, [r3, #31]
 8002776:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002778:	431a      	orrs	r2, r3
                        macconf->Speed |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800277e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	7f92      	ldrb	r2, [r2, #30]
 8002784:	2a00      	cmp	r2, #0
 8002786:	d102      	bne.n	800278e <ETH_SetMACConfig+0x5e>
 8002788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800278c:	e000      	b.n	8002790 <ETH_SetMACConfig+0x60>
 800278e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002790:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7f1b      	ldrb	r3, [r3, #28]
 8002796:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002798:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800279e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	791b      	ldrb	r3, [r3, #4]
 80027a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80027a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027ae:	2a00      	cmp	r2, #0
 80027b0:	d102      	bne.n	80027b8 <ETH_SetMACConfig+0x88>
 80027b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b6:	e000      	b.n	80027ba <ETH_SetMACConfig+0x8a>
 80027b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	7bdb      	ldrb	r3, [r3, #15]
 80027c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027d2:	4313      	orrs	r3, r2
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ea:	2001      	movs	r0, #1
 80027ec:	f7ff fd5c 	bl	80022a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002806:	4013      	ands	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002816:	2a00      	cmp	r2, #0
 8002818:	d101      	bne.n	800281e <ETH_SetMACConfig+0xee>
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	e000      	b.n	8002820 <ETH_SetMACConfig+0xf0>
 800281e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002820:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002826:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800282e:	2a01      	cmp	r2, #1
 8002830:	d101      	bne.n	8002836 <ETH_SetMACConfig+0x106>
 8002832:	2208      	movs	r2, #8
 8002834:	e000      	b.n	8002838 <ETH_SetMACConfig+0x108>
 8002836:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002838:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002840:	2a01      	cmp	r2, #1
 8002842:	d101      	bne.n	8002848 <ETH_SetMACConfig+0x118>
 8002844:	2204      	movs	r2, #4
 8002846:	e000      	b.n	800284a <ETH_SetMACConfig+0x11a>
 8002848:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800284a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002852:	2a01      	cmp	r2, #1
 8002854:	d101      	bne.n	800285a <ETH_SetMACConfig+0x12a>
 8002856:	2202      	movs	r2, #2
 8002858:	e000      	b.n	800285c <ETH_SetMACConfig+0x12c>
 800285a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800285c:	4313      	orrs	r3, r2
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002874:	2001      	movs	r0, #1
 8002876:	f7ff fd17 	bl	80022a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	619a      	str	r2, [r3, #24]
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	ff20810f 	.word	0xff20810f

08002890 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <ETH_SetDMAConfig+0x110>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	7b1b      	ldrb	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <ETH_SetDMAConfig+0x2c>
 80028b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028ba:	e000      	b.n	80028be <ETH_SetDMAConfig+0x2e>
 80028bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7b5b      	ldrb	r3, [r3, #13]
 80028c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	7f52      	ldrb	r2, [r2, #29]
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	d102      	bne.n	80028d4 <ETH_SetDMAConfig+0x44>
 80028ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028d2:	e000      	b.n	80028d6 <ETH_SetDMAConfig+0x46>
 80028d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	7b9b      	ldrb	r3, [r3, #14]
 80028dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	7f1b      	ldrb	r3, [r3, #28]
 80028ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	7f9b      	ldrb	r3, [r3, #30]
 80028f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002902:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002904:	4313      	orrs	r3, r2
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002914:	461a      	mov	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002926:	2001      	movs	r0, #1
 8002928:	f7ff fcbe 	bl	80022a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002934:	461a      	mov	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	791b      	ldrb	r3, [r3, #4]
 800293e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002944:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800294a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002950:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002958:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800295a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002962:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002968:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002976:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002984:	2001      	movs	r0, #1
 8002986:	f7ff fc8f 	bl	80022a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	f8de3f23 	.word	0xf8de3f23

080029a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b0a6      	sub	sp, #152	; 0x98
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80029b2:	2301      	movs	r3, #1
 80029b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80029b8:	2300      	movs	r3, #0
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029e0:	2300      	movs	r3, #0
 80029e2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fe86 	bl	8002730 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a24:	2301      	movs	r3, #1
 8002a26:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a50:	2301      	movs	r3, #1
 8002a52:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a58:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a64:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ff08 	bl	8002890 <ETH_SetDMAConfig>
}
 8002a80:	bf00      	nop
 8002a82:	3798      	adds	r7, #152	; 0x98
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3305      	adds	r3, #5
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	3204      	adds	r2, #4
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <ETH_MACAddressConfig+0x68>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3303      	adds	r3, #3
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	061a      	lsls	r2, r3, #24
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3302      	adds	r3, #2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	4313      	orrs	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <ETH_MACAddressConfig+0x6c>)
 8002ada:	4413      	add	r3, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	6013      	str	r3, [r2, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40028040 	.word	0x40028040
 8002af4:	40028044 	.word	0x40028044

08002af8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e03e      	b.n	8002b84 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	3206      	adds	r2, #6
 8002b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d80c      	bhi.n	8002b68 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68d9      	ldr	r1, [r3, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	e004      	b.n	8002b72 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3301      	adds	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d9bd      	bls.n	8002b06 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b9c:	611a      	str	r2, [r3, #16]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e046      	b.n	8002c46 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6919      	ldr	r1, [r3, #16]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2200      	movs	r2, #0
 8002be6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2200      	movs	r2, #0
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002bfc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	3212      	adds	r2, #18
 8002c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d80c      	bhi.n	8002c36 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6919      	ldr	r1, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60da      	str	r2, [r3, #12]
 8002c34:	e004      	b.n	8002c40 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3301      	adds	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d9b5      	bls.n	8002bb8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c76:	60da      	str	r2, [r3, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	e175      	b.n	8002f90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	f040 8164 	bne.w	8002f8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d005      	beq.n	8002cda <HAL_GPIO_Init+0x56>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d130      	bne.n	8002d3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d10:	2201      	movs	r2, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 0201 	and.w	r2, r3, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d017      	beq.n	8002d78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d123      	bne.n	8002dcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	08da      	lsrs	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3208      	adds	r2, #8
 8002d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	08da      	lsrs	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3208      	adds	r2, #8
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0203 	and.w	r2, r3, #3
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80be 	beq.w	8002f8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4a65      	ldr	r2, [pc, #404]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	4b63      	ldr	r3, [pc, #396]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e26:	4a61      	ldr	r2, [pc, #388]	; (8002fac <HAL_GPIO_Init+0x328>)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a58      	ldr	r2, [pc, #352]	; (8002fb0 <HAL_GPIO_Init+0x32c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d037      	beq.n	8002ec2 <HAL_GPIO_Init+0x23e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a57      	ldr	r2, [pc, #348]	; (8002fb4 <HAL_GPIO_Init+0x330>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d031      	beq.n	8002ebe <HAL_GPIO_Init+0x23a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_GPIO_Init+0x334>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02b      	beq.n	8002eba <HAL_GPIO_Init+0x236>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a55      	ldr	r2, [pc, #340]	; (8002fbc <HAL_GPIO_Init+0x338>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d025      	beq.n	8002eb6 <HAL_GPIO_Init+0x232>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a54      	ldr	r2, [pc, #336]	; (8002fc0 <HAL_GPIO_Init+0x33c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01f      	beq.n	8002eb2 <HAL_GPIO_Init+0x22e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a53      	ldr	r2, [pc, #332]	; (8002fc4 <HAL_GPIO_Init+0x340>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d019      	beq.n	8002eae <HAL_GPIO_Init+0x22a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	; (8002fc8 <HAL_GPIO_Init+0x344>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_GPIO_Init+0x226>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a51      	ldr	r2, [pc, #324]	; (8002fcc <HAL_GPIO_Init+0x348>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00d      	beq.n	8002ea6 <HAL_GPIO_Init+0x222>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a50      	ldr	r2, [pc, #320]	; (8002fd0 <HAL_GPIO_Init+0x34c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <HAL_GPIO_Init+0x21e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4f      	ldr	r2, [pc, #316]	; (8002fd4 <HAL_GPIO_Init+0x350>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d101      	bne.n	8002e9e <HAL_GPIO_Init+0x21a>
 8002e9a:	2309      	movs	r3, #9
 8002e9c:	e012      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	e010      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	e00e      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ea6:	2307      	movs	r3, #7
 8002ea8:	e00c      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eaa:	2306      	movs	r3, #6
 8002eac:	e00a      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	; (8002fac <HAL_GPIO_Init+0x328>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f06:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f30:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f36:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f60:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f ae86 	bls.w	8002ca4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40021c00 	.word	0x40021c00
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40022400 	.word	0x40022400
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ff8:	e003      	b.n	8003002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	619a      	str	r2, [r3, #24]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800300e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003010:	b08f      	sub	sp, #60	; 0x3c
 8003012:	af0a      	add	r7, sp, #40	; 0x28
 8003014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e116      	b.n	800324e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff f834 	bl	80020a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2203      	movs	r2, #3
 8003044:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fd10 	bl	8005a84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	687e      	ldr	r6, [r7, #4]
 800306c:	466d      	mov	r5, sp
 800306e:	f106 0410 	add.w	r4, r6, #16
 8003072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800307a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800307e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003082:	1d33      	adds	r3, r6, #4
 8003084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003086:	6838      	ldr	r0, [r7, #0]
 8003088:	f002 fca4 	bl	80059d4 <USB_CoreInit>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0d7      	b.n	800324e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fcfe 	bl	8005aa6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	e04a      	b.n	8003146 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	333d      	adds	r3, #61	; 0x3d
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	333c      	adds	r3, #60	; 0x3c
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	b298      	uxth	r0, r3
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	3344      	adds	r3, #68	; 0x44
 80030ec:	4602      	mov	r2, r0
 80030ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3340      	adds	r3, #64	; 0x40
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3348      	adds	r3, #72	; 0x48
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	334c      	adds	r3, #76	; 0x4c
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3354      	adds	r3, #84	; 0x54
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	3301      	adds	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d3af      	bcc.n	80030b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	e044      	b.n	80031e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	3301      	adds	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d3b5      	bcc.n	8003156 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	687e      	ldr	r6, [r7, #4]
 80031f2:	466d      	mov	r5, sp
 80031f4:	f106 0410 	add.w	r4, r6, #16
 80031f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003200:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003204:	e885 0003 	stmia.w	r5, {r0, r1}
 8003208:	1d33      	adds	r3, r6, #4
 800320a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320c:	6838      	ldr	r0, [r7, #0]
 800320e:	f002 fc97 	bl	8005b40 <USB_DevInit>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e014      	b.n	800324e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b01      	cmp	r3, #1
 800323a:	d102      	bne.n	8003242 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f80b 	bl	8003258 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f002 fe55 	bl	8005ef6 <USB_DevDisconnect>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003258 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_PCDEx_ActivateLPM+0x44>)
 8003288:	4313      	orrs	r3, r2
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	10000003 	.word	0x10000003

080032a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40007000 	.word	0x40007000

080032c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032c8:	2300      	movs	r3, #0
 80032ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e29b      	b.n	800380e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8087 	beq.w	80033f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e4:	4b96      	ldr	r3, [pc, #600]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d00c      	beq.n	800330a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f0:	4b93      	ldr	r3, [pc, #588]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d112      	bne.n	8003322 <HAL_RCC_OscConfig+0x62>
 80032fc:	4b90      	ldr	r3, [pc, #576]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003308:	d10b      	bne.n	8003322 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330a:	4b8d      	ldr	r3, [pc, #564]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d06c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x130>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d168      	bne.n	80033f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e275      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x7a>
 800332c:	4b84      	ldr	r3, [pc, #528]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a83      	ldr	r2, [pc, #524]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e02e      	b.n	8003398 <HAL_RCC_OscConfig+0xd8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x9c>
 8003342:	4b7f      	ldr	r3, [pc, #508]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7e      	ldr	r2, [pc, #504]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b7c      	ldr	r3, [pc, #496]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7b      	ldr	r2, [pc, #492]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e01d      	b.n	8003398 <HAL_RCC_OscConfig+0xd8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0xc0>
 8003366:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a75      	ldr	r2, [pc, #468]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b73      	ldr	r3, [pc, #460]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a72      	ldr	r2, [pc, #456]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0xd8>
 8003380:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6e      	ldr	r2, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b6c      	ldr	r3, [pc, #432]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6b      	ldr	r2, [pc, #428]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe ff76 	bl	8002290 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe ff72 	bl	8002290 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e229      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b61      	ldr	r3, [pc, #388]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0xe8>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe ff62 	bl	8002290 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe ff5e 	bl	8002290 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e215      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	4b57      	ldr	r3, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x110>
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d069      	beq.n	80034d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fe:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340a:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b08      	cmp	r3, #8
 8003414:	d11c      	bne.n	8003450 <HAL_RCC_OscConfig+0x190>
 8003416:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x17a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e1e9      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	493d      	ldr	r1, [pc, #244]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	e040      	b.n	80034d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d023      	beq.n	80034a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003458:	4b39      	ldr	r3, [pc, #228]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a38      	ldr	r2, [pc, #224]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe ff14 	bl	8002290 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346c:	f7fe ff10 	bl	8002290 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1c7      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	4b30      	ldr	r3, [pc, #192]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4929      	ldr	r1, [pc, #164]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
 800349e:	e018      	b.n	80034d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe fef0 	bl	8002290 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe feec 	bl	8002290 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1a3      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d038      	beq.n	8003550 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d019      	beq.n	800351a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ea:	4a15      	ldr	r2, [pc, #84]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fe fecd 	bl	8002290 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fa:	f7fe fec9 	bl	8002290 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e180      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x23a>
 8003518:	e01a      	b.n	8003550 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe feb3 	bl	8002290 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352e:	f7fe feaf 	bl	8002290 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d903      	bls.n	8003544 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e166      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
 8003540:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	4b92      	ldr	r3, [pc, #584]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ee      	bne.n	800352e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a4 	beq.w	80036a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b8c      	ldr	r3, [pc, #560]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	4b89      	ldr	r3, [pc, #548]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a88      	ldr	r2, [pc, #544]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b86      	ldr	r3, [pc, #536]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003586:	4b83      	ldr	r3, [pc, #524]	; (8003794 <HAL_RCC_OscConfig+0x4d4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d118      	bne.n	80035c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003592:	4b80      	ldr	r3, [pc, #512]	; (8003794 <HAL_RCC_OscConfig+0x4d4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7f      	ldr	r2, [pc, #508]	; (8003794 <HAL_RCC_OscConfig+0x4d4>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359e:	f7fe fe77 	bl	8002290 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a6:	f7fe fe73 	bl	8002290 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b64      	cmp	r3, #100	; 0x64
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e12a      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b8:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x4d4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x31a>
 80035cc:	4b70      	ldr	r3, [pc, #448]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a6f      	ldr	r2, [pc, #444]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
 80035d8:	e02d      	b.n	8003636 <HAL_RCC_OscConfig+0x376>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0x33c>
 80035e2:	4b6b      	ldr	r3, [pc, #428]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a6a      	ldr	r2, [pc, #424]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
 80035ee:	4b68      	ldr	r3, [pc, #416]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a67      	ldr	r2, [pc, #412]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70
 80035fa:	e01c      	b.n	8003636 <HAL_RCC_OscConfig+0x376>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d10c      	bne.n	800361e <HAL_RCC_OscConfig+0x35e>
 8003604:	4b62      	ldr	r3, [pc, #392]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	4a61      	ldr	r2, [pc, #388]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a5e      	ldr	r2, [pc, #376]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
 800361c:	e00b      	b.n	8003636 <HAL_RCC_OscConfig+0x376>
 800361e:	4b5c      	ldr	r3, [pc, #368]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a5b      	ldr	r2, [pc, #364]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
 800362a:	4b59      	ldr	r3, [pc, #356]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a58      	ldr	r2, [pc, #352]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d015      	beq.n	800366a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fe fe27 	bl	8002290 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fe fe23 	bl	8002290 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0d8      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ee      	beq.n	8003646 <HAL_RCC_OscConfig+0x386>
 8003668:	e014      	b.n	8003694 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fe fe11 	bl	8002290 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe fe0d 	bl	8002290 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e0c2      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	4b41      	ldr	r3, [pc, #260]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ee      	bne.n	8003672 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80ae 	beq.w	800380c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b0:	4b37      	ldr	r3, [pc, #220]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d06d      	beq.n	8003798 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d14b      	bne.n	800375c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a31      	ldr	r2, [pc, #196]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fdde 	bl	8002290 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fe fdda 	bl	8002290 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e091      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	4b29      	ldr	r3, [pc, #164]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	3b01      	subs	r3, #1
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	071b      	lsls	r3, r3, #28
 8003722:	491b      	ldr	r1, [pc, #108]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe fdac 	bl	8002290 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe fda8 	bl	8002290 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e05f      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x47c>
 800375a:	e057      	b.n	800380c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe fd92 	bl	8002290 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe fd8e 	bl	8002290 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e045      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x4b0>
 800378e:	e03d      	b.n	800380c <HAL_RCC_OscConfig+0x54c>
 8003790:	40023800 	.word	0x40023800
 8003794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003798:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <HAL_RCC_OscConfig+0x558>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d030      	beq.n	8003808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d129      	bne.n	8003808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d122      	bne.n	8003808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c8:	4013      	ands	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d119      	bne.n	8003808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	3b01      	subs	r3, #1
 80037e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d10f      	bne.n	8003808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0d0      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 020f 	bic.w	r2, r3, #15
 800384a:	4965      	ldr	r1, [pc, #404]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0b8      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800387c:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003886:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800389e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	494d      	ldr	r1, [pc, #308]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d040      	beq.n	8003940 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d115      	bne.n	80038fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e07f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e073      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	4b3d      	ldr	r3, [pc, #244]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06b      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b39      	ldr	r3, [pc, #228]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4936      	ldr	r1, [pc, #216]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fe fcbe 	bl	8002290 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fe fcba 	bl	8002290 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e053      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d210      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 020f 	bic.w	r2, r3, #15
 8003956:	4922      	ldr	r1, [pc, #136]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e032      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4916      	ldr	r1, [pc, #88]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	490e      	ldr	r1, [pc, #56]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ae:	f000 f821 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	490a      	ldr	r1, [pc, #40]	; (80039e8 <HAL_RCC_ClockConfig+0x1cc>)
 80039c0:	5ccb      	ldrb	r3, [r1, r3]
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1d0>)
 80039c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_ClockConfig+0x1d4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fc1a 	bl	8002208 <HAL_InitTick>

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023c00 	.word	0x40023c00
 80039e4:	40023800 	.word	0x40023800
 80039e8:	0800bd74 	.word	0x0800bd74
 80039ec:	20000000 	.word	0x20000000
 80039f0:	20000004 	.word	0x20000004

080039f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f8:	b094      	sub	sp, #80	; 0x50
 80039fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003a00:	2300      	movs	r3, #0
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a04:	2300      	movs	r3, #0
 8003a06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a0c:	4b79      	ldr	r3, [pc, #484]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d00d      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x40>
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	f200 80e1 	bhi.w	8003be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x34>
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d003      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a26:	e0db      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b73      	ldr	r3, [pc, #460]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a2c:	e0db      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a2e:	4b73      	ldr	r3, [pc, #460]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a32:	e0d8      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a34:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a3e:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d063      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4a:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	099b      	lsrs	r3, r3, #6
 8003a50:	2200      	movs	r2, #0
 8003a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5e:	2300      	movs	r3, #0
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
 8003a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a66:	4622      	mov	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	f04f 0000 	mov.w	r0, #0
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	0159      	lsls	r1, r3, #5
 8003a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a78:	0150      	lsls	r0, r2, #5
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4621      	mov	r1, r4
 8003a80:	1a51      	subs	r1, r2, r1
 8003a82:	6139      	str	r1, [r7, #16]
 8003a84:	4629      	mov	r1, r5
 8003a86:	eb63 0301 	sbc.w	r3, r3, r1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a98:	4659      	mov	r1, fp
 8003a9a:	018b      	lsls	r3, r1, #6
 8003a9c:	4651      	mov	r1, sl
 8003a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aa2:	4651      	mov	r1, sl
 8003aa4:	018a      	lsls	r2, r1, #6
 8003aa6:	4651      	mov	r1, sl
 8003aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8003aac:	4659      	mov	r1, fp
 8003aae:	eb63 0901 	sbc.w	r9, r3, r1
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ac6:	4690      	mov	r8, r2
 8003ac8:	4699      	mov	r9, r3
 8003aca:	4623      	mov	r3, r4
 8003acc:	eb18 0303 	adds.w	r3, r8, r3
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	eb49 0303 	adc.w	r3, r9, r3
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	024b      	lsls	r3, r1, #9
 8003aea:	4621      	mov	r1, r4
 8003aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003af0:	4621      	mov	r1, r4
 8003af2:	024a      	lsls	r2, r1, #9
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afa:	2200      	movs	r2, #0
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b04:	f7fc fdb0 	bl	8000668 <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b10:	e058      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b12:	4b38      	ldr	r3, [pc, #224]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	2200      	movs	r2, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
 8003b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	f04f 0000 	mov.w	r0, #0
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	0159      	lsls	r1, r3, #5
 8003b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b3e:	0150      	lsls	r0, r2, #5
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4641      	mov	r1, r8
 8003b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b64:	ebb2 040a 	subs.w	r4, r2, sl
 8003b68:	eb63 050b 	sbc.w	r5, r3, fp
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	00eb      	lsls	r3, r5, #3
 8003b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b7a:	00e2      	lsls	r2, r4, #3
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	4643      	mov	r3, r8
 8003b82:	18e3      	adds	r3, r4, r3
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	464b      	mov	r3, r9
 8003b88:	eb45 0303 	adc.w	r3, r5, r3
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	028b      	lsls	r3, r1, #10
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	028a      	lsls	r2, r1, #10
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4619      	mov	r1, r3
 8003bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bae:	2200      	movs	r2, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb8:	f7fc fd56 	bl	8000668 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003bd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bde:	e002      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3750      	adds	r7, #80	; 0x50
 8003bec:	46bd      	mov	sp, r7
 8003bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	007a1200 	.word	0x007a1200

08003c00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000000 	.word	0x20000000

08003c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c1c:	f7ff fff0 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0a9b      	lsrs	r3, r3, #10
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4903      	ldr	r1, [pc, #12]	; (8003c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	0800bd84 	.word	0x0800bd84

08003c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c44:	f7ff ffdc 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0b5b      	lsrs	r3, r3, #13
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	; (8003c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40023800 	.word	0x40023800
 8003c64:	0800bd84 	.word	0x0800bd84

08003c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d012      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c90:	4b69      	ldr	r3, [pc, #420]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a68      	ldr	r2, [pc, #416]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c9a:	6093      	str	r3, [r2, #8]
 8003c9c:	4b66      	ldr	r3, [pc, #408]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	4964      	ldr	r1, [pc, #400]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d017      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc2:	4b5d      	ldr	r3, [pc, #372]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	4959      	ldr	r1, [pc, #356]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d017      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cfe:	4b4e      	ldr	r3, [pc, #312]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	494a      	ldr	r1, [pc, #296]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 808b 	beq.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d4c:	4b3a      	ldr	r3, [pc, #232]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a39      	ldr	r2, [pc, #228]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
 8003d58:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d64:	4b35      	ldr	r3, [pc, #212]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a34      	ldr	r2, [pc, #208]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d70:	f7fe fa8e 	bl	8002290 <HAL_GetTick>
 8003d74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fe fa8a 	bl	8002290 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e38f      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d8a:	4b2c      	ldr	r3, [pc, #176]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d96:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d035      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d02e      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db4:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dbe:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dd6:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ddc:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d114      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fe fa52 	bl	8002290 <HAL_GetTick>
 8003dec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fe fa4e 	bl	8002290 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e351      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ee      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1e:	d111      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e2e:	400b      	ands	r3, r1
 8003e30:	4901      	ldr	r1, [pc, #4]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
 8003e36:	e00b      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	0ffffcff 	.word	0x0ffffcff
 8003e44:	4bac      	ldr	r3, [pc, #688]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4aab      	ldr	r2, [pc, #684]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e4e:	6093      	str	r3, [r2, #8]
 8003e50:	4ba9      	ldr	r3, [pc, #676]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5c:	49a6      	ldr	r1, [pc, #664]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d010      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e6e:	4ba2      	ldr	r3, [pc, #648]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e74:	4aa0      	ldr	r2, [pc, #640]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e7e:	4b9e      	ldr	r3, [pc, #632]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	499b      	ldr	r1, [pc, #620]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e9c:	4b96      	ldr	r3, [pc, #600]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eaa:	4993      	ldr	r1, [pc, #588]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ebe:	4b8e      	ldr	r3, [pc, #568]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ecc:	498a      	ldr	r1, [pc, #552]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ee0:	4b85      	ldr	r3, [pc, #532]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eee:	4982      	ldr	r1, [pc, #520]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f02:	4b7d      	ldr	r3, [pc, #500]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4979      	ldr	r1, [pc, #484]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f24:	4b74      	ldr	r3, [pc, #464]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	4971      	ldr	r1, [pc, #452]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f46:	4b6c      	ldr	r3, [pc, #432]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	f023 020c 	bic.w	r2, r3, #12
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f54:	4968      	ldr	r1, [pc, #416]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f68:	4b63      	ldr	r3, [pc, #396]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	4960      	ldr	r1, [pc, #384]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f8a:	4b5b      	ldr	r3, [pc, #364]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f98:	4957      	ldr	r1, [pc, #348]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fac:	4b52      	ldr	r3, [pc, #328]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	494f      	ldr	r1, [pc, #316]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003fce:	4b4a      	ldr	r3, [pc, #296]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	4946      	ldr	r1, [pc, #280]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ff0:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	493e      	ldr	r1, [pc, #248]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	4935      	ldr	r1, [pc, #212]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004034:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004042:	492d      	ldr	r1, [pc, #180]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d011      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004056:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004064:	4924      	ldr	r1, [pc, #144]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004074:	d101      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004076:	2301      	movs	r3, #1
 8004078:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004096:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a4:	4914      	ldr	r1, [pc, #80]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040b8:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c8:	490b      	ldr	r1, [pc, #44]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00f      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ec:	4902      	ldr	r1, [pc, #8]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040f4:	e002      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004108:	4b8a      	ldr	r3, [pc, #552]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800410e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	4986      	ldr	r1, [pc, #536]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00b      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800412c:	4b81      	ldr	r3, [pc, #516]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004132:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800413c:	497d      	ldr	r1, [pc, #500]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d006      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80d6 	beq.w	8004304 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004158:	4b76      	ldr	r3, [pc, #472]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a75      	ldr	r2, [pc, #468]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004164:	f7fe f894 	bl	8002290 <HAL_GetTick>
 8004168:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800416c:	f7fe f890 	bl	8002290 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e195      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800417e:	4b6d      	ldr	r3, [pc, #436]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d021      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	2b00      	cmp	r3, #0
 800419c:	d11d      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800419e:	4b65      	ldr	r3, [pc, #404]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041ac:	4b61      	ldr	r3, [pc, #388]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b2:	0e1b      	lsrs	r3, r3, #24
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	019a      	lsls	r2, r3, #6
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	071b      	lsls	r3, r3, #28
 80041d2:	4958      	ldr	r1, [pc, #352]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d02e      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004204:	d129      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004206:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004214:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421a:	0f1b      	lsrs	r3, r3, #28
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	019a      	lsls	r2, r3, #6
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	061b      	lsls	r3, r3, #24
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	493e      	ldr	r1, [pc, #248]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004242:	4b3c      	ldr	r3, [pc, #240]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004248:	f023 021f 	bic.w	r2, r3, #31
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	3b01      	subs	r3, #1
 8004252:	4938      	ldr	r1, [pc, #224]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01d      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004266:	4b33      	ldr	r3, [pc, #204]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426c:	0e1b      	lsrs	r3, r3, #24
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004274:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427a:	0f1b      	lsrs	r3, r3, #28
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	019a      	lsls	r2, r3, #6
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	431a      	orrs	r2, r3
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	071b      	lsls	r3, r3, #28
 800429a:	4926      	ldr	r1, [pc, #152]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d011      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	019a      	lsls	r2, r3, #6
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	071b      	lsls	r3, r3, #28
 80042ca:	491a      	ldr	r1, [pc, #104]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042d2:	4b18      	ldr	r3, [pc, #96]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042de:	f7fd ffd7 	bl	8002290 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042e6:	f7fd ffd3 	bl	8002290 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b64      	cmp	r3, #100	; 0x64
 80042f2:	d901      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e0d8      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b01      	cmp	r3, #1
 8004308:	f040 80ce 	bne.w	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004318:	f7fd ffba 	bl	8002290 <HAL_GetTick>
 800431c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800431e:	e00b      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004320:	f7fd ffb6 	bl	8002290 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d904      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0bb      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004338:	4b5e      	ldr	r3, [pc, #376]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004344:	d0ec      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004362:	2b00      	cmp	r3, #0
 8004364:	d02e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d12a      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800436e:	4b51      	ldr	r3, [pc, #324]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800437c:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	0f1b      	lsrs	r3, r3, #28
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	019a      	lsls	r2, r3, #6
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	431a      	orrs	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	071b      	lsls	r3, r3, #28
 80043a2:	4944      	ldr	r1, [pc, #272]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043aa:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	493d      	ldr	r1, [pc, #244]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d022      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d8:	d11d      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043da:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e0:	0e1b      	lsrs	r3, r3, #24
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043e8:	4b32      	ldr	r3, [pc, #200]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	0f1b      	lsrs	r3, r3, #28
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	019a      	lsls	r2, r3, #6
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	431a      	orrs	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	071b      	lsls	r3, r3, #28
 800440e:	4929      	ldr	r1, [pc, #164]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d028      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	0e1b      	lsrs	r3, r3, #24
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004430:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	019a      	lsls	r2, r3, #6
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	4917      	ldr	r1, [pc, #92]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4911      	ldr	r1, [pc, #68]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004474:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a0e      	ldr	r2, [pc, #56]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800447a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004480:	f7fd ff06 	bl	8002290 <HAL_GetTick>
 8004484:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004488:	f7fd ff02 	bl	8002290 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e007      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a6:	d1ef      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800

080044b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e040      	b.n	800454c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd fcbc 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fb82 	bl	8004c00 <UART_SetConfig>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e022      	b.n	800454c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fdda 	bl	80050c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fe61 	bl	800520c <UART_CheckIdleState>
 800454a:	4603      	mov	r3, r0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004568:	2b20      	cmp	r3, #32
 800456a:	d132      	bne.n	80045d2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_UART_Receive_IT+0x24>
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e02b      	b.n	80045d4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d018      	beq.n	80045c2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	613b      	str	r3, [r7, #16]
   return(result);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	623b      	str	r3, [r7, #32]
 80045b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	69f9      	ldr	r1, [r7, #28]
 80045b4:	6a3a      	ldr	r2, [r7, #32]
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e6      	bne.n	8004590 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	461a      	mov	r2, r3
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 ff33 	bl	8005434 <UART_Start_Receive_IT>
 80045ce:	4603      	mov	r3, r0
 80045d0:	e000      	b.n	80045d4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3728      	adds	r7, #40	; 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b0ba      	sub	sp, #232	; 0xe8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004602:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004606:	f640 030f 	movw	r3, #2063	; 0x80f
 800460a:	4013      	ands	r3, r2
 800460c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d115      	bne.n	8004644 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00f      	beq.n	8004644 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 82ac 	beq.w	8004b92 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
      }
      return;
 8004642:	e2a6      	b.n	8004b92 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8117 	beq.w	800487c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800464e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800465a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800465e:	4b85      	ldr	r3, [pc, #532]	; (8004874 <HAL_UART_IRQHandler+0x298>)
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 810a 	beq.w	800487c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <HAL_UART_IRQHandler+0xbc>
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2201      	movs	r2, #1
 8004686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468e:	f043 0201 	orr.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d011      	beq.n	80046c8 <HAL_UART_IRQHandler+0xec>
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2202      	movs	r2, #2
 80046b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046be:	f043 0204 	orr.w	r2, r3, #4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d011      	beq.n	80046f8 <HAL_UART_IRQHandler+0x11c>
 80046d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2204      	movs	r2, #4
 80046e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ee:	f043 0202 	orr.w	r2, r3, #2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d017      	beq.n	8004734 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004714:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2208      	movs	r2, #8
 8004722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472a:	f043 0208 	orr.w	r2, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <HAL_UART_IRQHandler+0x18a>
 8004740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00c      	beq.n	8004766 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8212 	beq.w	8004b96 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00d      	beq.n	800479a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800477e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d005      	beq.n	80047be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d04f      	beq.n	800485e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fefe 	bl	80055c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d141      	bne.n	8004856 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3308      	adds	r3, #8
 80047fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800480a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1d9      	bne.n	80047d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004822:	2b00      	cmp	r3, #0
 8004824:	d013      	beq.n	800484e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482a:	4a13      	ldr	r2, [pc, #76]	; (8004878 <HAL_UART_IRQHandler+0x29c>)
 800482c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd fedd 	bl	80025f2 <HAL_DMA_Abort_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d017      	beq.n	800486e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004848:	4610      	mov	r0, r2
 800484a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e00f      	b.n	800486e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9b6 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	e00b      	b.n	800486e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9b2 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	e007      	b.n	800486e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f9ae 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800486c:	e193      	b.n	8004b96 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486e:	bf00      	nop
    return;
 8004870:	e191      	b.n	8004b96 <HAL_UART_IRQHandler+0x5ba>
 8004872:	bf00      	nop
 8004874:	04000120 	.word	0x04000120
 8004878:	08005689 	.word	0x08005689

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004880:	2b01      	cmp	r3, #1
 8004882:	f040 814c 	bne.w	8004b1e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8145 	beq.w	8004b1e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 813e 	beq.w	8004b1e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2210      	movs	r2, #16
 80048a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	f040 80b6 	bne.w	8004a26 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8165 	beq.w	8004b9a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048da:	429a      	cmp	r2, r3
 80048dc:	f080 815d 	bcs.w	8004b9a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f4:	f000 8086 	beq.w	8004a04 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800490c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004926:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800492e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800493a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1da      	bne.n	80048f8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3308      	adds	r3, #8
 8004948:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004966:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800496a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800496e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e1      	bne.n	8004942 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e3      	bne.n	800497e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d4:	f023 0310 	bic.w	r3, r3, #16
 80049d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80049e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e4      	bne.n	80049c4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd fd87 	bl	8002512 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8d8 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a24:	e0b9      	b.n	8004b9a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80ab 	beq.w	8004b9e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80a6 	beq.w	8004b9e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a74:	647b      	str	r3, [r7, #68]	; 0x44
 8004a76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e4      	bne.n	8004a52 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	623b      	str	r3, [r7, #32]
   return(result);
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aac:	633a      	str	r2, [r7, #48]	; 0x30
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e3      	bne.n	8004a88 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f023 0310 	bic.w	r3, r3, #16
 8004ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	69b9      	ldr	r1, [r7, #24]
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	617b      	str	r3, [r7, #20]
   return(result);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e4      	bne.n	8004ad4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f85c 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b1c:	e03f      	b.n	8004b9e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <HAL_UART_IRQHandler+0x56c>
 8004b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f853 	bl	8004bec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b46:	e02d      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00e      	beq.n	8004b72 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01c      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4798      	blx	r3
    }
    return;
 8004b70:	e017      	b.n	8004ba2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d012      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x5c8>
 8004b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fd92 	bl	80056b4 <UART_EndTransmit_IT>
    return;
 8004b90:	e008      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004b92:	bf00      	nop
 8004b94:	e006      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004b96:	bf00      	nop
 8004b98:	e004      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004ba2:	bf00      	nop
  }

}
 8004ba4:	37e8      	adds	r7, #232	; 0xe8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop

08004bac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4ba6      	ldr	r3, [pc, #664]	; (8004ec4 <UART_SetConfig+0x2c4>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a94      	ldr	r2, [pc, #592]	; (8004ec8 <UART_SetConfig+0x2c8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d120      	bne.n	8004cbe <UART_SetConfig+0xbe>
 8004c7c:	4b93      	ldr	r3, [pc, #588]	; (8004ecc <UART_SetConfig+0x2cc>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d816      	bhi.n	8004cb8 <UART_SetConfig+0xb8>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0x90>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004ca1 	.word	0x08004ca1
 8004c94:	08004cad 	.word	0x08004cad
 8004c98:	08004ca7 	.word	0x08004ca7
 8004c9c:	08004cb3 	.word	0x08004cb3
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e150      	b.n	8004f48 <UART_SetConfig+0x348>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e14d      	b.n	8004f48 <UART_SetConfig+0x348>
 8004cac:	2304      	movs	r3, #4
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e14a      	b.n	8004f48 <UART_SetConfig+0x348>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e147      	b.n	8004f48 <UART_SetConfig+0x348>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e144      	b.n	8004f48 <UART_SetConfig+0x348>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a83      	ldr	r2, [pc, #524]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d132      	bne.n	8004d2e <UART_SetConfig+0x12e>
 8004cc8:	4b80      	ldr	r3, [pc, #512]	; (8004ecc <UART_SetConfig+0x2cc>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d828      	bhi.n	8004d28 <UART_SetConfig+0x128>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0xdc>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d11 	.word	0x08004d11
 8004ce0:	08004d29 	.word	0x08004d29
 8004ce4:	08004d29 	.word	0x08004d29
 8004ce8:	08004d29 	.word	0x08004d29
 8004cec:	08004d1d 	.word	0x08004d1d
 8004cf0:	08004d29 	.word	0x08004d29
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d29 	.word	0x08004d29
 8004cfc:	08004d17 	.word	0x08004d17
 8004d00:	08004d29 	.word	0x08004d29
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d29 	.word	0x08004d29
 8004d0c:	08004d23 	.word	0x08004d23
 8004d10:	2300      	movs	r3, #0
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e118      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d16:	2302      	movs	r3, #2
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e115      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e112      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d22:	2308      	movs	r3, #8
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e10f      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e10c      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a68      	ldr	r2, [pc, #416]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d120      	bne.n	8004d7a <UART_SetConfig+0x17a>
 8004d38:	4b64      	ldr	r3, [pc, #400]	; (8004ecc <UART_SetConfig+0x2cc>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d42:	2b30      	cmp	r3, #48	; 0x30
 8004d44:	d013      	beq.n	8004d6e <UART_SetConfig+0x16e>
 8004d46:	2b30      	cmp	r3, #48	; 0x30
 8004d48:	d814      	bhi.n	8004d74 <UART_SetConfig+0x174>
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d009      	beq.n	8004d62 <UART_SetConfig+0x162>
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d810      	bhi.n	8004d74 <UART_SetConfig+0x174>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <UART_SetConfig+0x15c>
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d006      	beq.n	8004d68 <UART_SetConfig+0x168>
 8004d5a:	e00b      	b.n	8004d74 <UART_SetConfig+0x174>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e0f2      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d62:	2302      	movs	r3, #2
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e0ef      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e0ec      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d6e:	2308      	movs	r3, #8
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e0e9      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d74:	2310      	movs	r3, #16
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e0e6      	b.n	8004f48 <UART_SetConfig+0x348>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a56      	ldr	r2, [pc, #344]	; (8004ed8 <UART_SetConfig+0x2d8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d120      	bne.n	8004dc6 <UART_SetConfig+0x1c6>
 8004d84:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <UART_SetConfig+0x2cc>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d90:	d013      	beq.n	8004dba <UART_SetConfig+0x1ba>
 8004d92:	2bc0      	cmp	r3, #192	; 0xc0
 8004d94:	d814      	bhi.n	8004dc0 <UART_SetConfig+0x1c0>
 8004d96:	2b80      	cmp	r3, #128	; 0x80
 8004d98:	d009      	beq.n	8004dae <UART_SetConfig+0x1ae>
 8004d9a:	2b80      	cmp	r3, #128	; 0x80
 8004d9c:	d810      	bhi.n	8004dc0 <UART_SetConfig+0x1c0>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <UART_SetConfig+0x1a8>
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d006      	beq.n	8004db4 <UART_SetConfig+0x1b4>
 8004da6:	e00b      	b.n	8004dc0 <UART_SetConfig+0x1c0>
 8004da8:	2300      	movs	r3, #0
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e0cc      	b.n	8004f48 <UART_SetConfig+0x348>
 8004dae:	2302      	movs	r3, #2
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e0c9      	b.n	8004f48 <UART_SetConfig+0x348>
 8004db4:	2304      	movs	r3, #4
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e0c6      	b.n	8004f48 <UART_SetConfig+0x348>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e0c3      	b.n	8004f48 <UART_SetConfig+0x348>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e0c0      	b.n	8004f48 <UART_SetConfig+0x348>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a44      	ldr	r2, [pc, #272]	; (8004edc <UART_SetConfig+0x2dc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d125      	bne.n	8004e1c <UART_SetConfig+0x21c>
 8004dd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ecc <UART_SetConfig+0x2cc>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dde:	d017      	beq.n	8004e10 <UART_SetConfig+0x210>
 8004de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de4:	d817      	bhi.n	8004e16 <UART_SetConfig+0x216>
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dea:	d00b      	beq.n	8004e04 <UART_SetConfig+0x204>
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df0:	d811      	bhi.n	8004e16 <UART_SetConfig+0x216>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <UART_SetConfig+0x1fe>
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfa:	d006      	beq.n	8004e0a <UART_SetConfig+0x20a>
 8004dfc:	e00b      	b.n	8004e16 <UART_SetConfig+0x216>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e0a1      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e04:	2302      	movs	r3, #2
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e09e      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e09b      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e10:	2308      	movs	r3, #8
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e098      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e16:	2310      	movs	r3, #16
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e095      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2f      	ldr	r2, [pc, #188]	; (8004ee0 <UART_SetConfig+0x2e0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d125      	bne.n	8004e72 <UART_SetConfig+0x272>
 8004e26:	4b29      	ldr	r3, [pc, #164]	; (8004ecc <UART_SetConfig+0x2cc>)
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e34:	d017      	beq.n	8004e66 <UART_SetConfig+0x266>
 8004e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e3a:	d817      	bhi.n	8004e6c <UART_SetConfig+0x26c>
 8004e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e40:	d00b      	beq.n	8004e5a <UART_SetConfig+0x25a>
 8004e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e46:	d811      	bhi.n	8004e6c <UART_SetConfig+0x26c>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <UART_SetConfig+0x254>
 8004e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e50:	d006      	beq.n	8004e60 <UART_SetConfig+0x260>
 8004e52:	e00b      	b.n	8004e6c <UART_SetConfig+0x26c>
 8004e54:	2301      	movs	r3, #1
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e076      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e073      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e60:	2304      	movs	r3, #4
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e070      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e66:	2308      	movs	r3, #8
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e06d      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e06a      	b.n	8004f48 <UART_SetConfig+0x348>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <UART_SetConfig+0x2e4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d138      	bne.n	8004eee <UART_SetConfig+0x2ee>
 8004e7c:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <UART_SetConfig+0x2cc>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e8a:	d017      	beq.n	8004ebc <UART_SetConfig+0x2bc>
 8004e8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e90:	d82a      	bhi.n	8004ee8 <UART_SetConfig+0x2e8>
 8004e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e96:	d00b      	beq.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9c:	d824      	bhi.n	8004ee8 <UART_SetConfig+0x2e8>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <UART_SetConfig+0x2aa>
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d006      	beq.n	8004eb6 <UART_SetConfig+0x2b6>
 8004ea8:	e01e      	b.n	8004ee8 <UART_SetConfig+0x2e8>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e04b      	b.n	8004f48 <UART_SetConfig+0x348>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e048      	b.n	8004f48 <UART_SetConfig+0x348>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e045      	b.n	8004f48 <UART_SetConfig+0x348>
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e042      	b.n	8004f48 <UART_SetConfig+0x348>
 8004ec2:	bf00      	nop
 8004ec4:	efff69f3 	.word	0xefff69f3
 8004ec8:	40011000 	.word	0x40011000
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40004400 	.word	0x40004400
 8004ed4:	40004800 	.word	0x40004800
 8004ed8:	40004c00 	.word	0x40004c00
 8004edc:	40005000 	.word	0x40005000
 8004ee0:	40011400 	.word	0x40011400
 8004ee4:	40007800 	.word	0x40007800
 8004ee8:	2310      	movs	r3, #16
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e02c      	b.n	8004f48 <UART_SetConfig+0x348>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a72      	ldr	r2, [pc, #456]	; (80050bc <UART_SetConfig+0x4bc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d125      	bne.n	8004f44 <UART_SetConfig+0x344>
 8004ef8:	4b71      	ldr	r3, [pc, #452]	; (80050c0 <UART_SetConfig+0x4c0>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f06:	d017      	beq.n	8004f38 <UART_SetConfig+0x338>
 8004f08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f0c:	d817      	bhi.n	8004f3e <UART_SetConfig+0x33e>
 8004f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f12:	d00b      	beq.n	8004f2c <UART_SetConfig+0x32c>
 8004f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f18:	d811      	bhi.n	8004f3e <UART_SetConfig+0x33e>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <UART_SetConfig+0x326>
 8004f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f22:	d006      	beq.n	8004f32 <UART_SetConfig+0x332>
 8004f24:	e00b      	b.n	8004f3e <UART_SetConfig+0x33e>
 8004f26:	2300      	movs	r3, #0
 8004f28:	77fb      	strb	r3, [r7, #31]
 8004f2a:	e00d      	b.n	8004f48 <UART_SetConfig+0x348>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e00a      	b.n	8004f48 <UART_SetConfig+0x348>
 8004f32:	2304      	movs	r3, #4
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e007      	b.n	8004f48 <UART_SetConfig+0x348>
 8004f38:	2308      	movs	r3, #8
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e004      	b.n	8004f48 <UART_SetConfig+0x348>
 8004f3e:	2310      	movs	r3, #16
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e001      	b.n	8004f48 <UART_SetConfig+0x348>
 8004f44:	2310      	movs	r3, #16
 8004f46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f50:	d15b      	bne.n	800500a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f52:	7ffb      	ldrb	r3, [r7, #31]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d828      	bhi.n	8004faa <UART_SetConfig+0x3aa>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <UART_SetConfig+0x360>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004fab 	.word	0x08004fab
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004fab 	.word	0x08004fab
 8004f78:	08004fab 	.word	0x08004fab
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f84:	f7fe fe48 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8004f88:	61b8      	str	r0, [r7, #24]
        break;
 8004f8a:	e013      	b.n	8004fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7fe fe58 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8004f90:	61b8      	str	r0, [r7, #24]
        break;
 8004f92:	e00f      	b.n	8004fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f94:	4b4b      	ldr	r3, [pc, #300]	; (80050c4 <UART_SetConfig+0x4c4>)
 8004f96:	61bb      	str	r3, [r7, #24]
        break;
 8004f98:	e00c      	b.n	8004fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9a:	f7fe fd2b 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 8004f9e:	61b8      	str	r0, [r7, #24]
        break;
 8004fa0:	e008      	b.n	8004fb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa6:	61bb      	str	r3, [r7, #24]
        break;
 8004fa8:	e004      	b.n	8004fb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	77bb      	strb	r3, [r7, #30]
        break;
 8004fb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d074      	beq.n	80050a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	005a      	lsls	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	d916      	bls.n	8005004 <UART_SetConfig+0x404>
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d212      	bcs.n	8005004 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f023 030f 	bic.w	r3, r3, #15
 8004fe6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	89fb      	ldrh	r3, [r7, #14]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	89fa      	ldrh	r2, [r7, #14]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	e04f      	b.n	80050a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	77bb      	strb	r3, [r7, #30]
 8005008:	e04c      	b.n	80050a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800500a:	7ffb      	ldrb	r3, [r7, #31]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d828      	bhi.n	8005062 <UART_SetConfig+0x462>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0x418>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800503d 	.word	0x0800503d
 800501c:	08005045 	.word	0x08005045
 8005020:	0800504d 	.word	0x0800504d
 8005024:	08005063 	.word	0x08005063
 8005028:	08005053 	.word	0x08005053
 800502c:	08005063 	.word	0x08005063
 8005030:	08005063 	.word	0x08005063
 8005034:	08005063 	.word	0x08005063
 8005038:	0800505b 	.word	0x0800505b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800503c:	f7fe fdec 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8005040:	61b8      	str	r0, [r7, #24]
        break;
 8005042:	e013      	b.n	800506c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005044:	f7fe fdfc 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8005048:	61b8      	str	r0, [r7, #24]
        break;
 800504a:	e00f      	b.n	800506c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800504c:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <UART_SetConfig+0x4c4>)
 800504e:	61bb      	str	r3, [r7, #24]
        break;
 8005050:	e00c      	b.n	800506c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005052:	f7fe fccf 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 8005056:	61b8      	str	r0, [r7, #24]
        break;
 8005058:	e008      	b.n	800506c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505e:	61bb      	str	r3, [r7, #24]
        break;
 8005060:	e004      	b.n	800506c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	77bb      	strb	r3, [r7, #30]
        break;
 800506a:	bf00      	nop
    }

    if (pclk != 0U)
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	085a      	lsrs	r2, r3, #1
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	441a      	add	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b0f      	cmp	r3, #15
 800508a:	d909      	bls.n	80050a0 <UART_SetConfig+0x4a0>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005092:	d205      	bcs.n	80050a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	b29a      	uxth	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	e001      	b.n	80050a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40007c00 	.word	0x40007c00
 80050c0:	40023800 	.word	0x40023800
 80050c4:	00f42400 	.word	0x00f42400

080050c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01a      	beq.n	80051de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c6:	d10a      	bne.n	80051de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af02      	add	r7, sp, #8
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800521c:	f7fd f838 	bl	8002290 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d10e      	bne.n	800524e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f831 	bl	80052a6 <UART_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e027      	b.n	800529e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b04      	cmp	r3, #4
 800525a:	d10e      	bne.n	800527a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800525c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f81b 	bl	80052a6 <UART_WaitOnFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e011      	b.n	800529e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b09c      	sub	sp, #112	; 0x70
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	4613      	mov	r3, r2
 80052b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b6:	e0a7      	b.n	8005408 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	f000 80a3 	beq.w	8005408 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c2:	f7fc ffe5 	bl	8002290 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d302      	bcc.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80052d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d13f      	bne.n	8005358 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052ec:	667b      	str	r3, [r7, #100]	; 0x64
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e6      	bne.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3308      	adds	r3, #8
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	663b      	str	r3, [r7, #96]	; 0x60
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3308      	adds	r3, #8
 8005328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800532a:	64ba      	str	r2, [r7, #72]	; 0x48
 800532c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e068      	b.n	800542a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d050      	beq.n	8005408 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005374:	d148      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800537e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
 80053a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e6      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	613b      	str	r3, [r7, #16]
   return(result);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053d2:	623a      	str	r2, [r7, #32]
 80053d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	69f9      	ldr	r1, [r7, #28]
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	61bb      	str	r3, [r7, #24]
   return(result);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e010      	b.n	800542a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	429a      	cmp	r2, r3
 8005424:	f43f af48 	beq.w	80052b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3770      	adds	r7, #112	; 0x70
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005434:	b480      	push	{r7}
 8005436:	b097      	sub	sp, #92	; 0x5c
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005466:	d10e      	bne.n	8005486 <UART_Start_Receive_IT+0x52>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d105      	bne.n	800547c <UART_Start_Receive_IT+0x48>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800547a:	e02d      	b.n	80054d8 <UART_Start_Receive_IT+0xa4>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	22ff      	movs	r2, #255	; 0xff
 8005480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005484:	e028      	b.n	80054d8 <UART_Start_Receive_IT+0xa4>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10d      	bne.n	80054aa <UART_Start_Receive_IT+0x76>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <UART_Start_Receive_IT+0x6c>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	22ff      	movs	r2, #255	; 0xff
 800549a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800549e:	e01b      	b.n	80054d8 <UART_Start_Receive_IT+0xa4>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	227f      	movs	r2, #127	; 0x7f
 80054a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054a8:	e016      	b.n	80054d8 <UART_Start_Receive_IT+0xa4>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b2:	d10d      	bne.n	80054d0 <UART_Start_Receive_IT+0x9c>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d104      	bne.n	80054c6 <UART_Start_Receive_IT+0x92>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	227f      	movs	r2, #127	; 0x7f
 80054c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054c4:	e008      	b.n	80054d8 <UART_Start_Receive_IT+0xa4>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	223f      	movs	r2, #63	; 0x3f
 80054ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ce:	e003      	b.n	80054d8 <UART_Start_Receive_IT+0xa4>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2222      	movs	r2, #34	; 0x22
 80054e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3308      	adds	r3, #8
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3308      	adds	r3, #8
 8005506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005508:	64ba      	str	r2, [r7, #72]	; 0x48
 800550a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800550e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e5      	bne.n	80054e8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005524:	d107      	bne.n	8005536 <UART_Start_Receive_IT+0x102>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a21      	ldr	r2, [pc, #132]	; (80055b8 <UART_Start_Receive_IT+0x184>)
 8005532:	669a      	str	r2, [r3, #104]	; 0x68
 8005534:	e002      	b.n	800553c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4a20      	ldr	r2, [pc, #128]	; (80055bc <UART_Start_Receive_IT+0x188>)
 800553a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d019      	beq.n	8005578 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
 8005564:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e6      	bne.n	8005544 <UART_Start_Receive_IT+0x110>
 8005576:	e018      	b.n	80055aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	613b      	str	r3, [r7, #16]
   return(result);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f043 0320 	orr.w	r3, r3, #32
 800558c:	653b      	str	r3, [r7, #80]	; 0x50
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005596:	623b      	str	r3, [r7, #32]
 8005598:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	69f9      	ldr	r1, [r7, #28]
 800559c:	6a3a      	ldr	r2, [r7, #32]
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e6      	bne.n	8005578 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	375c      	adds	r7, #92	; 0x5c
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	0800586f 	.word	0x0800586f
 80055bc:	08005709 	.word	0x08005709

080055c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b095      	sub	sp, #84	; 0x54
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e6:	643b      	str	r3, [r7, #64]	; 0x40
 80055e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e6      	bne.n	80055c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	61fb      	str	r3, [r7, #28]
   return(result);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	64bb      	str	r3, [r7, #72]	; 0x48
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800561a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e5      	bne.n	80055fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005632:	2b01      	cmp	r3, #1
 8005634:	d118      	bne.n	8005668 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	60bb      	str	r3, [r7, #8]
   return(result);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f023 0310 	bic.w	r3, r3, #16
 800564a:	647b      	str	r3, [r7, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	613b      	str	r3, [r7, #16]
   return(result);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e6      	bne.n	8005636 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800567c:	bf00      	nop
 800567e:	3754      	adds	r7, #84	; 0x54
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fa8a 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	613b      	str	r3, [r7, #16]
   return(result);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff fa56 	bl	8004bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005700:	bf00      	nop
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b096      	sub	sp, #88	; 0x58
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005716:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005720:	2b22      	cmp	r3, #34	; 0x22
 8005722:	f040 8098 	bne.w	8005856 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005730:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005734:	b2d9      	uxtb	r1, r3
 8005736:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800573a:	b2da      	uxtb	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	400a      	ands	r2, r1
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d17b      	bne.n	8005866 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005782:	653b      	str	r3, [r7, #80]	; 0x50
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578c:	647b      	str	r3, [r7, #68]	; 0x44
 800578e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800579a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e6      	bne.n	800576e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	623b      	str	r3, [r7, #32]
   return(result);
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	f023 0301 	bic.w	r3, r3, #1
 80057b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3308      	adds	r3, #8
 80057be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057c0:	633a      	str	r2, [r7, #48]	; 0x30
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e5      	bne.n	80057a0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d12e      	bne.n	800584e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	60fb      	str	r3, [r7, #12]
   return(result);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0310 	bic.w	r3, r3, #16
 800580a:	64bb      	str	r3, [r7, #72]	; 0x48
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	617b      	str	r3, [r7, #20]
   return(result);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e6      	bne.n	80057f6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b10      	cmp	r3, #16
 8005834:	d103      	bne.n	800583e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2210      	movs	r2, #16
 800583c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff f9c4 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800584c:	e00b      	b.n	8005866 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fc f85a 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 8005854:	e007      	b.n	8005866 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0208 	orr.w	r2, r2, #8
 8005864:	619a      	str	r2, [r3, #24]
}
 8005866:	bf00      	nop
 8005868:	3758      	adds	r7, #88	; 0x58
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b096      	sub	sp, #88	; 0x58
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800587c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005886:	2b22      	cmp	r3, #34	; 0x22
 8005888:	f040 8098 	bne.w	80059bc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800589c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80058a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80058a4:	4013      	ands	r3, r2
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058aa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b0:	1c9a      	adds	r2, r3, #2
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d17b      	bne.n	80059cc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f2:	643b      	str	r3, [r7, #64]	; 0x40
 80058f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e6      	bne.n	80058d4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	61fb      	str	r3, [r7, #28]
   return(result);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	64bb      	str	r3, [r7, #72]	; 0x48
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005928:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800592c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005952:	2b01      	cmp	r3, #1
 8005954:	d12e      	bne.n	80059b4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	60bb      	str	r3, [r7, #8]
   return(result);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f023 0310 	bic.w	r3, r3, #16
 8005970:	647b      	str	r3, [r7, #68]	; 0x44
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800597a:	61bb      	str	r3, [r7, #24]
 800597c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6979      	ldr	r1, [r7, #20]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	613b      	str	r3, [r7, #16]
   return(result);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e6      	bne.n	800595c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b10      	cmp	r3, #16
 800599a:	d103      	bne.n	80059a4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2210      	movs	r2, #16
 80059a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff f911 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059b2:	e00b      	b.n	80059cc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fb ffa7 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 80059ba:	e007      	b.n	80059cc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0208 	orr.w	r2, r2, #8
 80059ca:	619a      	str	r2, [r3, #24]
}
 80059cc:	bf00      	nop
 80059ce:	3758      	adds	r7, #88	; 0x58
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059d4:	b084      	sub	sp, #16
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	f107 001c 	add.w	r0, r7, #28
 80059e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d120      	bne.n	8005a2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <USB_CoreInit+0xac>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d105      	bne.n	8005a22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa96 	bl	8005f54 <USB_CoreReset>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73fb      	strb	r3, [r7, #15]
 8005a2c:	e010      	b.n	8005a50 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa8a 	bl	8005f54 <USB_CoreReset>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d10b      	bne.n	8005a6e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f043 0206 	orr.w	r2, r3, #6
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f043 0220 	orr.w	r2, r3, #32
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a7a:	b004      	add	sp, #16
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	ffbdffbf 	.word	0xffbdffbf

08005a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f023 0201 	bic.w	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d115      	bne.n	8005af4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f7fc fbe7 	bl	80022a8 <HAL_Delay>
      ms++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa29 	bl	8005f38 <USB_GetMode>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d01e      	beq.n	8005b2a <USB_SetCurrentMode+0x84>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b31      	cmp	r3, #49	; 0x31
 8005af0:	d9f0      	bls.n	8005ad4 <USB_SetCurrentMode+0x2e>
 8005af2:	e01a      	b.n	8005b2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d115      	bne.n	8005b26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b06:	2001      	movs	r0, #1
 8005b08:	f7fc fbce 	bl	80022a8 <HAL_Delay>
      ms++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa10 	bl	8005f38 <USB_GetMode>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <USB_SetCurrentMode+0x84>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b31      	cmp	r3, #49	; 0x31
 8005b22:	d9f0      	bls.n	8005b06 <USB_SetCurrentMode+0x60>
 8005b24:	e001      	b.n	8005b2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e005      	b.n	8005b36 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b32      	cmp	r3, #50	; 0x32
 8005b2e:	d101      	bne.n	8005b34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b40:	b084      	sub	sp, #16
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b086      	sub	sp, #24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	e009      	b.n	8005b74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	3340      	adds	r3, #64	; 0x40
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3301      	adds	r3, #1
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b0e      	cmp	r3, #14
 8005b78:	d9f2      	bls.n	8005b60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d11c      	bne.n	8005bba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8e:	f043 0302 	orr.w	r3, r3, #2
 8005b92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	e005      	b.n	8005bc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd8:	4619      	mov	r1, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	461a      	mov	r2, r3
 8005be2:	680b      	ldr	r3, [r1, #0]
 8005be4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10c      	bne.n	8005c06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f965 	bl	8005ec4 <USB_SetDevSpeed>
 8005bfa:	e008      	b.n	8005c0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f960 	bl	8005ec4 <USB_SetDevSpeed>
 8005c04:	e003      	b.n	8005c0e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c06:	2103      	movs	r1, #3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f95b 	bl	8005ec4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c0e:	2110      	movs	r1, #16
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f8f3 	bl	8005dfc <USB_FlushTxFifo>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f91f 	bl	8005e64 <USB_FlushRxFifo>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c36:	461a      	mov	r2, r3
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	e043      	b.n	8005ce2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c70:	d118      	bne.n	8005ca4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	461a      	mov	r2, r3
 8005c86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	e013      	b.n	8005cb6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e008      	b.n	8005cb6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d3b7      	bcc.n	8005c5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	e043      	b.n	8005d78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d06:	d118      	bne.n	8005d3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	e013      	b.n	8005d4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d30:	461a      	mov	r2, r3
 8005d32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e008      	b.n	8005d4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	461a      	mov	r2, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	3301      	adds	r3, #1
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d3b7      	bcc.n	8005cf0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005da0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f043 0210 	orr.w	r2, r3, #16
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699a      	ldr	r2, [r3, #24]
 8005db8:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <USB_DevInit+0x2b4>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	f043 0208 	orr.w	r2, r3, #8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d105      	bne.n	8005de4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <USB_DevInit+0x2b8>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005df0:	b004      	add	sp, #16
 8005df2:	4770      	bx	lr
 8005df4:	803c3800 	.word	0x803c3800
 8005df8:	40000004 	.word	0x40000004

08005dfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <USB_FlushTxFifo+0x64>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d901      	bls.n	8005e1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e01b      	b.n	8005e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	daf2      	bge.n	8005e0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	019b      	lsls	r3, r3, #6
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3301      	adds	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <USB_FlushTxFifo+0x64>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e006      	b.n	8005e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d0f0      	beq.n	8005e34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	00030d40 	.word	0x00030d40

08005e64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a11      	ldr	r2, [pc, #68]	; (8005ec0 <USB_FlushRxFifo+0x5c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e018      	b.n	8005eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	daf2      	bge.n	8005e70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2210      	movs	r2, #16
 8005e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3301      	adds	r3, #1
 8005e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <USB_FlushRxFifo+0x5c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e006      	b.n	8005eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b10      	cmp	r3, #16
 8005eb0:	d0f0      	beq.n	8005e94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	00030d40 	.word	0x00030d40

08005ec4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b085      	sub	sp, #20
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f10:	f023 0303 	bic.w	r3, r3, #3
 8005f14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f24:	f043 0302 	orr.w	r3, r3, #2
 8005f28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0301 	and.w	r3, r3, #1
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <USB_CoreReset+0x64>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e01b      	b.n	8005faa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	daf2      	bge.n	8005f60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f043 0201 	orr.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <USB_CoreReset+0x64>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e006      	b.n	8005faa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d0f0      	beq.n	8005f8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	00030d40 	.word	0x00030d40

08005fbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005fc0:	bf00      	nop
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
	...

08005fcc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fd2:	f3ef 8305 	mrs	r3, IPSR
 8005fd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fde:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe2:	607b      	str	r3, [r7, #4]
  return(result);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d105      	bne.n	8005ff6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fea:	f3ef 8311 	mrs	r3, BASEPRI
 8005fee:	603b      	str	r3, [r7, #0]
  return(result);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <osKernelInitialize+0x3a>
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <osKernelInitialize+0x64>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d103      	bne.n	8006006 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005ffe:	f06f 0305 	mvn.w	r3, #5
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e00c      	b.n	8006020 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <osKernelInitialize+0x64>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <osKernelInitialize+0x64>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e002      	b.n	8006020 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006020:	68fb      	ldr	r3, [r7, #12]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	20000c44 	.word	0x20000c44

08006034 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800603a:	f3ef 8305 	mrs	r3, IPSR
 800603e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006040:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006046:	f3ef 8310 	mrs	r3, PRIMASK
 800604a:	607b      	str	r3, [r7, #4]
  return(result);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006052:	f3ef 8311 	mrs	r3, BASEPRI
 8006056:	603b      	str	r3, [r7, #0]
  return(result);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <osKernelStart+0x3a>
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <osKernelStart+0x68>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b02      	cmp	r3, #2
 8006064:	d103      	bne.n	800606e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006066:	f06f 0305 	mvn.w	r3, #5
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e010      	b.n	8006090 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <osKernelStart+0x68>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d109      	bne.n	800608a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006076:	f7ff ffa1 	bl	8005fbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <osKernelStart+0x68>)
 800607c:	2202      	movs	r2, #2
 800607e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006080:	f001 f9f2 	bl	8007468 <vTaskStartScheduler>
      stat = osOK;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e002      	b.n	8006090 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800608a:	f04f 33ff 	mov.w	r3, #4294967295
 800608e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006090:	68fb      	ldr	r3, [r7, #12]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000c44 	.word	0x20000c44

080060a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b090      	sub	sp, #64	; 0x40
 80060a4:	af04      	add	r7, sp, #16
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b0:	f3ef 8305 	mrs	r3, IPSR
 80060b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80060b6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 808f 	bne.w	80061dc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060be:	f3ef 8310 	mrs	r3, PRIMASK
 80060c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d105      	bne.n	80060d6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060ca:	f3ef 8311 	mrs	r3, BASEPRI
 80060ce:	617b      	str	r3, [r7, #20]
  return(result);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <osThreadNew+0x3e>
 80060d6:	4b44      	ldr	r3, [pc, #272]	; (80061e8 <osThreadNew+0x148>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d07e      	beq.n	80061dc <osThreadNew+0x13c>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d07b      	beq.n	80061dc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80060e8:	2318      	movs	r3, #24
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80060f0:	f04f 33ff 	mov.w	r3, #4294967295
 80060f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d045      	beq.n	8006188 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <osThreadNew+0x6a>
        name = attr->name;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <osThreadNew+0x90>
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	2b38      	cmp	r3, #56	; 0x38
 8006122:	d805      	bhi.n	8006130 <osThreadNew+0x90>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <osThreadNew+0x94>
        return (NULL);
 8006130:	2300      	movs	r3, #0
 8006132:	e054      	b.n	80061de <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	089b      	lsrs	r3, r3, #2
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <osThreadNew+0xca>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2bbb      	cmp	r3, #187	; 0xbb
 8006152:	d90a      	bls.n	800616a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006158:	2b00      	cmp	r3, #0
 800615a:	d006      	beq.n	800616a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <osThreadNew+0xca>
        mem = 1;
 8006164:	2301      	movs	r3, #1
 8006166:	623b      	str	r3, [r7, #32]
 8006168:	e010      	b.n	800618c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10c      	bne.n	800618c <osThreadNew+0xec>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d108      	bne.n	800618c <osThreadNew+0xec>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <osThreadNew+0xec>
          mem = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	e001      	b.n	800618c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d110      	bne.n	80061b4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800619a:	9202      	str	r2, [sp, #8]
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 ff67 	bl	800707c <xTaskCreateStatic>
 80061ae:	4603      	mov	r3, r0
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	e013      	b.n	80061dc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d110      	bne.n	80061dc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f107 0310 	add.w	r3, r7, #16
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 ffb8 	bl	8007142 <xTaskCreate>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d001      	beq.n	80061dc <osThreadNew+0x13c>
          hTask = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061dc:	693b      	ldr	r3, [r7, #16]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3730      	adds	r7, #48	; 0x30
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000c44 	.word	0x20000c44

080061ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f4:	f3ef 8305 	mrs	r3, IPSR
 80061f8:	613b      	str	r3, [r7, #16]
  return(result);
 80061fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10f      	bne.n	8006220 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006200:	f3ef 8310 	mrs	r3, PRIMASK
 8006204:	60fb      	str	r3, [r7, #12]
  return(result);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d105      	bne.n	8006218 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800620c:	f3ef 8311 	mrs	r3, BASEPRI
 8006210:	60bb      	str	r3, [r7, #8]
  return(result);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <osDelay+0x3c>
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <osDelay+0x58>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d103      	bne.n	8006228 <osDelay+0x3c>
    stat = osErrorISR;
 8006220:	f06f 0305 	mvn.w	r3, #5
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e007      	b.n	8006238 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006228:	2300      	movs	r3, #0
 800622a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 f8e2 	bl	80073fc <vTaskDelay>
    }
  }

  return (stat);
 8006238:	697b      	ldr	r3, [r7, #20]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000c44 	.word	0x20000c44

08006248 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	; 0x28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006250:	2300      	movs	r3, #0
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006254:	f3ef 8305 	mrs	r3, IPSR
 8006258:	613b      	str	r3, [r7, #16]
  return(result);
 800625a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800625c:	2b00      	cmp	r3, #0
 800625e:	f040 8085 	bne.w	800636c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006262:	f3ef 8310 	mrs	r3, PRIMASK
 8006266:	60fb      	str	r3, [r7, #12]
  return(result);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d105      	bne.n	800627a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800626e:	f3ef 8311 	mrs	r3, BASEPRI
 8006272:	60bb      	str	r3, [r7, #8]
  return(result);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <osMutexNew+0x3a>
 800627a:	4b3f      	ldr	r3, [pc, #252]	; (8006378 <osMutexNew+0x130>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d074      	beq.n	800636c <osMutexNew+0x124>
    if (attr != NULL) {
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	e001      	b.n	8006294 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <osMutexNew+0x5c>
      rmtx = 1U;
 800629e:	2301      	movs	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]
 80062a2:	e001      	b.n	80062a8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d15c      	bne.n	800636c <osMutexNew+0x124>
      mem = -1;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d015      	beq.n	80062ea <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d006      	beq.n	80062d4 <osMutexNew+0x8c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b4f      	cmp	r3, #79	; 0x4f
 80062cc:	d902      	bls.n	80062d4 <osMutexNew+0x8c>
          mem = 1;
 80062ce:	2301      	movs	r3, #1
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	e00c      	b.n	80062ee <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d108      	bne.n	80062ee <osMutexNew+0xa6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <osMutexNew+0xa6>
            mem = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e001      	b.n	80062ee <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d112      	bne.n	800631a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	4619      	mov	r1, r3
 8006300:	2004      	movs	r0, #4
 8006302:	f000 faa6 	bl	8006852 <xQueueCreateMutexStatic>
 8006306:	6278      	str	r0, [r7, #36]	; 0x24
 8006308:	e016      	b.n	8006338 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	4619      	mov	r1, r3
 8006310:	2001      	movs	r0, #1
 8006312:	f000 fa9e 	bl	8006852 <xQueueCreateMutexStatic>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24
 8006318:	e00e      	b.n	8006338 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10b      	bne.n	8006338 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d004      	beq.n	8006330 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006326:	2004      	movs	r0, #4
 8006328:	f000 fa7b 	bl	8006822 <xQueueCreateMutex>
 800632c:	6278      	str	r0, [r7, #36]	; 0x24
 800632e:	e003      	b.n	8006338 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006330:	2001      	movs	r0, #1
 8006332:	f000 fa76 	bl	8006822 <xQueueCreateMutex>
 8006336:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00c      	beq.n	8006358 <osMutexNew+0x110>
        if (attr != NULL) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <osMutexNew+0x104>
          name = attr->name;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e001      	b.n	8006350 <osMutexNew+0x108>
        } else {
          name = NULL;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006350:	6979      	ldr	r1, [r7, #20]
 8006352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006354:	f000 fe34 	bl	8006fc0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <osMutexNew+0x124>
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800636e:	4618      	mov	r0, r3
 8006370:	3728      	adds	r7, #40	; 0x28
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000c44 	.word	0x20000c44

0800637c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4a07      	ldr	r2, [pc, #28]	; (80063a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800638c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4a06      	ldr	r2, [pc, #24]	; (80063ac <vApplicationGetIdleTaskMemory+0x30>)
 8006392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2280      	movs	r2, #128	; 0x80
 8006398:	601a      	str	r2, [r3, #0]
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000c48 	.word	0x20000c48
 80063ac:	20000d04 	.word	0x20000d04

080063b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4a07      	ldr	r2, [pc, #28]	; (80063dc <vApplicationGetTimerTaskMemory+0x2c>)
 80063c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	4a06      	ldr	r2, [pc, #24]	; (80063e0 <vApplicationGetTimerTaskMemory+0x30>)
 80063c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ce:	601a      	str	r2, [r3, #0]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	20000f04 	.word	0x20000f04
 80063e0:	20000fc0 	.word	0x20000fc0

080063e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f103 0208 	add.w	r2, r3, #8
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f04f 32ff 	mov.w	r2, #4294967295
 80063fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f103 0208 	add.w	r2, r3, #8
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f103 0208 	add.w	r2, r3, #8
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
}
 800647a:	bf00      	nop
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649c:	d103      	bne.n	80064a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e00c      	b.n	80064c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3308      	adds	r3, #8
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e002      	b.n	80064b4 <vListInsert+0x2e>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d2f6      	bcs.n	80064ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	601a      	str	r2, [r3, #0]
}
 80064ec:	bf00      	nop
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6892      	ldr	r2, [r2, #8]
 800650e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6852      	ldr	r2, [r2, #4]
 8006518:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	d103      	bne.n	800652c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	1e5a      	subs	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10c      	bne.n	800657a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	b672      	cpsid	i
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	b662      	cpsie	i
 8006574:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800657a:	f002 f937 	bl	80087ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	441a      	add	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065aa:	3b01      	subs	r3, #1
 80065ac:	68f9      	ldr	r1, [r7, #12]
 80065ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	441a      	add	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	22ff      	movs	r2, #255	; 0xff
 80065be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	22ff      	movs	r2, #255	; 0xff
 80065c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d114      	bne.n	80065fa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01a      	beq.n	800660e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3310      	adds	r3, #16
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 f9eb 	bl	80079b8 <xTaskRemoveFromEventList>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d012      	beq.n	800660e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <xQueueGenericReset+0xd0>)
 80065ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	e009      	b.n	800660e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3310      	adds	r3, #16
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff fef0 	bl	80063e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3324      	adds	r3, #36	; 0x24
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff feeb 	bl	80063e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800660e:	f002 f921 	bl	8008854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006612:	2301      	movs	r3, #1
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08e      	sub	sp, #56	; 0x38
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10c      	bne.n	800664e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	b672      	cpsid	i
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	b662      	cpsie	i
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800664a:	bf00      	nop
 800664c:	e7fe      	b.n	800664c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10c      	bne.n	800666e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	b672      	cpsid	i
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	b662      	cpsie	i
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <xQueueGenericCreateStatic+0x5a>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <xQueueGenericCreateStatic+0x5e>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <xQueueGenericCreateStatic+0x60>
 800667e:	2300      	movs	r3, #0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10c      	bne.n	800669e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	b672      	cpsid	i
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	b662      	cpsie	i
 8006698:	623b      	str	r3, [r7, #32]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d102      	bne.n	80066aa <xQueueGenericCreateStatic+0x8a>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <xQueueGenericCreateStatic+0x8e>
 80066aa:	2301      	movs	r3, #1
 80066ac:	e000      	b.n	80066b0 <xQueueGenericCreateStatic+0x90>
 80066ae:	2300      	movs	r3, #0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10c      	bne.n	80066ce <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	b672      	cpsid	i
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	b662      	cpsie	i
 80066c8:	61fb      	str	r3, [r7, #28]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066ce:	2350      	movs	r3, #80	; 0x50
 80066d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b50      	cmp	r3, #80	; 0x50
 80066d6:	d00c      	beq.n	80066f2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	b672      	cpsid	i
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	b662      	cpsie	i
 80066ec:	61bb      	str	r3, [r7, #24]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00d      	beq.n	800671a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4613      	mov	r3, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f847 	bl	80067a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800671c:	4618      	mov	r0, r3
 800671e:	3730      	adds	r7, #48	; 0x30
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	; 0x28
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10c      	bne.n	8006752 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	b672      	cpsid	i
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	b662      	cpsie	i
 800674c:	613b      	str	r3, [r7, #16]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006758:	2300      	movs	r3, #0
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	e004      	b.n	8006768 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	3350      	adds	r3, #80	; 0x50
 800676c:	4618      	mov	r0, r3
 800676e:	f002 f969 	bl	8008a44 <pvPortMalloc>
 8006772:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d011      	beq.n	800679e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	3350      	adds	r3, #80	; 0x50
 8006782:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800678c:	79fa      	ldrb	r2, [r7, #7]
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	4613      	mov	r3, r2
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f805 	bl	80067a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800679e:	69bb      	ldr	r3, [r7, #24]
	}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	e002      	b.n	80067ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067d6:	2101      	movs	r1, #1
 80067d8:	69b8      	ldr	r0, [r7, #24]
 80067da:	f7ff feb7 	bl	800654c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	78fa      	ldrb	r2, [r7, #3]
 80067e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067e6:	bf00      	nop
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00e      	beq.n	800681a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800680e:	2300      	movs	r3, #0
 8006810:	2200      	movs	r2, #0
 8006812:	2100      	movs	r1, #0
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f837 	bl	8006888 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	4603      	mov	r3, r0
 800682a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800682c:	2301      	movs	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	461a      	mov	r2, r3
 8006838:	6939      	ldr	r1, [r7, #16]
 800683a:	6978      	ldr	r0, [r7, #20]
 800683c:	f7ff ff72 	bl	8006724 <xQueueGenericCreate>
 8006840:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7ff ffd3 	bl	80067ee <prvInitialiseMutex>

		return xNewQueue;
 8006848:	68fb      	ldr	r3, [r7, #12]
	}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006852:	b580      	push	{r7, lr}
 8006854:	b088      	sub	sp, #32
 8006856:	af02      	add	r7, sp, #8
 8006858:	4603      	mov	r3, r0
 800685a:	6039      	str	r1, [r7, #0]
 800685c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800685e:	2301      	movs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	2300      	movs	r3, #0
 8006864:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2200      	movs	r2, #0
 800686e:	6939      	ldr	r1, [r7, #16]
 8006870:	6978      	ldr	r0, [r7, #20]
 8006872:	f7ff fed5 	bl	8006620 <xQueueGenericCreateStatic>
 8006876:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f7ff ffb8 	bl	80067ee <prvInitialiseMutex>

		return xNewQueue;
 800687e:	68fb      	ldr	r3, [r7, #12]
	}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08e      	sub	sp, #56	; 0x38
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006896:	2300      	movs	r3, #0
 8006898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10c      	bne.n	80068be <xQueueGenericSend+0x36>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	b672      	cpsid	i
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	b662      	cpsie	i
 80068b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <xQueueGenericSend+0x44>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <xQueueGenericSend+0x48>
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <xQueueGenericSend+0x4a>
 80068d0:	2300      	movs	r3, #0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10c      	bne.n	80068f0 <xQueueGenericSend+0x68>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	b672      	cpsid	i
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	b662      	cpsie	i
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d103      	bne.n	80068fe <xQueueGenericSend+0x76>
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <xQueueGenericSend+0x7a>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <xQueueGenericSend+0x7c>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10c      	bne.n	8006922 <xQueueGenericSend+0x9a>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	b672      	cpsid	i
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	b662      	cpsie	i
 800691c:	623b      	str	r3, [r7, #32]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006922:	f001 fa13 	bl	8007d4c <xTaskGetSchedulerState>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <xQueueGenericSend+0xaa>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <xQueueGenericSend+0xae>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <xQueueGenericSend+0xb0>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10c      	bne.n	8006956 <xQueueGenericSend+0xce>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	b672      	cpsid	i
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	b662      	cpsie	i
 8006950:	61fb      	str	r3, [r7, #28]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006956:	f001 ff49 	bl	80087ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <xQueueGenericSend+0xe4>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d129      	bne.n	80069c0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006972:	f000 fa15 	bl	8006da0 <prvCopyDataToQueue>
 8006976:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d010      	beq.n	80069a2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f817 	bl	80079b8 <xTaskRemoveFromEventList>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d013      	beq.n	80069b8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006990:	4b3f      	ldr	r3, [pc, #252]	; (8006a90 <xQueueGenericSend+0x208>)
 8006992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	e00a      	b.n	80069b8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069a8:	4b39      	ldr	r3, [pc, #228]	; (8006a90 <xQueueGenericSend+0x208>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069b8:	f001 ff4c 	bl	8008854 <vPortExitCritical>
				return pdPASS;
 80069bc:	2301      	movs	r3, #1
 80069be:	e063      	b.n	8006a88 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069c6:	f001 ff45 	bl	8008854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e05c      	b.n	8006a88 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069d4:	f107 0314 	add.w	r3, r7, #20
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 f853 	bl	8007a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069e2:	f001 ff37 	bl	8008854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069e6:	f000 fdb3 	bl	8007550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069ea:	f001 feff 	bl	80087ec <vPortEnterCritical>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d103      	bne.n	8006a04 <xQueueGenericSend+0x17c>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a0a:	b25b      	sxtb	r3, r3
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d103      	bne.n	8006a1a <xQueueGenericSend+0x192>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a1a:	f001 ff1b 	bl	8008854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a1e:	1d3a      	adds	r2, r7, #4
 8006a20:	f107 0314 	add.w	r3, r7, #20
 8006a24:	4611      	mov	r1, r2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 f842 	bl	8007ab0 <xTaskCheckForTimeOut>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d124      	bne.n	8006a7c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a34:	f000 faac 	bl	8006f90 <prvIsQueueFull>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	3310      	adds	r3, #16
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 ff62 	bl	8007910 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a4e:	f000 fa37 	bl	8006ec0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a52:	f000 fd8b 	bl	800756c <xTaskResumeAll>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f47f af7c 	bne.w	8006956 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <xQueueGenericSend+0x208>)
 8006a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	e772      	b.n	8006956 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a72:	f000 fa25 	bl	8006ec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a76:	f000 fd79 	bl	800756c <xTaskResumeAll>
 8006a7a:	e76c      	b.n	8006956 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a7e:	f000 fa1f 	bl	8006ec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a82:	f000 fd73 	bl	800756c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3738      	adds	r7, #56	; 0x38
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08e      	sub	sp, #56	; 0x38
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10c      	bne.n	8006ac6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	b672      	cpsid	i
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	b662      	cpsie	i
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <xQueueGenericSendFromISR+0x40>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <xQueueGenericSendFromISR+0x44>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <xQueueGenericSendFromISR+0x46>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10c      	bne.n	8006af8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	b672      	cpsid	i
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	b662      	cpsie	i
 8006af2:	623b      	str	r3, [r7, #32]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d103      	bne.n	8006b06 <xQueueGenericSendFromISR+0x72>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <xQueueGenericSendFromISR+0x76>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <xQueueGenericSendFromISR+0x78>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10c      	bne.n	8006b2a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	b672      	cpsid	i
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	b662      	cpsie	i
 8006b24:	61fb      	str	r3, [r7, #28]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b2a:	f001 ff47 	bl	80089bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b2e:	f3ef 8211 	mrs	r2, BASEPRI
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	b672      	cpsid	i
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	b662      	cpsie	i
 8006b46:	61ba      	str	r2, [r7, #24]
 8006b48:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <xQueueGenericSendFromISR+0xcc>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d12c      	bne.n	8006bba <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b70:	f000 f916 	bl	8006da0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b74:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d112      	bne.n	8006ba4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d016      	beq.n	8006bb4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	3324      	adds	r3, #36	; 0x24
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 ff14 	bl	80079b8 <xTaskRemoveFromEventList>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00e      	beq.n	8006bb4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e007      	b.n	8006bb4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ba4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ba8:	3301      	adds	r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	b25a      	sxtb	r2, r3
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006bb8:	e001      	b.n	8006bbe <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3738      	adds	r7, #56	; 0x38
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08c      	sub	sp, #48	; 0x30
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10c      	bne.n	8006c08 <xQueueReceive+0x34>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	b672      	cpsid	i
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	b662      	cpsie	i
 8006c02:	623b      	str	r3, [r7, #32]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d103      	bne.n	8006c16 <xQueueReceive+0x42>
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <xQueueReceive+0x46>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <xQueueReceive+0x48>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10c      	bne.n	8006c3a <xQueueReceive+0x66>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	b672      	cpsid	i
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	b662      	cpsie	i
 8006c34:	61fb      	str	r3, [r7, #28]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c3a:	f001 f887 	bl	8007d4c <xTaskGetSchedulerState>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <xQueueReceive+0x76>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <xQueueReceive+0x7a>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueReceive+0x7c>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10c      	bne.n	8006c6e <xQueueReceive+0x9a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	b672      	cpsid	i
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	b662      	cpsie	i
 8006c68:	61bb      	str	r3, [r7, #24]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c6e:	f001 fdbd 	bl	80087ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01f      	beq.n	8006cbe <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c82:	f000 f8f7 	bl	8006e74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	1e5a      	subs	r2, r3, #1
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00f      	beq.n	8006cb6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	3310      	adds	r3, #16
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fe8c 	bl	80079b8 <xTaskRemoveFromEventList>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ca6:	4b3d      	ldr	r3, [pc, #244]	; (8006d9c <xQueueReceive+0x1c8>)
 8006ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cb6:	f001 fdcd 	bl	8008854 <vPortExitCritical>
				return pdPASS;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e069      	b.n	8006d92 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d103      	bne.n	8006ccc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cc4:	f001 fdc6 	bl	8008854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e062      	b.n	8006d92 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cd2:	f107 0310 	add.w	r3, r7, #16
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fed4 	bl	8007a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ce0:	f001 fdb8 	bl	8008854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ce4:	f000 fc34 	bl	8007550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ce8:	f001 fd80 	bl	80087ec <vPortEnterCritical>
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf8:	d103      	bne.n	8006d02 <xQueueReceive+0x12e>
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d103      	bne.n	8006d18 <xQueueReceive+0x144>
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d18:	f001 fd9c 	bl	8008854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d1c:	1d3a      	adds	r2, r7, #4
 8006d1e:	f107 0310 	add.w	r3, r7, #16
 8006d22:	4611      	mov	r1, r2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fec3 	bl	8007ab0 <xTaskCheckForTimeOut>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d123      	bne.n	8006d78 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d32:	f000 f917 	bl	8006f64 <prvIsQueueEmpty>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d017      	beq.n	8006d6c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	3324      	adds	r3, #36	; 0x24
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fde3 	bl	8007910 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d4c:	f000 f8b8 	bl	8006ec0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d50:	f000 fc0c 	bl	800756c <xTaskResumeAll>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d189      	bne.n	8006c6e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006d5a:	4b10      	ldr	r3, [pc, #64]	; (8006d9c <xQueueReceive+0x1c8>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	e780      	b.n	8006c6e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6e:	f000 f8a7 	bl	8006ec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d72:	f000 fbfb 	bl	800756c <xTaskResumeAll>
 8006d76:	e77a      	b.n	8006c6e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d7a:	f000 f8a1 	bl	8006ec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d7e:	f000 fbf5 	bl	800756c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d84:	f000 f8ee 	bl	8006f64 <prvIsQueueEmpty>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f43f af6f 	beq.w	8006c6e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3730      	adds	r7, #48	; 0x30
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	e000ed04 	.word	0xe000ed04

08006da0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10d      	bne.n	8006dda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d14d      	bne.n	8006e62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 ffdc 	bl	8007d88 <xTaskPriorityDisinherit>
 8006dd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	609a      	str	r2, [r3, #8]
 8006dd8:	e043      	b.n	8006e62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d119      	bne.n	8006e14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6858      	ldr	r0, [r3, #4]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	461a      	mov	r2, r3
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	f002 f931 	bl	8009052 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	441a      	add	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d32b      	bcc.n	8006e62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	605a      	str	r2, [r3, #4]
 8006e12:	e026      	b.n	8006e62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68d8      	ldr	r0, [r3, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	f002 f917 	bl	8009052 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	425b      	negs	r3, r3
 8006e2e:	441a      	add	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d207      	bcs.n	8006e50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	425b      	negs	r3, r3
 8006e4a:	441a      	add	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d105      	bne.n	8006e62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e6a:	697b      	ldr	r3, [r7, #20]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d018      	beq.n	8006eb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	441a      	add	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d303      	bcc.n	8006ea8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68d9      	ldr	r1, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6838      	ldr	r0, [r7, #0]
 8006eb4:	f002 f8cd 	bl	8009052 <memcpy>
	}
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ec8:	f001 fc90 	bl	80087ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ed4:	e011      	b.n	8006efa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d012      	beq.n	8006f04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3324      	adds	r3, #36	; 0x24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 fd68 	bl	80079b8 <xTaskRemoveFromEventList>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006eee:	f000 fe45 	bl	8007b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	dce9      	bgt.n	8006ed6 <prvUnlockQueue+0x16>
 8006f02:	e000      	b.n	8006f06 <prvUnlockQueue+0x46>
					break;
 8006f04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	22ff      	movs	r2, #255	; 0xff
 8006f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f0e:	f001 fca1 	bl	8008854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f12:	f001 fc6b 	bl	80087ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f1e:	e011      	b.n	8006f44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d012      	beq.n	8006f4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3310      	adds	r3, #16
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fd43 	bl	80079b8 <xTaskRemoveFromEventList>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f38:	f000 fe20 	bl	8007b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dce9      	bgt.n	8006f20 <prvUnlockQueue+0x60>
 8006f4c:	e000      	b.n	8006f50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	22ff      	movs	r2, #255	; 0xff
 8006f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f58:	f001 fc7c 	bl	8008854 <vPortExitCritical>
}
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f6c:	f001 fc3e 	bl	80087ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	e001      	b.n	8006f82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f82:	f001 fc67 	bl	8008854 <vPortExitCritical>

	return xReturn;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f98:	f001 fc28 	bl	80087ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d102      	bne.n	8006fae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	e001      	b.n	8006fb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fb2:	f001 fc4f 	bl	8008854 <vPortExitCritical>

	return xReturn;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	e014      	b.n	8006ffa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fd0:	4a0f      	ldr	r2, [pc, #60]	; (8007010 <vQueueAddToRegistry+0x50>)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fdc:	490c      	ldr	r1, [pc, #48]	; (8007010 <vQueueAddToRegistry+0x50>)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fe6:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <vQueueAddToRegistry+0x50>)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	4413      	add	r3, r2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ff2:	e006      	b.n	8007002 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b07      	cmp	r3, #7
 8006ffe:	d9e7      	bls.n	8006fd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	200013c0 	.word	0x200013c0

08007014 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007024:	f001 fbe2 	bl	80087ec <vPortEnterCritical>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800702e:	b25b      	sxtb	r3, r3
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d103      	bne.n	800703e <vQueueWaitForMessageRestricted+0x2a>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007044:	b25b      	sxtb	r3, r3
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d103      	bne.n	8007054 <vQueueWaitForMessageRestricted+0x40>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007054:	f001 fbfe 	bl	8008854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d106      	bne.n	800706e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	3324      	adds	r3, #36	; 0x24
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fc77 	bl	800795c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800706e:	6978      	ldr	r0, [r7, #20]
 8007070:	f7ff ff26 	bl	8006ec0 <prvUnlockQueue>
	}
 8007074:	bf00      	nop
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08e      	sub	sp, #56	; 0x38
 8007080:	af04      	add	r7, sp, #16
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800708a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10c      	bne.n	80070aa <xTaskCreateStatic+0x2e>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	b672      	cpsid	i
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	b662      	cpsie	i
 80070a4:	623b      	str	r3, [r7, #32]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10c      	bne.n	80070ca <xTaskCreateStatic+0x4e>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	b672      	cpsid	i
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	b662      	cpsie	i
 80070c4:	61fb      	str	r3, [r7, #28]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070ca:	23bc      	movs	r3, #188	; 0xbc
 80070cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2bbc      	cmp	r3, #188	; 0xbc
 80070d2:	d00c      	beq.n	80070ee <xTaskCreateStatic+0x72>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	b672      	cpsid	i
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	b662      	cpsie	i
 80070e8:	61bb      	str	r3, [r7, #24]
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01e      	beq.n	8007134 <xTaskCreateStatic+0xb8>
 80070f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01b      	beq.n	8007134 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007104:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	2202      	movs	r2, #2
 800710a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800710e:	2300      	movs	r3, #0
 8007110:	9303      	str	r3, [sp, #12]
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	9302      	str	r3, [sp, #8]
 8007116:	f107 0314 	add.w	r3, r7, #20
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 f850 	bl	80071cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800712c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800712e:	f000 f8f5 	bl	800731c <prvAddNewTaskToReadyList>
 8007132:	e001      	b.n	8007138 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007138:	697b      	ldr	r3, [r7, #20]
	}
 800713a:	4618      	mov	r0, r3
 800713c:	3728      	adds	r7, #40	; 0x28
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007142:	b580      	push	{r7, lr}
 8007144:	b08c      	sub	sp, #48	; 0x30
 8007146:	af04      	add	r7, sp, #16
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	603b      	str	r3, [r7, #0]
 800714e:	4613      	mov	r3, r2
 8007150:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4618      	mov	r0, r3
 8007158:	f001 fc74 	bl	8008a44 <pvPortMalloc>
 800715c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00e      	beq.n	8007182 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007164:	20bc      	movs	r0, #188	; 0xbc
 8007166:	f001 fc6d 	bl	8008a44 <pvPortMalloc>
 800716a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
 8007178:	e005      	b.n	8007186 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800717a:	6978      	ldr	r0, [r7, #20]
 800717c:	f001 fd2c 	bl	8008bd8 <vPortFree>
 8007180:	e001      	b.n	8007186 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d017      	beq.n	80071bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007194:	88fa      	ldrh	r2, [r7, #6]
 8007196:	2300      	movs	r3, #0
 8007198:	9303      	str	r3, [sp, #12]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	9302      	str	r3, [sp, #8]
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f80e 	bl	80071cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071b0:	69f8      	ldr	r0, [r7, #28]
 80071b2:	f000 f8b3 	bl	800731c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071b6:	2301      	movs	r3, #1
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	e002      	b.n	80071c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071bc:	f04f 33ff 	mov.w	r3, #4294967295
 80071c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071c2:	69bb      	ldr	r3, [r7, #24]
	}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	461a      	mov	r2, r3
 80071e4:	21a5      	movs	r1, #165	; 0xa5
 80071e6:	f001 ff42 	bl	800906e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80071f4:	440b      	add	r3, r1
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	f023 0307 	bic.w	r3, r3, #7
 8007202:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00c      	beq.n	8007228 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	b672      	cpsid	i
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	b662      	cpsie	i
 8007222:	617b      	str	r3, [r7, #20]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01f      	beq.n	800726e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
 8007232:	e012      	b.n	800725a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	7819      	ldrb	r1, [r3, #0]
 800723c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	4413      	add	r3, r2
 8007242:	3334      	adds	r3, #52	; 0x34
 8007244:	460a      	mov	r2, r1
 8007246:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d006      	beq.n	8007262 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	3301      	adds	r3, #1
 8007258:	61fb      	str	r3, [r7, #28]
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	2b0f      	cmp	r3, #15
 800725e:	d9e9      	bls.n	8007234 <prvInitialiseNewTask+0x68>
 8007260:	e000      	b.n	8007264 <prvInitialiseNewTask+0x98>
			{
				break;
 8007262:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800726c:	e003      	b.n	8007276 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	2b37      	cmp	r3, #55	; 0x37
 800727a:	d901      	bls.n	8007280 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800727c:	2337      	movs	r3, #55	; 0x37
 800727e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007284:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800728a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728e:	2200      	movs	r2, #0
 8007290:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	3304      	adds	r3, #4
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff f8c4 	bl	8006424 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	3318      	adds	r3, #24
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff f8bf 	bl	8006424 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	3354      	adds	r3, #84	; 0x54
 80072d0:	2260      	movs	r2, #96	; 0x60
 80072d2:	2100      	movs	r1, #0
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 feca 	bl	800906e <memset>
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	4a0c      	ldr	r2, [pc, #48]	; (8007310 <prvInitialiseNewTask+0x144>)
 80072de:	659a      	str	r2, [r3, #88]	; 0x58
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <prvInitialiseNewTask+0x148>)
 80072e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	4a0b      	ldr	r2, [pc, #44]	; (8007318 <prvInitialiseNewTask+0x14c>)
 80072ea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	69b8      	ldr	r0, [r7, #24]
 80072f2:	f001 f96b 	bl	80085cc <pxPortInitialiseStack>
 80072f6:	4602      	mov	r2, r0
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007306:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007308:	bf00      	nop
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	0800bdac 	.word	0x0800bdac
 8007314:	0800bdcc 	.word	0x0800bdcc
 8007318:	0800bd8c 	.word	0x0800bd8c

0800731c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007324:	f001 fa62 	bl	80087ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007328:	4b2d      	ldr	r3, [pc, #180]	; (80073e0 <prvAddNewTaskToReadyList+0xc4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	4a2c      	ldr	r2, [pc, #176]	; (80073e0 <prvAddNewTaskToReadyList+0xc4>)
 8007330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007332:	4b2c      	ldr	r3, [pc, #176]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800733a:	4a2a      	ldr	r2, [pc, #168]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007340:	4b27      	ldr	r3, [pc, #156]	; (80073e0 <prvAddNewTaskToReadyList+0xc4>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d110      	bne.n	800736a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007348:	f000 fc3c 	bl	8007bc4 <prvInitialiseTaskLists>
 800734c:	e00d      	b.n	800736a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800734e:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <prvAddNewTaskToReadyList+0xcc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007356:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	429a      	cmp	r2, r3
 8007362:	d802      	bhi.n	800736a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007364:	4a1f      	ldr	r2, [pc, #124]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800736a:	4b20      	ldr	r3, [pc, #128]	; (80073ec <prvAddNewTaskToReadyList+0xd0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3301      	adds	r3, #1
 8007370:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <prvAddNewTaskToReadyList+0xd0>)
 8007372:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <prvAddNewTaskToReadyList+0xd0>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007380:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <prvAddNewTaskToReadyList+0xd4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d903      	bls.n	8007390 <prvAddNewTaskToReadyList+0x74>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	4a18      	ldr	r2, [pc, #96]	; (80073f0 <prvAddNewTaskToReadyList+0xd4>)
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4a15      	ldr	r2, [pc, #84]	; (80073f4 <prvAddNewTaskToReadyList+0xd8>)
 800739e:	441a      	add	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3304      	adds	r3, #4
 80073a4:	4619      	mov	r1, r3
 80073a6:	4610      	mov	r0, r2
 80073a8:	f7ff f849 	bl	800643e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073ac:	f001 fa52 	bl	8008854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073b0:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <prvAddNewTaskToReadyList+0xcc>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00e      	beq.n	80073d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <prvAddNewTaskToReadyList+0xc8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d207      	bcs.n	80073d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <prvAddNewTaskToReadyList+0xdc>)
 80073c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	200018d4 	.word	0x200018d4
 80073e4:	20001400 	.word	0x20001400
 80073e8:	200018e0 	.word	0x200018e0
 80073ec:	200018f0 	.word	0x200018f0
 80073f0:	200018dc 	.word	0x200018dc
 80073f4:	20001404 	.word	0x20001404
 80073f8:	e000ed04 	.word	0xe000ed04

080073fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d019      	beq.n	8007442 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800740e:	4b14      	ldr	r3, [pc, #80]	; (8007460 <vTaskDelay+0x64>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <vTaskDelay+0x34>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	b672      	cpsid	i
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	b662      	cpsie	i
 800742a:	60bb      	str	r3, [r7, #8]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007430:	f000 f88e 	bl	8007550 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007434:	2100      	movs	r1, #0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fd18 	bl	8007e6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800743c:	f000 f896 	bl	800756c <xTaskResumeAll>
 8007440:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d107      	bne.n	8007458 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007448:	4b06      	ldr	r3, [pc, #24]	; (8007464 <vTaskDelay+0x68>)
 800744a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007458:	bf00      	nop
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	200018fc 	.word	0x200018fc
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	; 0x28
 800746c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007476:	463a      	mov	r2, r7
 8007478:	1d39      	adds	r1, r7, #4
 800747a:	f107 0308 	add.w	r3, r7, #8
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe ff7c 	bl	800637c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	9202      	str	r2, [sp, #8]
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	2300      	movs	r3, #0
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	2300      	movs	r3, #0
 8007494:	460a      	mov	r2, r1
 8007496:	4926      	ldr	r1, [pc, #152]	; (8007530 <vTaskStartScheduler+0xc8>)
 8007498:	4826      	ldr	r0, [pc, #152]	; (8007534 <vTaskStartScheduler+0xcc>)
 800749a:	f7ff fdef 	bl	800707c <xTaskCreateStatic>
 800749e:	4603      	mov	r3, r0
 80074a0:	4a25      	ldr	r2, [pc, #148]	; (8007538 <vTaskStartScheduler+0xd0>)
 80074a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074a4:	4b24      	ldr	r3, [pc, #144]	; (8007538 <vTaskStartScheduler+0xd0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074ac:	2301      	movs	r3, #1
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	e001      	b.n	80074b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d102      	bne.n	80074c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074bc:	f000 fd2a 	bl	8007f14 <xTimerCreateTimerTask>
 80074c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d11d      	bne.n	8007504 <vTaskStartScheduler+0x9c>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	b672      	cpsid	i
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	b662      	cpsie	i
 80074dc:	613b      	str	r3, [r7, #16]
}
 80074de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074e0:	4b16      	ldr	r3, [pc, #88]	; (800753c <vTaskStartScheduler+0xd4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3354      	adds	r3, #84	; 0x54
 80074e6:	4a16      	ldr	r2, [pc, #88]	; (8007540 <vTaskStartScheduler+0xd8>)
 80074e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074ea:	4b16      	ldr	r3, [pc, #88]	; (8007544 <vTaskStartScheduler+0xdc>)
 80074ec:	f04f 32ff 	mov.w	r2, #4294967295
 80074f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <vTaskStartScheduler+0xe0>)
 80074f4:	2201      	movs	r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074f8:	4b14      	ldr	r3, [pc, #80]	; (800754c <vTaskStartScheduler+0xe4>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074fe:	f001 f8f7 	bl	80086f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007502:	e010      	b.n	8007526 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750a:	d10c      	bne.n	8007526 <vTaskStartScheduler+0xbe>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	b672      	cpsid	i
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	b662      	cpsie	i
 8007520:	60fb      	str	r3, [r7, #12]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <vTaskStartScheduler+0xbc>
}
 8007526:	bf00      	nop
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	0800bc98 	.word	0x0800bc98
 8007534:	08007b95 	.word	0x08007b95
 8007538:	200018f8 	.word	0x200018f8
 800753c:	20001400 	.word	0x20001400
 8007540:	20000010 	.word	0x20000010
 8007544:	200018f4 	.word	0x200018f4
 8007548:	200018e0 	.word	0x200018e0
 800754c:	200018d8 	.word	0x200018d8

08007550 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007554:	4b04      	ldr	r3, [pc, #16]	; (8007568 <vTaskSuspendAll+0x18>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	4a03      	ldr	r2, [pc, #12]	; (8007568 <vTaskSuspendAll+0x18>)
 800755c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800755e:	bf00      	nop
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	200018fc 	.word	0x200018fc

0800756c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007576:	2300      	movs	r3, #0
 8007578:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800757a:	4b43      	ldr	r3, [pc, #268]	; (8007688 <xTaskResumeAll+0x11c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10c      	bne.n	800759c <xTaskResumeAll+0x30>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	b672      	cpsid	i
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	b662      	cpsie	i
 8007596:	603b      	str	r3, [r7, #0]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800759c:	f001 f926 	bl	80087ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075a0:	4b39      	ldr	r3, [pc, #228]	; (8007688 <xTaskResumeAll+0x11c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	4a38      	ldr	r2, [pc, #224]	; (8007688 <xTaskResumeAll+0x11c>)
 80075a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075aa:	4b37      	ldr	r3, [pc, #220]	; (8007688 <xTaskResumeAll+0x11c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d162      	bne.n	8007678 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075b2:	4b36      	ldr	r3, [pc, #216]	; (800768c <xTaskResumeAll+0x120>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d05e      	beq.n	8007678 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075ba:	e02f      	b.n	800761c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075bc:	4b34      	ldr	r3, [pc, #208]	; (8007690 <xTaskResumeAll+0x124>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3318      	adds	r3, #24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe ff95 	bl	80064f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe ff90 	bl	80064f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075dc:	4b2d      	ldr	r3, [pc, #180]	; (8007694 <xTaskResumeAll+0x128>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d903      	bls.n	80075ec <xTaskResumeAll+0x80>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <xTaskResumeAll+0x128>)
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4a27      	ldr	r2, [pc, #156]	; (8007698 <xTaskResumeAll+0x12c>)
 80075fa:	441a      	add	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f7fe ff1b 	bl	800643e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	4b23      	ldr	r3, [pc, #140]	; (800769c <xTaskResumeAll+0x130>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	429a      	cmp	r2, r3
 8007614:	d302      	bcc.n	800761c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007616:	4b22      	ldr	r3, [pc, #136]	; (80076a0 <xTaskResumeAll+0x134>)
 8007618:	2201      	movs	r2, #1
 800761a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800761c:	4b1c      	ldr	r3, [pc, #112]	; (8007690 <xTaskResumeAll+0x124>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1cb      	bne.n	80075bc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800762a:	f000 fb6f 	bl	8007d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800762e:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <xTaskResumeAll+0x138>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800763a:	f000 f847 	bl	80076cc <xTaskIncrementTick>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007644:	4b16      	ldr	r3, [pc, #88]	; (80076a0 <xTaskResumeAll+0x134>)
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3b01      	subs	r3, #1
 800764e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f1      	bne.n	800763a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007656:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <xTaskResumeAll+0x138>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800765c:	4b10      	ldr	r3, [pc, #64]	; (80076a0 <xTaskResumeAll+0x134>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007668:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <xTaskResumeAll+0x13c>)
 800766a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007678:	f001 f8ec 	bl	8008854 <vPortExitCritical>

	return xAlreadyYielded;
 800767c:	68bb      	ldr	r3, [r7, #8]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	200018fc 	.word	0x200018fc
 800768c:	200018d4 	.word	0x200018d4
 8007690:	20001894 	.word	0x20001894
 8007694:	200018dc 	.word	0x200018dc
 8007698:	20001404 	.word	0x20001404
 800769c:	20001400 	.word	0x20001400
 80076a0:	200018e8 	.word	0x200018e8
 80076a4:	200018e4 	.word	0x200018e4
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <xTaskGetTickCount+0x1c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076b8:	687b      	ldr	r3, [r7, #4]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	200018d8 	.word	0x200018d8

080076cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076d6:	4b50      	ldr	r3, [pc, #320]	; (8007818 <xTaskIncrementTick+0x14c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f040 808b 	bne.w	80077f6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076e0:	4b4e      	ldr	r3, [pc, #312]	; (800781c <xTaskIncrementTick+0x150>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3301      	adds	r3, #1
 80076e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076e8:	4a4c      	ldr	r2, [pc, #304]	; (800781c <xTaskIncrementTick+0x150>)
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d122      	bne.n	800773a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80076f4:	4b4a      	ldr	r3, [pc, #296]	; (8007820 <xTaskIncrementTick+0x154>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00c      	beq.n	8007718 <xTaskIncrementTick+0x4c>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	b672      	cpsid	i
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	b662      	cpsie	i
 8007712:	603b      	str	r3, [r7, #0]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <xTaskIncrementTick+0x4a>
 8007718:	4b41      	ldr	r3, [pc, #260]	; (8007820 <xTaskIncrementTick+0x154>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	4b41      	ldr	r3, [pc, #260]	; (8007824 <xTaskIncrementTick+0x158>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a3f      	ldr	r2, [pc, #252]	; (8007820 <xTaskIncrementTick+0x154>)
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4a3f      	ldr	r2, [pc, #252]	; (8007824 <xTaskIncrementTick+0x158>)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	4b3e      	ldr	r3, [pc, #248]	; (8007828 <xTaskIncrementTick+0x15c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	4a3d      	ldr	r2, [pc, #244]	; (8007828 <xTaskIncrementTick+0x15c>)
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	f000 fae9 	bl	8007d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800773a:	4b3c      	ldr	r3, [pc, #240]	; (800782c <xTaskIncrementTick+0x160>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d349      	bcc.n	80077d8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007744:	4b36      	ldr	r3, [pc, #216]	; (8007820 <xTaskIncrementTick+0x154>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774e:	4b37      	ldr	r3, [pc, #220]	; (800782c <xTaskIncrementTick+0x160>)
 8007750:	f04f 32ff 	mov.w	r2, #4294967295
 8007754:	601a      	str	r2, [r3, #0]
					break;
 8007756:	e03f      	b.n	80077d8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007758:	4b31      	ldr	r3, [pc, #196]	; (8007820 <xTaskIncrementTick+0x154>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d203      	bcs.n	8007778 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007770:	4a2e      	ldr	r2, [pc, #184]	; (800782c <xTaskIncrementTick+0x160>)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007776:	e02f      	b.n	80077d8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3304      	adds	r3, #4
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe febb 	bl	80064f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d004      	beq.n	8007794 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3318      	adds	r3, #24
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe feb2 	bl	80064f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	4b25      	ldr	r3, [pc, #148]	; (8007830 <xTaskIncrementTick+0x164>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d903      	bls.n	80077a8 <xTaskIncrementTick+0xdc>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	4a22      	ldr	r2, [pc, #136]	; (8007830 <xTaskIncrementTick+0x164>)
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4a1f      	ldr	r2, [pc, #124]	; (8007834 <xTaskIncrementTick+0x168>)
 80077b6:	441a      	add	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f7fe fe3d 	bl	800643e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c8:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <xTaskIncrementTick+0x16c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3b8      	bcc.n	8007744 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d6:	e7b5      	b.n	8007744 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077d8:	4b17      	ldr	r3, [pc, #92]	; (8007838 <xTaskIncrementTick+0x16c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077de:	4915      	ldr	r1, [pc, #84]	; (8007834 <xTaskIncrementTick+0x168>)
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d907      	bls.n	8007800 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	e004      	b.n	8007800 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80077f6:	4b11      	ldr	r3, [pc, #68]	; (800783c <xTaskIncrementTick+0x170>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3301      	adds	r3, #1
 80077fc:	4a0f      	ldr	r2, [pc, #60]	; (800783c <xTaskIncrementTick+0x170>)
 80077fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007800:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <xTaskIncrementTick+0x174>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007808:	2301      	movs	r3, #1
 800780a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800780c:	697b      	ldr	r3, [r7, #20]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200018fc 	.word	0x200018fc
 800781c:	200018d8 	.word	0x200018d8
 8007820:	2000188c 	.word	0x2000188c
 8007824:	20001890 	.word	0x20001890
 8007828:	200018ec 	.word	0x200018ec
 800782c:	200018f4 	.word	0x200018f4
 8007830:	200018dc 	.word	0x200018dc
 8007834:	20001404 	.word	0x20001404
 8007838:	20001400 	.word	0x20001400
 800783c:	200018e4 	.word	0x200018e4
 8007840:	200018e8 	.word	0x200018e8

08007844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800784a:	4b2b      	ldr	r3, [pc, #172]	; (80078f8 <vTaskSwitchContext+0xb4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007852:	4b2a      	ldr	r3, [pc, #168]	; (80078fc <vTaskSwitchContext+0xb8>)
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007858:	e048      	b.n	80078ec <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800785a:	4b28      	ldr	r3, [pc, #160]	; (80078fc <vTaskSwitchContext+0xb8>)
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007860:	4b27      	ldr	r3, [pc, #156]	; (8007900 <vTaskSwitchContext+0xbc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e012      	b.n	800788e <vTaskSwitchContext+0x4a>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10c      	bne.n	8007888 <vTaskSwitchContext+0x44>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	b672      	cpsid	i
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	b662      	cpsie	i
 8007882:	607b      	str	r3, [r7, #4]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <vTaskSwitchContext+0x42>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3b01      	subs	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	491d      	ldr	r1, [pc, #116]	; (8007904 <vTaskSwitchContext+0xc0>)
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0e2      	beq.n	8007868 <vTaskSwitchContext+0x24>
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4613      	mov	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4a15      	ldr	r2, [pc, #84]	; (8007904 <vTaskSwitchContext+0xc0>)
 80078ae:	4413      	add	r3, r2
 80078b0:	60bb      	str	r3, [r7, #8]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	605a      	str	r2, [r3, #4]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	3308      	adds	r3, #8
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d104      	bne.n	80078d2 <vTaskSwitchContext+0x8e>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	605a      	str	r2, [r3, #4]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	4a0b      	ldr	r2, [pc, #44]	; (8007908 <vTaskSwitchContext+0xc4>)
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	4a08      	ldr	r2, [pc, #32]	; (8007900 <vTaskSwitchContext+0xbc>)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <vTaskSwitchContext+0xc4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3354      	adds	r3, #84	; 0x54
 80078e8:	4a08      	ldr	r2, [pc, #32]	; (800790c <vTaskSwitchContext+0xc8>)
 80078ea:	6013      	str	r3, [r2, #0]
}
 80078ec:	bf00      	nop
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	200018fc 	.word	0x200018fc
 80078fc:	200018e8 	.word	0x200018e8
 8007900:	200018dc 	.word	0x200018dc
 8007904:	20001404 	.word	0x20001404
 8007908:	20001400 	.word	0x20001400
 800790c:	20000010 	.word	0x20000010

08007910 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10c      	bne.n	800793a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	b672      	cpsid	i
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	b662      	cpsie	i
 8007934:	60fb      	str	r3, [r7, #12]
}
 8007936:	bf00      	nop
 8007938:	e7fe      	b.n	8007938 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800793a:	4b07      	ldr	r3, [pc, #28]	; (8007958 <vTaskPlaceOnEventList+0x48>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3318      	adds	r3, #24
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fe fd9f 	bl	8006486 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007948:	2101      	movs	r1, #1
 800794a:	6838      	ldr	r0, [r7, #0]
 800794c:	f000 fa8e 	bl	8007e6c <prvAddCurrentTaskToDelayedList>
}
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20001400 	.word	0x20001400

0800795c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10c      	bne.n	8007988 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	b672      	cpsid	i
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	b662      	cpsie	i
 8007982:	617b      	str	r3, [r7, #20]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3318      	adds	r3, #24
 800798e:	4619      	mov	r1, r3
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7fe fd54 	bl	800643e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800799c:	f04f 33ff 	mov.w	r3, #4294967295
 80079a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	68b8      	ldr	r0, [r7, #8]
 80079a6:	f000 fa61 	bl	8007e6c <prvAddCurrentTaskToDelayedList>
	}
 80079aa:	bf00      	nop
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20001400 	.word	0x20001400

080079b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10c      	bne.n	80079e8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	b672      	cpsid	i
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	b662      	cpsie	i
 80079e2:	60fb      	str	r3, [r7, #12]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	3318      	adds	r3, #24
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fd83 	bl	80064f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079f2:	4b1e      	ldr	r3, [pc, #120]	; (8007a6c <xTaskRemoveFromEventList+0xb4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11d      	bne.n	8007a36 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fd7a 	bl	80064f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4b19      	ldr	r3, [pc, #100]	; (8007a70 <xTaskRemoveFromEventList+0xb8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d903      	bls.n	8007a18 <xTaskRemoveFromEventList+0x60>
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	4a16      	ldr	r2, [pc, #88]	; (8007a70 <xTaskRemoveFromEventList+0xb8>)
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4a13      	ldr	r2, [pc, #76]	; (8007a74 <xTaskRemoveFromEventList+0xbc>)
 8007a26:	441a      	add	r2, r3
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7fe fd05 	bl	800643e <vListInsertEnd>
 8007a34:	e005      	b.n	8007a42 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3318      	adds	r3, #24
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	480e      	ldr	r0, [pc, #56]	; (8007a78 <xTaskRemoveFromEventList+0xc0>)
 8007a3e:	f7fe fcfe 	bl	800643e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <xTaskRemoveFromEventList+0xc4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d905      	bls.n	8007a5c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a54:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <xTaskRemoveFromEventList+0xc8>)
 8007a56:	2201      	movs	r2, #1
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	e001      	b.n	8007a60 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a60:	697b      	ldr	r3, [r7, #20]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200018fc 	.word	0x200018fc
 8007a70:	200018dc 	.word	0x200018dc
 8007a74:	20001404 	.word	0x20001404
 8007a78:	20001894 	.word	0x20001894
 8007a7c:	20001400 	.word	0x20001400
 8007a80:	200018e8 	.word	0x200018e8

08007a84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <vTaskInternalSetTimeOutState+0x24>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a94:	4b05      	ldr	r3, [pc, #20]	; (8007aac <vTaskInternalSetTimeOutState+0x28>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	605a      	str	r2, [r3, #4]
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	200018ec 	.word	0x200018ec
 8007aac:	200018d8 	.word	0x200018d8

08007ab0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10c      	bne.n	8007ada <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	b672      	cpsid	i
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	b662      	cpsie	i
 8007ad4:	613b      	str	r3, [r7, #16]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10c      	bne.n	8007afa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	b672      	cpsid	i
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	b662      	cpsie	i
 8007af4:	60fb      	str	r3, [r7, #12]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007afa:	f000 fe77 	bl	80087ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007afe:	4b1d      	ldr	r3, [pc, #116]	; (8007b74 <xTaskCheckForTimeOut+0xc4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d102      	bne.n	8007b1e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61fb      	str	r3, [r7, #28]
 8007b1c:	e023      	b.n	8007b66 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <xTaskCheckForTimeOut+0xc8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d007      	beq.n	8007b3a <xTaskCheckForTimeOut+0x8a>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d302      	bcc.n	8007b3a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	e015      	b.n	8007b66 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d20b      	bcs.n	8007b5c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	1ad2      	subs	r2, r2, r3
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff ff97 	bl	8007a84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61fb      	str	r3, [r7, #28]
 8007b5a:	e004      	b.n	8007b66 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b62:	2301      	movs	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b66:	f000 fe75 	bl	8008854 <vPortExitCritical>

	return xReturn;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	200018d8 	.word	0x200018d8
 8007b78:	200018ec 	.word	0x200018ec

08007b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b80:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <vTaskMissedYield+0x14>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	601a      	str	r2, [r3, #0]
}
 8007b86:	bf00      	nop
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	200018e8 	.word	0x200018e8

08007b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b9c:	f000 f852 	bl	8007c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ba0:	4b06      	ldr	r3, [pc, #24]	; (8007bbc <prvIdleTask+0x28>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d9f9      	bls.n	8007b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ba8:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <prvIdleTask+0x2c>)
 8007baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bb8:	e7f0      	b.n	8007b9c <prvIdleTask+0x8>
 8007bba:	bf00      	nop
 8007bbc:	20001404 	.word	0x20001404
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bca:	2300      	movs	r3, #0
 8007bcc:	607b      	str	r3, [r7, #4]
 8007bce:	e00c      	b.n	8007bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4a12      	ldr	r2, [pc, #72]	; (8007c24 <prvInitialiseTaskLists+0x60>)
 8007bdc:	4413      	add	r3, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe fc00 	bl	80063e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3301      	adds	r3, #1
 8007be8:	607b      	str	r3, [r7, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b37      	cmp	r3, #55	; 0x37
 8007bee:	d9ef      	bls.n	8007bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bf0:	480d      	ldr	r0, [pc, #52]	; (8007c28 <prvInitialiseTaskLists+0x64>)
 8007bf2:	f7fe fbf7 	bl	80063e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bf6:	480d      	ldr	r0, [pc, #52]	; (8007c2c <prvInitialiseTaskLists+0x68>)
 8007bf8:	f7fe fbf4 	bl	80063e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bfc:	480c      	ldr	r0, [pc, #48]	; (8007c30 <prvInitialiseTaskLists+0x6c>)
 8007bfe:	f7fe fbf1 	bl	80063e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c02:	480c      	ldr	r0, [pc, #48]	; (8007c34 <prvInitialiseTaskLists+0x70>)
 8007c04:	f7fe fbee 	bl	80063e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c08:	480b      	ldr	r0, [pc, #44]	; (8007c38 <prvInitialiseTaskLists+0x74>)
 8007c0a:	f7fe fbeb 	bl	80063e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c0e:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <prvInitialiseTaskLists+0x78>)
 8007c10:	4a05      	ldr	r2, [pc, #20]	; (8007c28 <prvInitialiseTaskLists+0x64>)
 8007c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <prvInitialiseTaskLists+0x7c>)
 8007c16:	4a05      	ldr	r2, [pc, #20]	; (8007c2c <prvInitialiseTaskLists+0x68>)
 8007c18:	601a      	str	r2, [r3, #0]
}
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20001404 	.word	0x20001404
 8007c28:	20001864 	.word	0x20001864
 8007c2c:	20001878 	.word	0x20001878
 8007c30:	20001894 	.word	0x20001894
 8007c34:	200018a8 	.word	0x200018a8
 8007c38:	200018c0 	.word	0x200018c0
 8007c3c:	2000188c 	.word	0x2000188c
 8007c40:	20001890 	.word	0x20001890

08007c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c4a:	e019      	b.n	8007c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c4c:	f000 fdce 	bl	80087ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c50:	4b10      	ldr	r3, [pc, #64]	; (8007c94 <prvCheckTasksWaitingTermination+0x50>)
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe fc4b 	bl	80064f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c62:	4b0d      	ldr	r3, [pc, #52]	; (8007c98 <prvCheckTasksWaitingTermination+0x54>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	4a0b      	ldr	r2, [pc, #44]	; (8007c98 <prvCheckTasksWaitingTermination+0x54>)
 8007c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	; (8007c9c <prvCheckTasksWaitingTermination+0x58>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <prvCheckTasksWaitingTermination+0x58>)
 8007c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c76:	f000 fded 	bl	8008854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f810 	bl	8007ca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c80:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <prvCheckTasksWaitingTermination+0x58>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e1      	bne.n	8007c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	200018a8 	.word	0x200018a8
 8007c98:	200018d4 	.word	0x200018d4
 8007c9c:	200018bc 	.word	0x200018bc

08007ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3354      	adds	r3, #84	; 0x54
 8007cac:	4618      	mov	r0, r3
 8007cae:	f001 fa89 	bl	80091c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d108      	bne.n	8007cce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 ff89 	bl	8008bd8 <vPortFree>
				vPortFree( pxTCB );
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 ff86 	bl	8008bd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ccc:	e01a      	b.n	8007d04 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d103      	bne.n	8007ce0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 ff7d 	bl	8008bd8 <vPortFree>
	}
 8007cde:	e011      	b.n	8007d04 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d00c      	beq.n	8007d04 <prvDeleteTCB+0x64>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	b672      	cpsid	i
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	b662      	cpsie	i
 8007cfe:	60fb      	str	r3, [r7, #12]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <prvDeleteTCB+0x62>
	}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <prvResetNextTaskUnblockTime+0x38>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <prvResetNextTaskUnblockTime+0x3c>)
 8007d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d24:	e008      	b.n	8007d38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d26:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <prvResetNextTaskUnblockTime+0x38>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <prvResetNextTaskUnblockTime+0x3c>)
 8007d36:	6013      	str	r3, [r2, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	2000188c 	.word	0x2000188c
 8007d48:	200018f4 	.word	0x200018f4

08007d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d52:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <xTaskGetSchedulerState+0x34>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d102      	bne.n	8007d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	607b      	str	r3, [r7, #4]
 8007d5e:	e008      	b.n	8007d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d60:	4b08      	ldr	r3, [pc, #32]	; (8007d84 <xTaskGetSchedulerState+0x38>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	607b      	str	r3, [r7, #4]
 8007d6c:	e001      	b.n	8007d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d72:	687b      	ldr	r3, [r7, #4]
	}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	200018e0 	.word	0x200018e0
 8007d84:	200018fc 	.word	0x200018fc

08007d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d05a      	beq.n	8007e54 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d9e:	4b30      	ldr	r3, [pc, #192]	; (8007e60 <xTaskPriorityDisinherit+0xd8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d00c      	beq.n	8007dc2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	b672      	cpsid	i
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	b662      	cpsie	i
 8007dbc:	60fb      	str	r3, [r7, #12]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10c      	bne.n	8007de4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	b672      	cpsid	i
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	b662      	cpsie	i
 8007dde:	60bb      	str	r3, [r7, #8]
}
 8007de0:	bf00      	nop
 8007de2:	e7fe      	b.n	8007de2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	1e5a      	subs	r2, r3, #1
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d02c      	beq.n	8007e54 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d128      	bne.n	8007e54 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3304      	adds	r3, #4
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe fb76 	bl	80064f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e24:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <xTaskPriorityDisinherit+0xdc>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d903      	bls.n	8007e34 <xTaskPriorityDisinherit+0xac>
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	4a0c      	ldr	r2, [pc, #48]	; (8007e64 <xTaskPriorityDisinherit+0xdc>)
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4a09      	ldr	r2, [pc, #36]	; (8007e68 <xTaskPriorityDisinherit+0xe0>)
 8007e42:	441a      	add	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f7fe faf7 	bl	800643e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e50:	2301      	movs	r3, #1
 8007e52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e54:	697b      	ldr	r3, [r7, #20]
	}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20001400 	.word	0x20001400
 8007e64:	200018dc 	.word	0x200018dc
 8007e68:	20001404 	.word	0x20001404

08007e6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e76:	4b21      	ldr	r3, [pc, #132]	; (8007efc <prvAddCurrentTaskToDelayedList+0x90>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e7c:	4b20      	ldr	r3, [pc, #128]	; (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3304      	adds	r3, #4
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fb38 	bl	80064f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d10a      	bne.n	8007ea6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e96:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4819      	ldr	r0, [pc, #100]	; (8007f04 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ea0:	f7fe facd 	bl	800643e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ea4:	e026      	b.n	8007ef4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4413      	add	r3, r2
 8007eac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007eae:	4b14      	ldr	r3, [pc, #80]	; (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d209      	bcs.n	8007ed2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ebe:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7fe fadb 	bl	8006486 <vListInsert>
}
 8007ed0:	e010      	b.n	8007ef4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ed2:	4b0e      	ldr	r3, [pc, #56]	; (8007f0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4b0a      	ldr	r3, [pc, #40]	; (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f7fe fad1 	bl	8006486 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d202      	bcs.n	8007ef4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007eee:	4a08      	ldr	r2, [pc, #32]	; (8007f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	6013      	str	r3, [r2, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	200018d8 	.word	0x200018d8
 8007f00:	20001400 	.word	0x20001400
 8007f04:	200018c0 	.word	0x200018c0
 8007f08:	20001890 	.word	0x20001890
 8007f0c:	2000188c 	.word	0x2000188c
 8007f10:	200018f4 	.word	0x200018f4

08007f14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08a      	sub	sp, #40	; 0x28
 8007f18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f1e:	f000 fb15 	bl	800854c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f22:	4b1d      	ldr	r3, [pc, #116]	; (8007f98 <xTimerCreateTimerTask+0x84>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d021      	beq.n	8007f6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f32:	1d3a      	adds	r2, r7, #4
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	f107 030c 	add.w	r3, r7, #12
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fa37 	bl	80063b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	9202      	str	r2, [sp, #8]
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	460a      	mov	r2, r1
 8007f54:	4911      	ldr	r1, [pc, #68]	; (8007f9c <xTimerCreateTimerTask+0x88>)
 8007f56:	4812      	ldr	r0, [pc, #72]	; (8007fa0 <xTimerCreateTimerTask+0x8c>)
 8007f58:	f7ff f890 	bl	800707c <xTaskCreateStatic>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4a11      	ldr	r2, [pc, #68]	; (8007fa4 <xTimerCreateTimerTask+0x90>)
 8007f60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f62:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <xTimerCreateTimerTask+0x90>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10c      	bne.n	8007f8e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	b672      	cpsid	i
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	b662      	cpsie	i
 8007f88:	613b      	str	r3, [r7, #16]
}
 8007f8a:	bf00      	nop
 8007f8c:	e7fe      	b.n	8007f8c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007f8e:	697b      	ldr	r3, [r7, #20]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20001930 	.word	0x20001930
 8007f9c:	0800bca0 	.word	0x0800bca0
 8007fa0:	080080e5 	.word	0x080080e5
 8007fa4:	20001934 	.word	0x20001934

08007fa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10c      	bne.n	8007fda <xTimerGenericCommand+0x32>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	b672      	cpsid	i
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	b662      	cpsie	i
 8007fd4:	623b      	str	r3, [r7, #32]
}
 8007fd6:	bf00      	nop
 8007fd8:	e7fe      	b.n	8007fd8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fda:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <xTimerGenericCommand+0x9c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d02a      	beq.n	8008038 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b05      	cmp	r3, #5
 8007ff2:	dc18      	bgt.n	8008026 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ff4:	f7ff feaa 	bl	8007d4c <xTaskGetSchedulerState>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d109      	bne.n	8008012 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ffe:	4b11      	ldr	r3, [pc, #68]	; (8008044 <xTimerGenericCommand+0x9c>)
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	f107 0110 	add.w	r1, r7, #16
 8008006:	2300      	movs	r3, #0
 8008008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800800a:	f7fe fc3d 	bl	8006888 <xQueueGenericSend>
 800800e:	6278      	str	r0, [r7, #36]	; 0x24
 8008010:	e012      	b.n	8008038 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <xTimerGenericCommand+0x9c>)
 8008014:	6818      	ldr	r0, [r3, #0]
 8008016:	f107 0110 	add.w	r1, r7, #16
 800801a:	2300      	movs	r3, #0
 800801c:	2200      	movs	r2, #0
 800801e:	f7fe fc33 	bl	8006888 <xQueueGenericSend>
 8008022:	6278      	str	r0, [r7, #36]	; 0x24
 8008024:	e008      	b.n	8008038 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008026:	4b07      	ldr	r3, [pc, #28]	; (8008044 <xTimerGenericCommand+0x9c>)
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	f107 0110 	add.w	r1, r7, #16
 800802e:	2300      	movs	r3, #0
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	f7fe fd2f 	bl	8006a94 <xQueueGenericSendFromISR>
 8008036:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800803a:	4618      	mov	r0, r3
 800803c:	3728      	adds	r7, #40	; 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001930 	.word	0x20001930

08008048 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af02      	add	r7, sp, #8
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008052:	4b23      	ldr	r3, [pc, #140]	; (80080e0 <prvProcessExpiredTimer+0x98>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	3304      	adds	r3, #4
 8008060:	4618      	mov	r0, r3
 8008062:	f7fe fa49 	bl	80064f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d024      	beq.n	80080be <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	699a      	ldr	r2, [r3, #24]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	18d1      	adds	r1, r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	6978      	ldr	r0, [r7, #20]
 8008082:	f000 f8d3 	bl	800822c <prvInsertTimerInActiveList>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d021      	beq.n	80080d0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800808c:	2300      	movs	r3, #0
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	2300      	movs	r3, #0
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	2100      	movs	r1, #0
 8008096:	6978      	ldr	r0, [r7, #20]
 8008098:	f7ff ff86 	bl	8007fa8 <xTimerGenericCommand>
 800809c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d115      	bne.n	80080d0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	b672      	cpsid	i
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	b662      	cpsie	i
 80080b8:	60fb      	str	r3, [r7, #12]
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	6978      	ldr	r0, [r7, #20]
 80080d6:	4798      	blx	r3
}
 80080d8:	bf00      	nop
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20001928 	.word	0x20001928

080080e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080ec:	f107 0308 	add.w	r3, r7, #8
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 f857 	bl	80081a4 <prvGetNextExpireTime>
 80080f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4619      	mov	r1, r3
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f803 	bl	8008108 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008102:	f000 f8d5 	bl	80082b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008106:	e7f1      	b.n	80080ec <prvTimerTask+0x8>

08008108 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008112:	f7ff fa1d 	bl	8007550 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f866 	bl	80081ec <prvSampleTimeNow>
 8008120:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d130      	bne.n	800818a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <prvProcessTimerOrBlockTask+0x3c>
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	429a      	cmp	r2, r3
 8008134:	d806      	bhi.n	8008144 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008136:	f7ff fa19 	bl	800756c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800813a:	68f9      	ldr	r1, [r7, #12]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff ff83 	bl	8008048 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008142:	e024      	b.n	800818e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d008      	beq.n	800815c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800814a:	4b13      	ldr	r3, [pc, #76]	; (8008198 <prvProcessTimerOrBlockTask+0x90>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <prvProcessTimerOrBlockTask+0x50>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <prvProcessTimerOrBlockTask+0x52>
 8008158:	2300      	movs	r3, #0
 800815a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800815c:	4b0f      	ldr	r3, [pc, #60]	; (800819c <prvProcessTimerOrBlockTask+0x94>)
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	4619      	mov	r1, r3
 800816a:	f7fe ff53 	bl	8007014 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800816e:	f7ff f9fd 	bl	800756c <xTaskResumeAll>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008178:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <prvProcessTimerOrBlockTask+0x98>)
 800817a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	f3bf 8f6f 	isb	sy
}
 8008188:	e001      	b.n	800818e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800818a:	f7ff f9ef 	bl	800756c <xTaskResumeAll>
}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	2000192c 	.word	0x2000192c
 800819c:	20001930 	.word	0x20001930
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081ac:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <prvGetNextExpireTime+0x44>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <prvGetNextExpireTime+0x16>
 80081b6:	2201      	movs	r2, #1
 80081b8:	e000      	b.n	80081bc <prvGetNextExpireTime+0x18>
 80081ba:	2200      	movs	r2, #0
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d105      	bne.n	80081d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081c8:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <prvGetNextExpireTime+0x44>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	e001      	b.n	80081d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081d8:	68fb      	ldr	r3, [r7, #12]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	20001928 	.word	0x20001928

080081ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081f4:	f7ff fa5a 	bl	80076ac <xTaskGetTickCount>
 80081f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081fa:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <prvSampleTimeNow+0x3c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	429a      	cmp	r2, r3
 8008202:	d205      	bcs.n	8008210 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008204:	f000 f93c 	bl	8008480 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e002      	b.n	8008216 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008216:	4a04      	ldr	r2, [pc, #16]	; (8008228 <prvSampleTimeNow+0x3c>)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800821c:	68fb      	ldr	r3, [r7, #12]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20001938 	.word	0x20001938

0800822c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	429a      	cmp	r2, r3
 8008250:	d812      	bhi.n	8008278 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e01b      	b.n	800829e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008266:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <prvInsertTimerInActiveList+0x7c>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3304      	adds	r3, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fe f908 	bl	8006486 <vListInsert>
 8008276:	e012      	b.n	800829e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d206      	bcs.n	800828e <prvInsertTimerInActiveList+0x62>
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d302      	bcc.n	800828e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008288:	2301      	movs	r3, #1
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	e007      	b.n	800829e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800828e:	4b07      	ldr	r3, [pc, #28]	; (80082ac <prvInsertTimerInActiveList+0x80>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3304      	adds	r3, #4
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f7fe f8f4 	bl	8006486 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800829e:	697b      	ldr	r3, [r7, #20]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	2000192c 	.word	0x2000192c
 80082ac:	20001928 	.word	0x20001928

080082b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08e      	sub	sp, #56	; 0x38
 80082b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082b6:	e0d0      	b.n	800845a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da1a      	bge.n	80082f4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	3304      	adds	r3, #4
 80082c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10c      	bne.n	80082e4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	b672      	cpsid	i
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	b662      	cpsie	i
 80082de:	61fb      	str	r3, [r7, #28]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ea:	6850      	ldr	r0, [r2, #4]
 80082ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ee:	6892      	ldr	r2, [r2, #8]
 80082f0:	4611      	mov	r1, r2
 80082f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f2c0 80ae 	blt.w	8008458 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe f8f3 	bl	80064f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008312:	463b      	mov	r3, r7
 8008314:	4618      	mov	r0, r3
 8008316:	f7ff ff69 	bl	80081ec <prvSampleTimeNow>
 800831a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b09      	cmp	r3, #9
 8008320:	f200 809b 	bhi.w	800845a <prvProcessReceivedCommands+0x1aa>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <prvProcessReceivedCommands+0x7c>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008355 	.word	0x08008355
 8008330:	08008355 	.word	0x08008355
 8008334:	08008355 	.word	0x08008355
 8008338:	080083cd 	.word	0x080083cd
 800833c:	080083e1 	.word	0x080083e1
 8008340:	0800842f 	.word	0x0800842f
 8008344:	08008355 	.word	0x08008355
 8008348:	08008355 	.word	0x08008355
 800834c:	080083cd 	.word	0x080083cd
 8008350:	080083e1 	.word	0x080083e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800835a:	f043 0301 	orr.w	r3, r3, #1
 800835e:	b2da      	uxtb	r2, r3
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	18d1      	adds	r1, r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008374:	f7ff ff5a 	bl	800822c <prvInsertTimerInActiveList>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d06d      	beq.n	800845a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008384:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d062      	beq.n	800845a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	441a      	add	r2, r3
 800839c:	2300      	movs	r3, #0
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	2300      	movs	r3, #0
 80083a2:	2100      	movs	r1, #0
 80083a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083a6:	f7ff fdff 	bl	8007fa8 <xTimerGenericCommand>
 80083aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d153      	bne.n	800845a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	b672      	cpsid	i
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	b662      	cpsie	i
 80083c6:	61bb      	str	r3, [r7, #24]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d2:	f023 0301 	bic.w	r3, r3, #1
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80083de:	e03c      	b.n	800845a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10c      	bne.n	800841a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	b672      	cpsid	i
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	b662      	cpsie	i
 8008414:	617b      	str	r3, [r7, #20]
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	699a      	ldr	r2, [r3, #24]
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	18d1      	adds	r1, r2, r3
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008428:	f7ff ff00 	bl	800822c <prvInsertTimerInActiveList>
					break;
 800842c:	e015      	b.n	800845a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d103      	bne.n	8008444 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800843c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800843e:	f000 fbcb 	bl	8008bd8 <vPortFree>
 8008442:	e00a      	b.n	800845a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800844a:	f023 0301 	bic.w	r3, r3, #1
 800844e:	b2da      	uxtb	r2, r3
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008456:	e000      	b.n	800845a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008458:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800845a:	4b08      	ldr	r3, [pc, #32]	; (800847c <prvProcessReceivedCommands+0x1cc>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	1d39      	adds	r1, r7, #4
 8008460:	2200      	movs	r2, #0
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe fbb6 	bl	8006bd4 <xQueueReceive>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	f47f af24 	bne.w	80082b8 <prvProcessReceivedCommands+0x8>
	}
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	3730      	adds	r7, #48	; 0x30
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20001930 	.word	0x20001930

08008480 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008486:	e04a      	b.n	800851e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008488:	4b2e      	ldr	r3, [pc, #184]	; (8008544 <prvSwitchTimerLists+0xc4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008492:	4b2c      	ldr	r3, [pc, #176]	; (8008544 <prvSwitchTimerLists+0xc4>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3304      	adds	r3, #4
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe f829 	bl	80064f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d030      	beq.n	800851e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4413      	add	r3, r2
 80084c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d90e      	bls.n	80084ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084da:	4b1a      	ldr	r3, [pc, #104]	; (8008544 <prvSwitchTimerLists+0xc4>)
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3304      	adds	r3, #4
 80084e2:	4619      	mov	r1, r3
 80084e4:	4610      	mov	r0, r2
 80084e6:	f7fd ffce 	bl	8006486 <vListInsert>
 80084ea:	e018      	b.n	800851e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084ec:	2300      	movs	r3, #0
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	2300      	movs	r3, #0
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	2100      	movs	r1, #0
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fd56 	bl	8007fa8 <xTimerGenericCommand>
 80084fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10c      	bne.n	800851e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	b672      	cpsid	i
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	b662      	cpsie	i
 8008518:	603b      	str	r3, [r7, #0]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <prvSwitchTimerLists+0xc4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1af      	bne.n	8008488 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <prvSwitchTimerLists+0xc4>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800852e:	4b06      	ldr	r3, [pc, #24]	; (8008548 <prvSwitchTimerLists+0xc8>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a04      	ldr	r2, [pc, #16]	; (8008544 <prvSwitchTimerLists+0xc4>)
 8008534:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008536:	4a04      	ldr	r2, [pc, #16]	; (8008548 <prvSwitchTimerLists+0xc8>)
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	6013      	str	r3, [r2, #0]
}
 800853c:	bf00      	nop
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20001928 	.word	0x20001928
 8008548:	2000192c 	.word	0x2000192c

0800854c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008552:	f000 f94b 	bl	80087ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008556:	4b15      	ldr	r3, [pc, #84]	; (80085ac <prvCheckForValidListAndQueue+0x60>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d120      	bne.n	80085a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800855e:	4814      	ldr	r0, [pc, #80]	; (80085b0 <prvCheckForValidListAndQueue+0x64>)
 8008560:	f7fd ff40 	bl	80063e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008564:	4813      	ldr	r0, [pc, #76]	; (80085b4 <prvCheckForValidListAndQueue+0x68>)
 8008566:	f7fd ff3d 	bl	80063e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800856a:	4b13      	ldr	r3, [pc, #76]	; (80085b8 <prvCheckForValidListAndQueue+0x6c>)
 800856c:	4a10      	ldr	r2, [pc, #64]	; (80085b0 <prvCheckForValidListAndQueue+0x64>)
 800856e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008570:	4b12      	ldr	r3, [pc, #72]	; (80085bc <prvCheckForValidListAndQueue+0x70>)
 8008572:	4a10      	ldr	r2, [pc, #64]	; (80085b4 <prvCheckForValidListAndQueue+0x68>)
 8008574:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008576:	2300      	movs	r3, #0
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <prvCheckForValidListAndQueue+0x74>)
 800857c:	4a11      	ldr	r2, [pc, #68]	; (80085c4 <prvCheckForValidListAndQueue+0x78>)
 800857e:	2110      	movs	r1, #16
 8008580:	200a      	movs	r0, #10
 8008582:	f7fe f84d 	bl	8006620 <xQueueGenericCreateStatic>
 8008586:	4603      	mov	r3, r0
 8008588:	4a08      	ldr	r2, [pc, #32]	; (80085ac <prvCheckForValidListAndQueue+0x60>)
 800858a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800858c:	4b07      	ldr	r3, [pc, #28]	; (80085ac <prvCheckForValidListAndQueue+0x60>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <prvCheckForValidListAndQueue+0x60>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	490b      	ldr	r1, [pc, #44]	; (80085c8 <prvCheckForValidListAndQueue+0x7c>)
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe fd10 	bl	8006fc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085a0:	f000 f958 	bl	8008854 <vPortExitCritical>
}
 80085a4:	bf00      	nop
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20001930 	.word	0x20001930
 80085b0:	20001900 	.word	0x20001900
 80085b4:	20001914 	.word	0x20001914
 80085b8:	20001928 	.word	0x20001928
 80085bc:	2000192c 	.word	0x2000192c
 80085c0:	200019dc 	.word	0x200019dc
 80085c4:	2000193c 	.word	0x2000193c
 80085c8:	0800bca8 	.word	0x0800bca8

080085cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3b04      	subs	r3, #4
 80085dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3b04      	subs	r3, #4
 80085ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f023 0201 	bic.w	r2, r3, #1
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3b04      	subs	r3, #4
 80085fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085fc:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <pxPortInitialiseStack+0x64>)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3b14      	subs	r3, #20
 8008606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3b04      	subs	r3, #4
 8008612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f06f 0202 	mvn.w	r2, #2
 800861a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3b20      	subs	r3, #32
 8008620:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008622:	68fb      	ldr	r3, [r7, #12]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	08008635 	.word	0x08008635

08008634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800863e:	4b14      	ldr	r3, [pc, #80]	; (8008690 <prvTaskExitError+0x5c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008646:	d00c      	beq.n	8008662 <prvTaskExitError+0x2e>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	b672      	cpsid	i
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	b662      	cpsie	i
 800865c:	60fb      	str	r3, [r7, #12]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <prvTaskExitError+0x2c>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	b672      	cpsid	i
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	b662      	cpsie	i
 8008676:	60bb      	str	r3, [r7, #8]
}
 8008678:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800867a:	bf00      	nop
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0fc      	beq.n	800867c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008682:	bf00      	nop
 8008684:	bf00      	nop
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	2000000c 	.word	0x2000000c
	...

080086a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <pxCurrentTCBConst2>)
 80086a2:	6819      	ldr	r1, [r3, #0]
 80086a4:	6808      	ldr	r0, [r1, #0]
 80086a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	f380 8809 	msr	PSP, r0
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f04f 0000 	mov.w	r0, #0
 80086b6:	f380 8811 	msr	BASEPRI, r0
 80086ba:	4770      	bx	lr
 80086bc:	f3af 8000 	nop.w

080086c0 <pxCurrentTCBConst2>:
 80086c0:	20001400 	.word	0x20001400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop

080086c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086c8:	4808      	ldr	r0, [pc, #32]	; (80086ec <prvPortStartFirstTask+0x24>)
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	6800      	ldr	r0, [r0, #0]
 80086ce:	f380 8808 	msr	MSP, r0
 80086d2:	f04f 0000 	mov.w	r0, #0
 80086d6:	f380 8814 	msr	CONTROL, r0
 80086da:	b662      	cpsie	i
 80086dc:	b661      	cpsie	f
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	df00      	svc	0
 80086e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086ea:	bf00      	nop
 80086ec:	e000ed08 	.word	0xe000ed08

080086f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086f6:	4b37      	ldr	r3, [pc, #220]	; (80087d4 <xPortStartScheduler+0xe4>)
 80086f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	22ff      	movs	r2, #255	; 0xff
 8008706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008718:	b2da      	uxtb	r2, r3
 800871a:	4b2f      	ldr	r3, [pc, #188]	; (80087d8 <xPortStartScheduler+0xe8>)
 800871c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800871e:	4b2f      	ldr	r3, [pc, #188]	; (80087dc <xPortStartScheduler+0xec>)
 8008720:	2207      	movs	r2, #7
 8008722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008724:	e009      	b.n	800873a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008726:	4b2d      	ldr	r3, [pc, #180]	; (80087dc <xPortStartScheduler+0xec>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3b01      	subs	r3, #1
 800872c:	4a2b      	ldr	r2, [pc, #172]	; (80087dc <xPortStartScheduler+0xec>)
 800872e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	b2db      	uxtb	r3, r3
 8008738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d0ef      	beq.n	8008726 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008746:	4b25      	ldr	r3, [pc, #148]	; (80087dc <xPortStartScheduler+0xec>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f1c3 0307 	rsb	r3, r3, #7
 800874e:	2b04      	cmp	r3, #4
 8008750:	d00c      	beq.n	800876c <xPortStartScheduler+0x7c>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	b672      	cpsid	i
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	b662      	cpsie	i
 8008766:	60bb      	str	r3, [r7, #8]
}
 8008768:	bf00      	nop
 800876a:	e7fe      	b.n	800876a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800876c:	4b1b      	ldr	r3, [pc, #108]	; (80087dc <xPortStartScheduler+0xec>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	021b      	lsls	r3, r3, #8
 8008772:	4a1a      	ldr	r2, [pc, #104]	; (80087dc <xPortStartScheduler+0xec>)
 8008774:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008776:	4b19      	ldr	r3, [pc, #100]	; (80087dc <xPortStartScheduler+0xec>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800877e:	4a17      	ldr	r2, [pc, #92]	; (80087dc <xPortStartScheduler+0xec>)
 8008780:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	b2da      	uxtb	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800878a:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <xPortStartScheduler+0xf0>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a14      	ldr	r2, [pc, #80]	; (80087e0 <xPortStartScheduler+0xf0>)
 8008790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008794:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008796:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <xPortStartScheduler+0xf0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a11      	ldr	r2, [pc, #68]	; (80087e0 <xPortStartScheduler+0xf0>)
 800879c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087a2:	f000 f8dd 	bl	8008960 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087a6:	4b0f      	ldr	r3, [pc, #60]	; (80087e4 <xPortStartScheduler+0xf4>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087ac:	f000 f8fc 	bl	80089a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087b0:	4b0d      	ldr	r3, [pc, #52]	; (80087e8 <xPortStartScheduler+0xf8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a0c      	ldr	r2, [pc, #48]	; (80087e8 <xPortStartScheduler+0xf8>)
 80087b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087bc:	f7ff ff84 	bl	80086c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087c0:	f7ff f840 	bl	8007844 <vTaskSwitchContext>
	prvTaskExitError();
 80087c4:	f7ff ff36 	bl	8008634 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	e000e400 	.word	0xe000e400
 80087d8:	20001a2c 	.word	0x20001a2c
 80087dc:	20001a30 	.word	0x20001a30
 80087e0:	e000ed20 	.word	0xe000ed20
 80087e4:	2000000c 	.word	0x2000000c
 80087e8:	e000ef34 	.word	0xe000ef34

080087ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	b672      	cpsid	i
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	b662      	cpsie	i
 8008806:	607b      	str	r3, [r7, #4]
}
 8008808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800880a:	4b10      	ldr	r3, [pc, #64]	; (800884c <vPortEnterCritical+0x60>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3301      	adds	r3, #1
 8008810:	4a0e      	ldr	r2, [pc, #56]	; (800884c <vPortEnterCritical+0x60>)
 8008812:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008814:	4b0d      	ldr	r3, [pc, #52]	; (800884c <vPortEnterCritical+0x60>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d111      	bne.n	8008840 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800881c:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <vPortEnterCritical+0x64>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00c      	beq.n	8008840 <vPortEnterCritical+0x54>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	b672      	cpsid	i
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	b662      	cpsie	i
 800883a:	603b      	str	r3, [r7, #0]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <vPortEnterCritical+0x52>
	}
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	2000000c 	.word	0x2000000c
 8008850:	e000ed04 	.word	0xe000ed04

08008854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800885a:	4b13      	ldr	r3, [pc, #76]	; (80088a8 <vPortExitCritical+0x54>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10c      	bne.n	800887c <vPortExitCritical+0x28>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	b672      	cpsid	i
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	b662      	cpsie	i
 8008876:	607b      	str	r3, [r7, #4]
}
 8008878:	bf00      	nop
 800887a:	e7fe      	b.n	800887a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800887c:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <vPortExitCritical+0x54>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3b01      	subs	r3, #1
 8008882:	4a09      	ldr	r2, [pc, #36]	; (80088a8 <vPortExitCritical+0x54>)
 8008884:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008886:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <vPortExitCritical+0x54>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <vPortExitCritical+0x46>
 800888e:	2300      	movs	r3, #0
 8008890:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	f383 8811 	msr	BASEPRI, r3
}
 8008898:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	2000000c 	.word	0x2000000c
 80088ac:	00000000 	.word	0x00000000

080088b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088b0:	f3ef 8009 	mrs	r0, PSP
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	4b15      	ldr	r3, [pc, #84]	; (8008910 <pxCurrentTCBConst>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	f01e 0f10 	tst.w	lr, #16
 80088c0:	bf08      	it	eq
 80088c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ca:	6010      	str	r0, [r2, #0]
 80088cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088d4:	b672      	cpsid	i
 80088d6:	f380 8811 	msr	BASEPRI, r0
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	b662      	cpsie	i
 80088e4:	f7fe ffae 	bl	8007844 <vTaskSwitchContext>
 80088e8:	f04f 0000 	mov.w	r0, #0
 80088ec:	f380 8811 	msr	BASEPRI, r0
 80088f0:	bc09      	pop	{r0, r3}
 80088f2:	6819      	ldr	r1, [r3, #0]
 80088f4:	6808      	ldr	r0, [r1, #0]
 80088f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	f01e 0f10 	tst.w	lr, #16
 80088fe:	bf08      	it	eq
 8008900:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008904:	f380 8809 	msr	PSP, r0
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop

08008910 <pxCurrentTCBConst>:
 8008910:	20001400 	.word	0x20001400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop

08008918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	b672      	cpsid	i
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	b662      	cpsie	i
 8008932:	607b      	str	r3, [r7, #4]
}
 8008934:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008936:	f7fe fec9 	bl	80076cc <xTaskIncrementTick>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008940:	4b06      	ldr	r3, [pc, #24]	; (800895c <xPortSysTickHandler+0x44>)
 8008942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	2300      	movs	r3, #0
 800894a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	f383 8811 	msr	BASEPRI, r3
}
 8008952:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	e000ed04 	.word	0xe000ed04

08008960 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008960:	b480      	push	{r7}
 8008962:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008964:	4b0b      	ldr	r3, [pc, #44]	; (8008994 <vPortSetupTimerInterrupt+0x34>)
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800896a:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <vPortSetupTimerInterrupt+0x38>)
 800896c:	2200      	movs	r2, #0
 800896e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008970:	4b0a      	ldr	r3, [pc, #40]	; (800899c <vPortSetupTimerInterrupt+0x3c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a0a      	ldr	r2, [pc, #40]	; (80089a0 <vPortSetupTimerInterrupt+0x40>)
 8008976:	fba2 2303 	umull	r2, r3, r2, r3
 800897a:	099b      	lsrs	r3, r3, #6
 800897c:	4a09      	ldr	r2, [pc, #36]	; (80089a4 <vPortSetupTimerInterrupt+0x44>)
 800897e:	3b01      	subs	r3, #1
 8008980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008982:	4b04      	ldr	r3, [pc, #16]	; (8008994 <vPortSetupTimerInterrupt+0x34>)
 8008984:	2207      	movs	r2, #7
 8008986:	601a      	str	r2, [r3, #0]
}
 8008988:	bf00      	nop
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	e000e010 	.word	0xe000e010
 8008998:	e000e018 	.word	0xe000e018
 800899c:	20000000 	.word	0x20000000
 80089a0:	10624dd3 	.word	0x10624dd3
 80089a4:	e000e014 	.word	0xe000e014

080089a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089b8 <vPortEnableVFP+0x10>
 80089ac:	6801      	ldr	r1, [r0, #0]
 80089ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089b2:	6001      	str	r1, [r0, #0]
 80089b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089b6:	bf00      	nop
 80089b8:	e000ed88 	.word	0xe000ed88

080089bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089c2:	f3ef 8305 	mrs	r3, IPSR
 80089c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b0f      	cmp	r3, #15
 80089cc:	d916      	bls.n	80089fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089ce:	4a19      	ldr	r2, [pc, #100]	; (8008a34 <vPortValidateInterruptPriority+0x78>)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089d8:	4b17      	ldr	r3, [pc, #92]	; (8008a38 <vPortValidateInterruptPriority+0x7c>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	7afa      	ldrb	r2, [r7, #11]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d20c      	bcs.n	80089fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	b672      	cpsid	i
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	b662      	cpsie	i
 80089f6:	607b      	str	r3, [r7, #4]
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089fc:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <vPortValidateInterruptPriority+0x80>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a04:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <vPortValidateInterruptPriority+0x84>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d90c      	bls.n	8008a26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	b672      	cpsid	i
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	b662      	cpsie	i
 8008a20:	603b      	str	r3, [r7, #0]
}
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <vPortValidateInterruptPriority+0x68>
	}
 8008a26:	bf00      	nop
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	e000e3f0 	.word	0xe000e3f0
 8008a38:	20001a2c 	.word	0x20001a2c
 8008a3c:	e000ed0c 	.word	0xe000ed0c
 8008a40:	20001a30 	.word	0x20001a30

08008a44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08a      	sub	sp, #40	; 0x28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a50:	f7fe fd7e 	bl	8007550 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a54:	4b5b      	ldr	r3, [pc, #364]	; (8008bc4 <pvPortMalloc+0x180>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a5c:	f000 f91a 	bl	8008c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a60:	4b59      	ldr	r3, [pc, #356]	; (8008bc8 <pvPortMalloc+0x184>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4013      	ands	r3, r2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f040 8092 	bne.w	8008b92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01f      	beq.n	8008ab4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008a74:	2208      	movs	r2, #8
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4413      	add	r3, r2
 8008a7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d016      	beq.n	8008ab4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f023 0307 	bic.w	r3, r3, #7
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00c      	beq.n	8008ab4 <pvPortMalloc+0x70>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	b672      	cpsid	i
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	b662      	cpsie	i
 8008aae:	617b      	str	r3, [r7, #20]
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d06b      	beq.n	8008b92 <pvPortMalloc+0x14e>
 8008aba:	4b44      	ldr	r3, [pc, #272]	; (8008bcc <pvPortMalloc+0x188>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d866      	bhi.n	8008b92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ac4:	4b42      	ldr	r3, [pc, #264]	; (8008bd0 <pvPortMalloc+0x18c>)
 8008ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ac8:	4b41      	ldr	r3, [pc, #260]	; (8008bd0 <pvPortMalloc+0x18c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ace:	e004      	b.n	8008ada <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d903      	bls.n	8008aec <pvPortMalloc+0xa8>
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1f1      	bne.n	8008ad0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008aec:	4b35      	ldr	r3, [pc, #212]	; (8008bc4 <pvPortMalloc+0x180>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d04d      	beq.n	8008b92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2208      	movs	r2, #8
 8008afc:	4413      	add	r3, r2
 8008afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	2308      	movs	r3, #8
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d921      	bls.n	8008b5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00c      	beq.n	8008b44 <pvPortMalloc+0x100>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	b672      	cpsid	i
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	b662      	cpsie	i
 8008b3e:	613b      	str	r3, [r7, #16]
}
 8008b40:	bf00      	nop
 8008b42:	e7fe      	b.n	8008b42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	1ad2      	subs	r2, r2, r3
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b56:	69b8      	ldr	r0, [r7, #24]
 8008b58:	f000 f8fe 	bl	8008d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b5c:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <pvPortMalloc+0x188>)
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	4a19      	ldr	r2, [pc, #100]	; (8008bcc <pvPortMalloc+0x188>)
 8008b68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b6a:	4b18      	ldr	r3, [pc, #96]	; (8008bcc <pvPortMalloc+0x188>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	4b19      	ldr	r3, [pc, #100]	; (8008bd4 <pvPortMalloc+0x190>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d203      	bcs.n	8008b7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b76:	4b15      	ldr	r3, [pc, #84]	; (8008bcc <pvPortMalloc+0x188>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a16      	ldr	r2, [pc, #88]	; (8008bd4 <pvPortMalloc+0x190>)
 8008b7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	4b11      	ldr	r3, [pc, #68]	; (8008bc8 <pvPortMalloc+0x184>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	431a      	orrs	r2, r3
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b92:	f7fe fceb 	bl	800756c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00c      	beq.n	8008bba <pvPortMalloc+0x176>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	b672      	cpsid	i
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	b662      	cpsie	i
 8008bb4:	60fb      	str	r3, [r7, #12]
}
 8008bb6:	bf00      	nop
 8008bb8:	e7fe      	b.n	8008bb8 <pvPortMalloc+0x174>
	return pvReturn;
 8008bba:	69fb      	ldr	r3, [r7, #28]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3728      	adds	r7, #40	; 0x28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	2000563c 	.word	0x2000563c
 8008bc8:	20005648 	.word	0x20005648
 8008bcc:	20005640 	.word	0x20005640
 8008bd0:	20005634 	.word	0x20005634
 8008bd4:	20005644 	.word	0x20005644

08008bd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d04c      	beq.n	8008c84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bea:	2308      	movs	r3, #8
 8008bec:	425b      	negs	r3, r3
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	4b23      	ldr	r3, [pc, #140]	; (8008c8c <vPortFree+0xb4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4013      	ands	r3, r2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10c      	bne.n	8008c20 <vPortFree+0x48>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	b672      	cpsid	i
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	b662      	cpsie	i
 8008c1a:	60fb      	str	r3, [r7, #12]
}
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00c      	beq.n	8008c42 <vPortFree+0x6a>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	b672      	cpsid	i
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	b662      	cpsie	i
 8008c3c:	60bb      	str	r3, [r7, #8]
}
 8008c3e:	bf00      	nop
 8008c40:	e7fe      	b.n	8008c40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	4b11      	ldr	r3, [pc, #68]	; (8008c8c <vPortFree+0xb4>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d019      	beq.n	8008c84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d115      	bne.n	8008c84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	4b0b      	ldr	r3, [pc, #44]	; (8008c8c <vPortFree+0xb4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	43db      	mvns	r3, r3
 8008c62:	401a      	ands	r2, r3
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c68:	f7fe fc72 	bl	8007550 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <vPortFree+0xb8>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4413      	add	r3, r2
 8008c76:	4a06      	ldr	r2, [pc, #24]	; (8008c90 <vPortFree+0xb8>)
 8008c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c7a:	6938      	ldr	r0, [r7, #16]
 8008c7c:	f000 f86c 	bl	8008d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c80:	f7fe fc74 	bl	800756c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c84:	bf00      	nop
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20005648 	.word	0x20005648
 8008c90:	20005640 	.word	0x20005640

08008c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ca0:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <prvHeapInit+0xac>)
 8008ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00c      	beq.n	8008cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3307      	adds	r3, #7
 8008cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	4a1f      	ldr	r2, [pc, #124]	; (8008d40 <prvHeapInit+0xac>)
 8008cc4:	4413      	add	r3, r2
 8008cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ccc:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <prvHeapInit+0xb0>)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	; (8008d44 <prvHeapInit+0xb0>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ce0:	2208      	movs	r2, #8
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0307 	bic.w	r3, r3, #7
 8008cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4a15      	ldr	r2, [pc, #84]	; (8008d48 <prvHeapInit+0xb4>)
 8008cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cf6:	4b14      	ldr	r3, [pc, #80]	; (8008d48 <prvHeapInit+0xb4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cfe:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <prvHeapInit+0xb4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d14:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <prvHeapInit+0xb4>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <prvHeapInit+0xb8>)
 8008d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	4a09      	ldr	r2, [pc, #36]	; (8008d50 <prvHeapInit+0xbc>)
 8008d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <prvHeapInit+0xc0>)
 8008d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	20001a34 	.word	0x20001a34
 8008d44:	20005634 	.word	0x20005634
 8008d48:	2000563c 	.word	0x2000563c
 8008d4c:	20005644 	.word	0x20005644
 8008d50:	20005640 	.word	0x20005640
 8008d54:	20005648 	.word	0x20005648

08008d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <prvInsertBlockIntoFreeList+0xac>)
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e002      	b.n	8008d6c <prvInsertBlockIntoFreeList+0x14>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d8f7      	bhi.n	8008d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	4413      	add	r3, r2
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d108      	bne.n	8008d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	441a      	add	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d118      	bne.n	8008de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <prvInsertBlockIntoFreeList+0xb0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d00d      	beq.n	8008dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	441a      	add	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	e008      	b.n	8008de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	e003      	b.n	8008de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d002      	beq.n	8008df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008df6:	bf00      	nop
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20005634 	.word	0x20005634
 8008e08:	2000563c 	.word	0x2000563c

08008e0c <__errno>:
 8008e0c:	4b01      	ldr	r3, [pc, #4]	; (8008e14 <__errno+0x8>)
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	20000010 	.word	0x20000010

08008e18 <std>:
 8008e18:	2300      	movs	r3, #0
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e26:	6083      	str	r3, [r0, #8]
 8008e28:	8181      	strh	r1, [r0, #12]
 8008e2a:	6643      	str	r3, [r0, #100]	; 0x64
 8008e2c:	81c2      	strh	r2, [r0, #14]
 8008e2e:	6183      	str	r3, [r0, #24]
 8008e30:	4619      	mov	r1, r3
 8008e32:	2208      	movs	r2, #8
 8008e34:	305c      	adds	r0, #92	; 0x5c
 8008e36:	f000 f91a 	bl	800906e <memset>
 8008e3a:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <std+0x38>)
 8008e3c:	6263      	str	r3, [r4, #36]	; 0x24
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <std+0x3c>)
 8008e40:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e42:	4b05      	ldr	r3, [pc, #20]	; (8008e58 <std+0x40>)
 8008e44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e46:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <std+0x44>)
 8008e48:	6224      	str	r4, [r4, #32]
 8008e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e4c:	bd10      	pop	{r4, pc}
 8008e4e:	bf00      	nop
 8008e50:	0800929d 	.word	0x0800929d
 8008e54:	080092bf 	.word	0x080092bf
 8008e58:	080092f7 	.word	0x080092f7
 8008e5c:	0800931b 	.word	0x0800931b

08008e60 <_cleanup_r>:
 8008e60:	4901      	ldr	r1, [pc, #4]	; (8008e68 <_cleanup_r+0x8>)
 8008e62:	f000 b8af 	b.w	8008fc4 <_fwalk_reent>
 8008e66:	bf00      	nop
 8008e68:	0800a055 	.word	0x0800a055

08008e6c <__sfmoreglue>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	2268      	movs	r2, #104	; 0x68
 8008e70:	1e4d      	subs	r5, r1, #1
 8008e72:	4355      	muls	r5, r2
 8008e74:	460e      	mov	r6, r1
 8008e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e7a:	f000 f921 	bl	80090c0 <_malloc_r>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	b140      	cbz	r0, 8008e94 <__sfmoreglue+0x28>
 8008e82:	2100      	movs	r1, #0
 8008e84:	e9c0 1600 	strd	r1, r6, [r0]
 8008e88:	300c      	adds	r0, #12
 8008e8a:	60a0      	str	r0, [r4, #8]
 8008e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e90:	f000 f8ed 	bl	800906e <memset>
 8008e94:	4620      	mov	r0, r4
 8008e96:	bd70      	pop	{r4, r5, r6, pc}

08008e98 <__sfp_lock_acquire>:
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <__sfp_lock_acquire+0x8>)
 8008e9a:	f000 b8d8 	b.w	800904e <__retarget_lock_acquire_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	2000564d 	.word	0x2000564d

08008ea4 <__sfp_lock_release>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	; (8008eac <__sfp_lock_release+0x8>)
 8008ea6:	f000 b8d3 	b.w	8009050 <__retarget_lock_release_recursive>
 8008eaa:	bf00      	nop
 8008eac:	2000564d 	.word	0x2000564d

08008eb0 <__sinit_lock_acquire>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__sinit_lock_acquire+0x8>)
 8008eb2:	f000 b8cc 	b.w	800904e <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	2000564e 	.word	0x2000564e

08008ebc <__sinit_lock_release>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__sinit_lock_release+0x8>)
 8008ebe:	f000 b8c7 	b.w	8009050 <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	2000564e 	.word	0x2000564e

08008ec8 <__sinit>:
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	4604      	mov	r4, r0
 8008ecc:	f7ff fff0 	bl	8008eb0 <__sinit_lock_acquire>
 8008ed0:	69a3      	ldr	r3, [r4, #24]
 8008ed2:	b11b      	cbz	r3, 8008edc <__sinit+0x14>
 8008ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed8:	f7ff bff0 	b.w	8008ebc <__sinit_lock_release>
 8008edc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ee0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ee2:	4b13      	ldr	r3, [pc, #76]	; (8008f30 <__sinit+0x68>)
 8008ee4:	4a13      	ldr	r2, [pc, #76]	; (8008f34 <__sinit+0x6c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008eea:	42a3      	cmp	r3, r4
 8008eec:	bf04      	itt	eq
 8008eee:	2301      	moveq	r3, #1
 8008ef0:	61a3      	streq	r3, [r4, #24]
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 f820 	bl	8008f38 <__sfp>
 8008ef8:	6060      	str	r0, [r4, #4]
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 f81c 	bl	8008f38 <__sfp>
 8008f00:	60a0      	str	r0, [r4, #8]
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 f818 	bl	8008f38 <__sfp>
 8008f08:	2200      	movs	r2, #0
 8008f0a:	60e0      	str	r0, [r4, #12]
 8008f0c:	2104      	movs	r1, #4
 8008f0e:	6860      	ldr	r0, [r4, #4]
 8008f10:	f7ff ff82 	bl	8008e18 <std>
 8008f14:	68a0      	ldr	r0, [r4, #8]
 8008f16:	2201      	movs	r2, #1
 8008f18:	2109      	movs	r1, #9
 8008f1a:	f7ff ff7d 	bl	8008e18 <std>
 8008f1e:	68e0      	ldr	r0, [r4, #12]
 8008f20:	2202      	movs	r2, #2
 8008f22:	2112      	movs	r1, #18
 8008f24:	f7ff ff78 	bl	8008e18 <std>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	61a3      	str	r3, [r4, #24]
 8008f2c:	e7d2      	b.n	8008ed4 <__sinit+0xc>
 8008f2e:	bf00      	nop
 8008f30:	0800bdec 	.word	0x0800bdec
 8008f34:	08008e61 	.word	0x08008e61

08008f38 <__sfp>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	f7ff ffac 	bl	8008e98 <__sfp_lock_acquire>
 8008f40:	4b1e      	ldr	r3, [pc, #120]	; (8008fbc <__sfp+0x84>)
 8008f42:	681e      	ldr	r6, [r3, #0]
 8008f44:	69b3      	ldr	r3, [r6, #24]
 8008f46:	b913      	cbnz	r3, 8008f4e <__sfp+0x16>
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f7ff ffbd 	bl	8008ec8 <__sinit>
 8008f4e:	3648      	adds	r6, #72	; 0x48
 8008f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	d503      	bpl.n	8008f60 <__sfp+0x28>
 8008f58:	6833      	ldr	r3, [r6, #0]
 8008f5a:	b30b      	cbz	r3, 8008fa0 <__sfp+0x68>
 8008f5c:	6836      	ldr	r6, [r6, #0]
 8008f5e:	e7f7      	b.n	8008f50 <__sfp+0x18>
 8008f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f64:	b9d5      	cbnz	r5, 8008f9c <__sfp+0x64>
 8008f66:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <__sfp+0x88>)
 8008f68:	60e3      	str	r3, [r4, #12]
 8008f6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f6e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f70:	f000 f86c 	bl	800904c <__retarget_lock_init_recursive>
 8008f74:	f7ff ff96 	bl	8008ea4 <__sfp_lock_release>
 8008f78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f80:	6025      	str	r5, [r4, #0]
 8008f82:	61a5      	str	r5, [r4, #24]
 8008f84:	2208      	movs	r2, #8
 8008f86:	4629      	mov	r1, r5
 8008f88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f8c:	f000 f86f 	bl	800906e <memset>
 8008f90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f98:	4620      	mov	r0, r4
 8008f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f9c:	3468      	adds	r4, #104	; 0x68
 8008f9e:	e7d9      	b.n	8008f54 <__sfp+0x1c>
 8008fa0:	2104      	movs	r1, #4
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	f7ff ff62 	bl	8008e6c <__sfmoreglue>
 8008fa8:	4604      	mov	r4, r0
 8008faa:	6030      	str	r0, [r6, #0]
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d1d5      	bne.n	8008f5c <__sfp+0x24>
 8008fb0:	f7ff ff78 	bl	8008ea4 <__sfp_lock_release>
 8008fb4:	230c      	movs	r3, #12
 8008fb6:	603b      	str	r3, [r7, #0]
 8008fb8:	e7ee      	b.n	8008f98 <__sfp+0x60>
 8008fba:	bf00      	nop
 8008fbc:	0800bdec 	.word	0x0800bdec
 8008fc0:	ffff0001 	.word	0xffff0001

08008fc4 <_fwalk_reent>:
 8008fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	4606      	mov	r6, r0
 8008fca:	4688      	mov	r8, r1
 8008fcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fd0:	2700      	movs	r7, #0
 8008fd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fd6:	f1b9 0901 	subs.w	r9, r9, #1
 8008fda:	d505      	bpl.n	8008fe8 <_fwalk_reent+0x24>
 8008fdc:	6824      	ldr	r4, [r4, #0]
 8008fde:	2c00      	cmp	r4, #0
 8008fe0:	d1f7      	bne.n	8008fd2 <_fwalk_reent+0xe>
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fe8:	89ab      	ldrh	r3, [r5, #12]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d907      	bls.n	8008ffe <_fwalk_reent+0x3a>
 8008fee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	d003      	beq.n	8008ffe <_fwalk_reent+0x3a>
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	47c0      	blx	r8
 8008ffc:	4307      	orrs	r7, r0
 8008ffe:	3568      	adds	r5, #104	; 0x68
 8009000:	e7e9      	b.n	8008fd6 <_fwalk_reent+0x12>
	...

08009004 <__libc_init_array>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4d0d      	ldr	r5, [pc, #52]	; (800903c <__libc_init_array+0x38>)
 8009008:	4c0d      	ldr	r4, [pc, #52]	; (8009040 <__libc_init_array+0x3c>)
 800900a:	1b64      	subs	r4, r4, r5
 800900c:	10a4      	asrs	r4, r4, #2
 800900e:	2600      	movs	r6, #0
 8009010:	42a6      	cmp	r6, r4
 8009012:	d109      	bne.n	8009028 <__libc_init_array+0x24>
 8009014:	4d0b      	ldr	r5, [pc, #44]	; (8009044 <__libc_init_array+0x40>)
 8009016:	4c0c      	ldr	r4, [pc, #48]	; (8009048 <__libc_init_array+0x44>)
 8009018:	f002 fdf8 	bl	800bc0c <_init>
 800901c:	1b64      	subs	r4, r4, r5
 800901e:	10a4      	asrs	r4, r4, #2
 8009020:	2600      	movs	r6, #0
 8009022:	42a6      	cmp	r6, r4
 8009024:	d105      	bne.n	8009032 <__libc_init_array+0x2e>
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	f855 3b04 	ldr.w	r3, [r5], #4
 800902c:	4798      	blx	r3
 800902e:	3601      	adds	r6, #1
 8009030:	e7ee      	b.n	8009010 <__libc_init_array+0xc>
 8009032:	f855 3b04 	ldr.w	r3, [r5], #4
 8009036:	4798      	blx	r3
 8009038:	3601      	adds	r6, #1
 800903a:	e7f2      	b.n	8009022 <__libc_init_array+0x1e>
 800903c:	0800c1c4 	.word	0x0800c1c4
 8009040:	0800c1c4 	.word	0x0800c1c4
 8009044:	0800c1c4 	.word	0x0800c1c4
 8009048:	0800c1c8 	.word	0x0800c1c8

0800904c <__retarget_lock_init_recursive>:
 800904c:	4770      	bx	lr

0800904e <__retarget_lock_acquire_recursive>:
 800904e:	4770      	bx	lr

08009050 <__retarget_lock_release_recursive>:
 8009050:	4770      	bx	lr

08009052 <memcpy>:
 8009052:	440a      	add	r2, r1
 8009054:	4291      	cmp	r1, r2
 8009056:	f100 33ff 	add.w	r3, r0, #4294967295
 800905a:	d100      	bne.n	800905e <memcpy+0xc>
 800905c:	4770      	bx	lr
 800905e:	b510      	push	{r4, lr}
 8009060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009068:	4291      	cmp	r1, r2
 800906a:	d1f9      	bne.n	8009060 <memcpy+0xe>
 800906c:	bd10      	pop	{r4, pc}

0800906e <memset>:
 800906e:	4402      	add	r2, r0
 8009070:	4603      	mov	r3, r0
 8009072:	4293      	cmp	r3, r2
 8009074:	d100      	bne.n	8009078 <memset+0xa>
 8009076:	4770      	bx	lr
 8009078:	f803 1b01 	strb.w	r1, [r3], #1
 800907c:	e7f9      	b.n	8009072 <memset+0x4>
	...

08009080 <sbrk_aligned>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	4e0e      	ldr	r6, [pc, #56]	; (80090bc <sbrk_aligned+0x3c>)
 8009084:	460c      	mov	r4, r1
 8009086:	6831      	ldr	r1, [r6, #0]
 8009088:	4605      	mov	r5, r0
 800908a:	b911      	cbnz	r1, 8009092 <sbrk_aligned+0x12>
 800908c:	f000 f8f6 	bl	800927c <_sbrk_r>
 8009090:	6030      	str	r0, [r6, #0]
 8009092:	4621      	mov	r1, r4
 8009094:	4628      	mov	r0, r5
 8009096:	f000 f8f1 	bl	800927c <_sbrk_r>
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	d00a      	beq.n	80090b4 <sbrk_aligned+0x34>
 800909e:	1cc4      	adds	r4, r0, #3
 80090a0:	f024 0403 	bic.w	r4, r4, #3
 80090a4:	42a0      	cmp	r0, r4
 80090a6:	d007      	beq.n	80090b8 <sbrk_aligned+0x38>
 80090a8:	1a21      	subs	r1, r4, r0
 80090aa:	4628      	mov	r0, r5
 80090ac:	f000 f8e6 	bl	800927c <_sbrk_r>
 80090b0:	3001      	adds	r0, #1
 80090b2:	d101      	bne.n	80090b8 <sbrk_aligned+0x38>
 80090b4:	f04f 34ff 	mov.w	r4, #4294967295
 80090b8:	4620      	mov	r0, r4
 80090ba:	bd70      	pop	{r4, r5, r6, pc}
 80090bc:	20005654 	.word	0x20005654

080090c0 <_malloc_r>:
 80090c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c4:	1ccd      	adds	r5, r1, #3
 80090c6:	f025 0503 	bic.w	r5, r5, #3
 80090ca:	3508      	adds	r5, #8
 80090cc:	2d0c      	cmp	r5, #12
 80090ce:	bf38      	it	cc
 80090d0:	250c      	movcc	r5, #12
 80090d2:	2d00      	cmp	r5, #0
 80090d4:	4607      	mov	r7, r0
 80090d6:	db01      	blt.n	80090dc <_malloc_r+0x1c>
 80090d8:	42a9      	cmp	r1, r5
 80090da:	d905      	bls.n	80090e8 <_malloc_r+0x28>
 80090dc:	230c      	movs	r3, #12
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	2600      	movs	r6, #0
 80090e2:	4630      	mov	r0, r6
 80090e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e8:	4e2e      	ldr	r6, [pc, #184]	; (80091a4 <_malloc_r+0xe4>)
 80090ea:	f001 fb83 	bl	800a7f4 <__malloc_lock>
 80090ee:	6833      	ldr	r3, [r6, #0]
 80090f0:	461c      	mov	r4, r3
 80090f2:	bb34      	cbnz	r4, 8009142 <_malloc_r+0x82>
 80090f4:	4629      	mov	r1, r5
 80090f6:	4638      	mov	r0, r7
 80090f8:	f7ff ffc2 	bl	8009080 <sbrk_aligned>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	4604      	mov	r4, r0
 8009100:	d14d      	bne.n	800919e <_malloc_r+0xde>
 8009102:	6834      	ldr	r4, [r6, #0]
 8009104:	4626      	mov	r6, r4
 8009106:	2e00      	cmp	r6, #0
 8009108:	d140      	bne.n	800918c <_malloc_r+0xcc>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	4631      	mov	r1, r6
 800910e:	4638      	mov	r0, r7
 8009110:	eb04 0803 	add.w	r8, r4, r3
 8009114:	f000 f8b2 	bl	800927c <_sbrk_r>
 8009118:	4580      	cmp	r8, r0
 800911a:	d13a      	bne.n	8009192 <_malloc_r+0xd2>
 800911c:	6821      	ldr	r1, [r4, #0]
 800911e:	3503      	adds	r5, #3
 8009120:	1a6d      	subs	r5, r5, r1
 8009122:	f025 0503 	bic.w	r5, r5, #3
 8009126:	3508      	adds	r5, #8
 8009128:	2d0c      	cmp	r5, #12
 800912a:	bf38      	it	cc
 800912c:	250c      	movcc	r5, #12
 800912e:	4629      	mov	r1, r5
 8009130:	4638      	mov	r0, r7
 8009132:	f7ff ffa5 	bl	8009080 <sbrk_aligned>
 8009136:	3001      	adds	r0, #1
 8009138:	d02b      	beq.n	8009192 <_malloc_r+0xd2>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	442b      	add	r3, r5
 800913e:	6023      	str	r3, [r4, #0]
 8009140:	e00e      	b.n	8009160 <_malloc_r+0xa0>
 8009142:	6822      	ldr	r2, [r4, #0]
 8009144:	1b52      	subs	r2, r2, r5
 8009146:	d41e      	bmi.n	8009186 <_malloc_r+0xc6>
 8009148:	2a0b      	cmp	r2, #11
 800914a:	d916      	bls.n	800917a <_malloc_r+0xba>
 800914c:	1961      	adds	r1, r4, r5
 800914e:	42a3      	cmp	r3, r4
 8009150:	6025      	str	r5, [r4, #0]
 8009152:	bf18      	it	ne
 8009154:	6059      	strne	r1, [r3, #4]
 8009156:	6863      	ldr	r3, [r4, #4]
 8009158:	bf08      	it	eq
 800915a:	6031      	streq	r1, [r6, #0]
 800915c:	5162      	str	r2, [r4, r5]
 800915e:	604b      	str	r3, [r1, #4]
 8009160:	4638      	mov	r0, r7
 8009162:	f104 060b 	add.w	r6, r4, #11
 8009166:	f001 fb4b 	bl	800a800 <__malloc_unlock>
 800916a:	f026 0607 	bic.w	r6, r6, #7
 800916e:	1d23      	adds	r3, r4, #4
 8009170:	1af2      	subs	r2, r6, r3
 8009172:	d0b6      	beq.n	80090e2 <_malloc_r+0x22>
 8009174:	1b9b      	subs	r3, r3, r6
 8009176:	50a3      	str	r3, [r4, r2]
 8009178:	e7b3      	b.n	80090e2 <_malloc_r+0x22>
 800917a:	6862      	ldr	r2, [r4, #4]
 800917c:	42a3      	cmp	r3, r4
 800917e:	bf0c      	ite	eq
 8009180:	6032      	streq	r2, [r6, #0]
 8009182:	605a      	strne	r2, [r3, #4]
 8009184:	e7ec      	b.n	8009160 <_malloc_r+0xa0>
 8009186:	4623      	mov	r3, r4
 8009188:	6864      	ldr	r4, [r4, #4]
 800918a:	e7b2      	b.n	80090f2 <_malloc_r+0x32>
 800918c:	4634      	mov	r4, r6
 800918e:	6876      	ldr	r6, [r6, #4]
 8009190:	e7b9      	b.n	8009106 <_malloc_r+0x46>
 8009192:	230c      	movs	r3, #12
 8009194:	603b      	str	r3, [r7, #0]
 8009196:	4638      	mov	r0, r7
 8009198:	f001 fb32 	bl	800a800 <__malloc_unlock>
 800919c:	e7a1      	b.n	80090e2 <_malloc_r+0x22>
 800919e:	6025      	str	r5, [r4, #0]
 80091a0:	e7de      	b.n	8009160 <_malloc_r+0xa0>
 80091a2:	bf00      	nop
 80091a4:	20005650 	.word	0x20005650

080091a8 <cleanup_glue>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	460c      	mov	r4, r1
 80091ac:	6809      	ldr	r1, [r1, #0]
 80091ae:	4605      	mov	r5, r0
 80091b0:	b109      	cbz	r1, 80091b6 <cleanup_glue+0xe>
 80091b2:	f7ff fff9 	bl	80091a8 <cleanup_glue>
 80091b6:	4621      	mov	r1, r4
 80091b8:	4628      	mov	r0, r5
 80091ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091be:	f001 bff9 	b.w	800b1b4 <_free_r>
	...

080091c4 <_reclaim_reent>:
 80091c4:	4b2c      	ldr	r3, [pc, #176]	; (8009278 <_reclaim_reent+0xb4>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4283      	cmp	r3, r0
 80091ca:	b570      	push	{r4, r5, r6, lr}
 80091cc:	4604      	mov	r4, r0
 80091ce:	d051      	beq.n	8009274 <_reclaim_reent+0xb0>
 80091d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091d2:	b143      	cbz	r3, 80091e6 <_reclaim_reent+0x22>
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d14a      	bne.n	8009270 <_reclaim_reent+0xac>
 80091da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091dc:	6819      	ldr	r1, [r3, #0]
 80091de:	b111      	cbz	r1, 80091e6 <_reclaim_reent+0x22>
 80091e0:	4620      	mov	r0, r4
 80091e2:	f001 ffe7 	bl	800b1b4 <_free_r>
 80091e6:	6961      	ldr	r1, [r4, #20]
 80091e8:	b111      	cbz	r1, 80091f0 <_reclaim_reent+0x2c>
 80091ea:	4620      	mov	r0, r4
 80091ec:	f001 ffe2 	bl	800b1b4 <_free_r>
 80091f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091f2:	b111      	cbz	r1, 80091fa <_reclaim_reent+0x36>
 80091f4:	4620      	mov	r0, r4
 80091f6:	f001 ffdd 	bl	800b1b4 <_free_r>
 80091fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091fc:	b111      	cbz	r1, 8009204 <_reclaim_reent+0x40>
 80091fe:	4620      	mov	r0, r4
 8009200:	f001 ffd8 	bl	800b1b4 <_free_r>
 8009204:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009206:	b111      	cbz	r1, 800920e <_reclaim_reent+0x4a>
 8009208:	4620      	mov	r0, r4
 800920a:	f001 ffd3 	bl	800b1b4 <_free_r>
 800920e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009210:	b111      	cbz	r1, 8009218 <_reclaim_reent+0x54>
 8009212:	4620      	mov	r0, r4
 8009214:	f001 ffce 	bl	800b1b4 <_free_r>
 8009218:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800921a:	b111      	cbz	r1, 8009222 <_reclaim_reent+0x5e>
 800921c:	4620      	mov	r0, r4
 800921e:	f001 ffc9 	bl	800b1b4 <_free_r>
 8009222:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009224:	b111      	cbz	r1, 800922c <_reclaim_reent+0x68>
 8009226:	4620      	mov	r0, r4
 8009228:	f001 ffc4 	bl	800b1b4 <_free_r>
 800922c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800922e:	b111      	cbz	r1, 8009236 <_reclaim_reent+0x72>
 8009230:	4620      	mov	r0, r4
 8009232:	f001 ffbf 	bl	800b1b4 <_free_r>
 8009236:	69a3      	ldr	r3, [r4, #24]
 8009238:	b1e3      	cbz	r3, 8009274 <_reclaim_reent+0xb0>
 800923a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800923c:	4620      	mov	r0, r4
 800923e:	4798      	blx	r3
 8009240:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009242:	b1b9      	cbz	r1, 8009274 <_reclaim_reent+0xb0>
 8009244:	4620      	mov	r0, r4
 8009246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800924a:	f7ff bfad 	b.w	80091a8 <cleanup_glue>
 800924e:	5949      	ldr	r1, [r1, r5]
 8009250:	b941      	cbnz	r1, 8009264 <_reclaim_reent+0xa0>
 8009252:	3504      	adds	r5, #4
 8009254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009256:	2d80      	cmp	r5, #128	; 0x80
 8009258:	68d9      	ldr	r1, [r3, #12]
 800925a:	d1f8      	bne.n	800924e <_reclaim_reent+0x8a>
 800925c:	4620      	mov	r0, r4
 800925e:	f001 ffa9 	bl	800b1b4 <_free_r>
 8009262:	e7ba      	b.n	80091da <_reclaim_reent+0x16>
 8009264:	680e      	ldr	r6, [r1, #0]
 8009266:	4620      	mov	r0, r4
 8009268:	f001 ffa4 	bl	800b1b4 <_free_r>
 800926c:	4631      	mov	r1, r6
 800926e:	e7ef      	b.n	8009250 <_reclaim_reent+0x8c>
 8009270:	2500      	movs	r5, #0
 8009272:	e7ef      	b.n	8009254 <_reclaim_reent+0x90>
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	bf00      	nop
 8009278:	20000010 	.word	0x20000010

0800927c <_sbrk_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d06      	ldr	r5, [pc, #24]	; (8009298 <_sbrk_r+0x1c>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	f7f8 fd0e 	bl	8001ca8 <_sbrk>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_sbrk_r+0x1a>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_sbrk_r+0x1a>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	20005658 	.word	0x20005658

0800929c <__sread>:
 800929c:	b510      	push	{r4, lr}
 800929e:	460c      	mov	r4, r1
 80092a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a4:	f001 ffd2 	bl	800b24c <_read_r>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	bfab      	itete	ge
 80092ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092ae:	89a3      	ldrhlt	r3, [r4, #12]
 80092b0:	181b      	addge	r3, r3, r0
 80092b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092b6:	bfac      	ite	ge
 80092b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80092ba:	81a3      	strhlt	r3, [r4, #12]
 80092bc:	bd10      	pop	{r4, pc}

080092be <__swrite>:
 80092be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c2:	461f      	mov	r7, r3
 80092c4:	898b      	ldrh	r3, [r1, #12]
 80092c6:	05db      	lsls	r3, r3, #23
 80092c8:	4605      	mov	r5, r0
 80092ca:	460c      	mov	r4, r1
 80092cc:	4616      	mov	r6, r2
 80092ce:	d505      	bpl.n	80092dc <__swrite+0x1e>
 80092d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d4:	2302      	movs	r3, #2
 80092d6:	2200      	movs	r2, #0
 80092d8:	f001 fa68 	bl	800a7ac <_lseek_r>
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	4632      	mov	r2, r6
 80092ea:	463b      	mov	r3, r7
 80092ec:	4628      	mov	r0, r5
 80092ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092f2:	f000 be07 	b.w	8009f04 <_write_r>

080092f6 <__sseek>:
 80092f6:	b510      	push	{r4, lr}
 80092f8:	460c      	mov	r4, r1
 80092fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fe:	f001 fa55 	bl	800a7ac <_lseek_r>
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	bf15      	itete	ne
 8009308:	6560      	strne	r0, [r4, #84]	; 0x54
 800930a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800930e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009312:	81a3      	strheq	r3, [r4, #12]
 8009314:	bf18      	it	ne
 8009316:	81a3      	strhne	r3, [r4, #12]
 8009318:	bd10      	pop	{r4, pc}

0800931a <__sclose>:
 800931a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931e:	f000 be03 	b.w	8009f28 <_close_r>

08009322 <strncmp>:
 8009322:	b510      	push	{r4, lr}
 8009324:	b17a      	cbz	r2, 8009346 <strncmp+0x24>
 8009326:	4603      	mov	r3, r0
 8009328:	3901      	subs	r1, #1
 800932a:	1884      	adds	r4, r0, r2
 800932c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009330:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009334:	4290      	cmp	r0, r2
 8009336:	d101      	bne.n	800933c <strncmp+0x1a>
 8009338:	42a3      	cmp	r3, r4
 800933a:	d101      	bne.n	8009340 <strncmp+0x1e>
 800933c:	1a80      	subs	r0, r0, r2
 800933e:	bd10      	pop	{r4, pc}
 8009340:	2800      	cmp	r0, #0
 8009342:	d1f3      	bne.n	800932c <strncmp+0xa>
 8009344:	e7fa      	b.n	800933c <strncmp+0x1a>
 8009346:	4610      	mov	r0, r2
 8009348:	e7f9      	b.n	800933e <strncmp+0x1c>

0800934a <sulp>:
 800934a:	b570      	push	{r4, r5, r6, lr}
 800934c:	4604      	mov	r4, r0
 800934e:	460d      	mov	r5, r1
 8009350:	4616      	mov	r6, r2
 8009352:	ec45 4b10 	vmov	d0, r4, r5
 8009356:	f001 fdcb 	bl	800aef0 <__ulp>
 800935a:	b17e      	cbz	r6, 800937c <sulp+0x32>
 800935c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009360:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd09      	ble.n	800937c <sulp+0x32>
 8009368:	051b      	lsls	r3, r3, #20
 800936a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800936e:	2000      	movs	r0, #0
 8009370:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009374:	ec41 0b17 	vmov	d7, r0, r1
 8009378:	ee20 0b07 	vmul.f64	d0, d0, d7
 800937c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009380 <_strtod_l>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	ed2d 8b0e 	vpush	{d8-d14}
 8009388:	b097      	sub	sp, #92	; 0x5c
 800938a:	461f      	mov	r7, r3
 800938c:	2300      	movs	r3, #0
 800938e:	9312      	str	r3, [sp, #72]	; 0x48
 8009390:	4ba1      	ldr	r3, [pc, #644]	; (8009618 <_strtod_l+0x298>)
 8009392:	920d      	str	r2, [sp, #52]	; 0x34
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	4604      	mov	r4, r0
 800939a:	4618      	mov	r0, r3
 800939c:	468b      	mov	fp, r1
 800939e:	f7f6 ff4f 	bl	8000240 <strlen>
 80093a2:	f04f 0800 	mov.w	r8, #0
 80093a6:	4605      	mov	r5, r0
 80093a8:	f04f 0900 	mov.w	r9, #0
 80093ac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80093b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093b2:	7813      	ldrb	r3, [r2, #0]
 80093b4:	2b2b      	cmp	r3, #43	; 0x2b
 80093b6:	d04d      	beq.n	8009454 <_strtod_l+0xd4>
 80093b8:	d83a      	bhi.n	8009430 <_strtod_l+0xb0>
 80093ba:	2b0d      	cmp	r3, #13
 80093bc:	d833      	bhi.n	8009426 <_strtod_l+0xa6>
 80093be:	2b08      	cmp	r3, #8
 80093c0:	d833      	bhi.n	800942a <_strtod_l+0xaa>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d03d      	beq.n	8009442 <_strtod_l+0xc2>
 80093c6:	2300      	movs	r3, #0
 80093c8:	9308      	str	r3, [sp, #32]
 80093ca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80093cc:	7833      	ldrb	r3, [r6, #0]
 80093ce:	2b30      	cmp	r3, #48	; 0x30
 80093d0:	f040 80b0 	bne.w	8009534 <_strtod_l+0x1b4>
 80093d4:	7873      	ldrb	r3, [r6, #1]
 80093d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093da:	2b58      	cmp	r3, #88	; 0x58
 80093dc:	d167      	bne.n	80094ae <_strtod_l+0x12e>
 80093de:	9b08      	ldr	r3, [sp, #32]
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	ab12      	add	r3, sp, #72	; 0x48
 80093e4:	9702      	str	r7, [sp, #8]
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	4a8c      	ldr	r2, [pc, #560]	; (800961c <_strtod_l+0x29c>)
 80093ea:	ab13      	add	r3, sp, #76	; 0x4c
 80093ec:	a911      	add	r1, sp, #68	; 0x44
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 fed4 	bl	800a19c <__gethex>
 80093f4:	f010 0507 	ands.w	r5, r0, #7
 80093f8:	4607      	mov	r7, r0
 80093fa:	d005      	beq.n	8009408 <_strtod_l+0x88>
 80093fc:	2d06      	cmp	r5, #6
 80093fe:	d12b      	bne.n	8009458 <_strtod_l+0xd8>
 8009400:	3601      	adds	r6, #1
 8009402:	2300      	movs	r3, #0
 8009404:	9611      	str	r6, [sp, #68]	; 0x44
 8009406:	9308      	str	r3, [sp, #32]
 8009408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800940a:	2b00      	cmp	r3, #0
 800940c:	f040 854e 	bne.w	8009eac <_strtod_l+0xb2c>
 8009410:	9b08      	ldr	r3, [sp, #32]
 8009412:	b1e3      	cbz	r3, 800944e <_strtod_l+0xce>
 8009414:	ec49 8b17 	vmov	d7, r8, r9
 8009418:	eeb1 0b47 	vneg.f64	d0, d7
 800941c:	b017      	add	sp, #92	; 0x5c
 800941e:	ecbd 8b0e 	vpop	{d8-d14}
 8009422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009426:	2b20      	cmp	r3, #32
 8009428:	d1cd      	bne.n	80093c6 <_strtod_l+0x46>
 800942a:	3201      	adds	r2, #1
 800942c:	9211      	str	r2, [sp, #68]	; 0x44
 800942e:	e7bf      	b.n	80093b0 <_strtod_l+0x30>
 8009430:	2b2d      	cmp	r3, #45	; 0x2d
 8009432:	d1c8      	bne.n	80093c6 <_strtod_l+0x46>
 8009434:	2301      	movs	r3, #1
 8009436:	9308      	str	r3, [sp, #32]
 8009438:	1c53      	adds	r3, r2, #1
 800943a:	9311      	str	r3, [sp, #68]	; 0x44
 800943c:	7853      	ldrb	r3, [r2, #1]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1c3      	bne.n	80093ca <_strtod_l+0x4a>
 8009442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009444:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009448:	2b00      	cmp	r3, #0
 800944a:	f040 852d 	bne.w	8009ea8 <_strtod_l+0xb28>
 800944e:	ec49 8b10 	vmov	d0, r8, r9
 8009452:	e7e3      	b.n	800941c <_strtod_l+0x9c>
 8009454:	2300      	movs	r3, #0
 8009456:	e7ee      	b.n	8009436 <_strtod_l+0xb6>
 8009458:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800945a:	b13a      	cbz	r2, 800946c <_strtod_l+0xec>
 800945c:	2135      	movs	r1, #53	; 0x35
 800945e:	a814      	add	r0, sp, #80	; 0x50
 8009460:	f001 fe4e 	bl	800b100 <__copybits>
 8009464:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009466:	4620      	mov	r0, r4
 8009468:	f001 fa10 	bl	800a88c <_Bfree>
 800946c:	3d01      	subs	r5, #1
 800946e:	2d04      	cmp	r5, #4
 8009470:	d806      	bhi.n	8009480 <_strtod_l+0x100>
 8009472:	e8df f005 	tbb	[pc, r5]
 8009476:	030a      	.short	0x030a
 8009478:	1714      	.short	0x1714
 800947a:	0a          	.byte	0x0a
 800947b:	00          	.byte	0x00
 800947c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8009480:	073f      	lsls	r7, r7, #28
 8009482:	d5c1      	bpl.n	8009408 <_strtod_l+0x88>
 8009484:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009488:	e7be      	b.n	8009408 <_strtod_l+0x88>
 800948a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800948e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009490:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009494:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009498:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800949c:	e7f0      	b.n	8009480 <_strtod_l+0x100>
 800949e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8009620 <_strtod_l+0x2a0>
 80094a2:	e7ed      	b.n	8009480 <_strtod_l+0x100>
 80094a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80094a8:	f04f 38ff 	mov.w	r8, #4294967295
 80094ac:	e7e8      	b.n	8009480 <_strtod_l+0x100>
 80094ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	9211      	str	r2, [sp, #68]	; 0x44
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	2b30      	cmp	r3, #48	; 0x30
 80094b8:	d0f9      	beq.n	80094ae <_strtod_l+0x12e>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0a4      	beq.n	8009408 <_strtod_l+0x88>
 80094be:	2301      	movs	r3, #1
 80094c0:	f04f 0a00 	mov.w	sl, #0
 80094c4:	9304      	str	r3, [sp, #16]
 80094c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094c8:	930a      	str	r3, [sp, #40]	; 0x28
 80094ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80094ce:	f8cd a018 	str.w	sl, [sp, #24]
 80094d2:	220a      	movs	r2, #10
 80094d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80094d6:	7807      	ldrb	r7, [r0, #0]
 80094d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80094dc:	b2d9      	uxtb	r1, r3
 80094de:	2909      	cmp	r1, #9
 80094e0:	d92a      	bls.n	8009538 <_strtod_l+0x1b8>
 80094e2:	9907      	ldr	r1, [sp, #28]
 80094e4:	462a      	mov	r2, r5
 80094e6:	f7ff ff1c 	bl	8009322 <strncmp>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d033      	beq.n	8009556 <_strtod_l+0x1d6>
 80094ee:	2000      	movs	r0, #0
 80094f0:	9b06      	ldr	r3, [sp, #24]
 80094f2:	463a      	mov	r2, r7
 80094f4:	4601      	mov	r1, r0
 80094f6:	4607      	mov	r7, r0
 80094f8:	2a65      	cmp	r2, #101	; 0x65
 80094fa:	d001      	beq.n	8009500 <_strtod_l+0x180>
 80094fc:	2a45      	cmp	r2, #69	; 0x45
 80094fe:	d117      	bne.n	8009530 <_strtod_l+0x1b0>
 8009500:	b91b      	cbnz	r3, 800950a <_strtod_l+0x18a>
 8009502:	9b04      	ldr	r3, [sp, #16]
 8009504:	4303      	orrs	r3, r0
 8009506:	d09c      	beq.n	8009442 <_strtod_l+0xc2>
 8009508:	2300      	movs	r3, #0
 800950a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800950e:	f10b 0201 	add.w	r2, fp, #1
 8009512:	9211      	str	r2, [sp, #68]	; 0x44
 8009514:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8009518:	2a2b      	cmp	r2, #43	; 0x2b
 800951a:	d071      	beq.n	8009600 <_strtod_l+0x280>
 800951c:	2a2d      	cmp	r2, #45	; 0x2d
 800951e:	d077      	beq.n	8009610 <_strtod_l+0x290>
 8009520:	f04f 0e00 	mov.w	lr, #0
 8009524:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009528:	2d09      	cmp	r5, #9
 800952a:	d97f      	bls.n	800962c <_strtod_l+0x2ac>
 800952c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009530:	2500      	movs	r5, #0
 8009532:	e09b      	b.n	800966c <_strtod_l+0x2ec>
 8009534:	2300      	movs	r3, #0
 8009536:	e7c3      	b.n	80094c0 <_strtod_l+0x140>
 8009538:	9906      	ldr	r1, [sp, #24]
 800953a:	2908      	cmp	r1, #8
 800953c:	bfdd      	ittte	le
 800953e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009540:	fb02 3301 	mlale	r3, r2, r1, r3
 8009544:	9309      	strle	r3, [sp, #36]	; 0x24
 8009546:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800954a:	9b06      	ldr	r3, [sp, #24]
 800954c:	3001      	adds	r0, #1
 800954e:	3301      	adds	r3, #1
 8009550:	9306      	str	r3, [sp, #24]
 8009552:	9011      	str	r0, [sp, #68]	; 0x44
 8009554:	e7be      	b.n	80094d4 <_strtod_l+0x154>
 8009556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009558:	195a      	adds	r2, r3, r5
 800955a:	9211      	str	r2, [sp, #68]	; 0x44
 800955c:	5d5a      	ldrb	r2, [r3, r5]
 800955e:	9b06      	ldr	r3, [sp, #24]
 8009560:	b3a3      	cbz	r3, 80095cc <_strtod_l+0x24c>
 8009562:	4607      	mov	r7, r0
 8009564:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009568:	2909      	cmp	r1, #9
 800956a:	d912      	bls.n	8009592 <_strtod_l+0x212>
 800956c:	2101      	movs	r1, #1
 800956e:	e7c3      	b.n	80094f8 <_strtod_l+0x178>
 8009570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	9211      	str	r2, [sp, #68]	; 0x44
 8009576:	785a      	ldrb	r2, [r3, #1]
 8009578:	3001      	adds	r0, #1
 800957a:	2a30      	cmp	r2, #48	; 0x30
 800957c:	d0f8      	beq.n	8009570 <_strtod_l+0x1f0>
 800957e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009582:	2b08      	cmp	r3, #8
 8009584:	f200 8497 	bhi.w	8009eb6 <_strtod_l+0xb36>
 8009588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800958a:	930a      	str	r3, [sp, #40]	; 0x28
 800958c:	4607      	mov	r7, r0
 800958e:	2000      	movs	r0, #0
 8009590:	4603      	mov	r3, r0
 8009592:	3a30      	subs	r2, #48	; 0x30
 8009594:	f100 0101 	add.w	r1, r0, #1
 8009598:	d012      	beq.n	80095c0 <_strtod_l+0x240>
 800959a:	440f      	add	r7, r1
 800959c:	eb00 0c03 	add.w	ip, r0, r3
 80095a0:	4619      	mov	r1, r3
 80095a2:	250a      	movs	r5, #10
 80095a4:	4561      	cmp	r1, ip
 80095a6:	d113      	bne.n	80095d0 <_strtod_l+0x250>
 80095a8:	1819      	adds	r1, r3, r0
 80095aa:	2908      	cmp	r1, #8
 80095ac:	f103 0301 	add.w	r3, r3, #1
 80095b0:	4403      	add	r3, r0
 80095b2:	dc1c      	bgt.n	80095ee <_strtod_l+0x26e>
 80095b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095b6:	210a      	movs	r1, #10
 80095b8:	fb01 2200 	mla	r2, r1, r0, r2
 80095bc:	9209      	str	r2, [sp, #36]	; 0x24
 80095be:	2100      	movs	r1, #0
 80095c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095c2:	1c50      	adds	r0, r2, #1
 80095c4:	9011      	str	r0, [sp, #68]	; 0x44
 80095c6:	7852      	ldrb	r2, [r2, #1]
 80095c8:	4608      	mov	r0, r1
 80095ca:	e7cb      	b.n	8009564 <_strtod_l+0x1e4>
 80095cc:	9806      	ldr	r0, [sp, #24]
 80095ce:	e7d4      	b.n	800957a <_strtod_l+0x1fa>
 80095d0:	2908      	cmp	r1, #8
 80095d2:	dc04      	bgt.n	80095de <_strtod_l+0x25e>
 80095d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80095d6:	436e      	muls	r6, r5
 80095d8:	9609      	str	r6, [sp, #36]	; 0x24
 80095da:	3101      	adds	r1, #1
 80095dc:	e7e2      	b.n	80095a4 <_strtod_l+0x224>
 80095de:	f101 0e01 	add.w	lr, r1, #1
 80095e2:	f1be 0f10 	cmp.w	lr, #16
 80095e6:	bfd8      	it	le
 80095e8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80095ec:	e7f5      	b.n	80095da <_strtod_l+0x25a>
 80095ee:	2b10      	cmp	r3, #16
 80095f0:	bfdc      	itt	le
 80095f2:	210a      	movle	r1, #10
 80095f4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80095f8:	e7e1      	b.n	80095be <_strtod_l+0x23e>
 80095fa:	2700      	movs	r7, #0
 80095fc:	2101      	movs	r1, #1
 80095fe:	e780      	b.n	8009502 <_strtod_l+0x182>
 8009600:	f04f 0e00 	mov.w	lr, #0
 8009604:	f10b 0202 	add.w	r2, fp, #2
 8009608:	9211      	str	r2, [sp, #68]	; 0x44
 800960a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800960e:	e789      	b.n	8009524 <_strtod_l+0x1a4>
 8009610:	f04f 0e01 	mov.w	lr, #1
 8009614:	e7f6      	b.n	8009604 <_strtod_l+0x284>
 8009616:	bf00      	nop
 8009618:	0800bec8 	.word	0x0800bec8
 800961c:	0800bdfc 	.word	0x0800bdfc
 8009620:	7ff00000 	.word	0x7ff00000
 8009624:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009626:	1c55      	adds	r5, r2, #1
 8009628:	9511      	str	r5, [sp, #68]	; 0x44
 800962a:	7852      	ldrb	r2, [r2, #1]
 800962c:	2a30      	cmp	r2, #48	; 0x30
 800962e:	d0f9      	beq.n	8009624 <_strtod_l+0x2a4>
 8009630:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009634:	2d08      	cmp	r5, #8
 8009636:	f63f af7b 	bhi.w	8009530 <_strtod_l+0x1b0>
 800963a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800963e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009640:	9207      	str	r2, [sp, #28]
 8009642:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009644:	1c55      	adds	r5, r2, #1
 8009646:	9511      	str	r5, [sp, #68]	; 0x44
 8009648:	7852      	ldrb	r2, [r2, #1]
 800964a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800964e:	2e09      	cmp	r6, #9
 8009650:	d937      	bls.n	80096c2 <_strtod_l+0x342>
 8009652:	9e07      	ldr	r6, [sp, #28]
 8009654:	1bad      	subs	r5, r5, r6
 8009656:	2d08      	cmp	r5, #8
 8009658:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800965c:	dc02      	bgt.n	8009664 <_strtod_l+0x2e4>
 800965e:	4565      	cmp	r5, ip
 8009660:	bfa8      	it	ge
 8009662:	4665      	movge	r5, ip
 8009664:	f1be 0f00 	cmp.w	lr, #0
 8009668:	d000      	beq.n	800966c <_strtod_l+0x2ec>
 800966a:	426d      	negs	r5, r5
 800966c:	2b00      	cmp	r3, #0
 800966e:	d14d      	bne.n	800970c <_strtod_l+0x38c>
 8009670:	9b04      	ldr	r3, [sp, #16]
 8009672:	4303      	orrs	r3, r0
 8009674:	f47f aec8 	bne.w	8009408 <_strtod_l+0x88>
 8009678:	2900      	cmp	r1, #0
 800967a:	f47f aee2 	bne.w	8009442 <_strtod_l+0xc2>
 800967e:	2a69      	cmp	r2, #105	; 0x69
 8009680:	d027      	beq.n	80096d2 <_strtod_l+0x352>
 8009682:	dc24      	bgt.n	80096ce <_strtod_l+0x34e>
 8009684:	2a49      	cmp	r2, #73	; 0x49
 8009686:	d024      	beq.n	80096d2 <_strtod_l+0x352>
 8009688:	2a4e      	cmp	r2, #78	; 0x4e
 800968a:	f47f aeda 	bne.w	8009442 <_strtod_l+0xc2>
 800968e:	4996      	ldr	r1, [pc, #600]	; (80098e8 <_strtod_l+0x568>)
 8009690:	a811      	add	r0, sp, #68	; 0x44
 8009692:	f000 ffdb 	bl	800a64c <__match>
 8009696:	2800      	cmp	r0, #0
 8009698:	f43f aed3 	beq.w	8009442 <_strtod_l+0xc2>
 800969c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b28      	cmp	r3, #40	; 0x28
 80096a2:	d12d      	bne.n	8009700 <_strtod_l+0x380>
 80096a4:	4991      	ldr	r1, [pc, #580]	; (80098ec <_strtod_l+0x56c>)
 80096a6:	aa14      	add	r2, sp, #80	; 0x50
 80096a8:	a811      	add	r0, sp, #68	; 0x44
 80096aa:	f000 ffe3 	bl	800a674 <__hexnan>
 80096ae:	2805      	cmp	r0, #5
 80096b0:	d126      	bne.n	8009700 <_strtod_l+0x380>
 80096b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096b4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80096b8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80096bc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80096c0:	e6a2      	b.n	8009408 <_strtod_l+0x88>
 80096c2:	250a      	movs	r5, #10
 80096c4:	fb05 250c 	mla	r5, r5, ip, r2
 80096c8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80096cc:	e7b9      	b.n	8009642 <_strtod_l+0x2c2>
 80096ce:	2a6e      	cmp	r2, #110	; 0x6e
 80096d0:	e7db      	b.n	800968a <_strtod_l+0x30a>
 80096d2:	4987      	ldr	r1, [pc, #540]	; (80098f0 <_strtod_l+0x570>)
 80096d4:	a811      	add	r0, sp, #68	; 0x44
 80096d6:	f000 ffb9 	bl	800a64c <__match>
 80096da:	2800      	cmp	r0, #0
 80096dc:	f43f aeb1 	beq.w	8009442 <_strtod_l+0xc2>
 80096e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096e2:	4984      	ldr	r1, [pc, #528]	; (80098f4 <_strtod_l+0x574>)
 80096e4:	3b01      	subs	r3, #1
 80096e6:	a811      	add	r0, sp, #68	; 0x44
 80096e8:	9311      	str	r3, [sp, #68]	; 0x44
 80096ea:	f000 ffaf 	bl	800a64c <__match>
 80096ee:	b910      	cbnz	r0, 80096f6 <_strtod_l+0x376>
 80096f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096f2:	3301      	adds	r3, #1
 80096f4:	9311      	str	r3, [sp, #68]	; 0x44
 80096f6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009908 <_strtod_l+0x588>
 80096fa:	f04f 0800 	mov.w	r8, #0
 80096fe:	e683      	b.n	8009408 <_strtod_l+0x88>
 8009700:	487d      	ldr	r0, [pc, #500]	; (80098f8 <_strtod_l+0x578>)
 8009702:	f001 fdb5 	bl	800b270 <nan>
 8009706:	ec59 8b10 	vmov	r8, r9, d0
 800970a:	e67d      	b.n	8009408 <_strtod_l+0x88>
 800970c:	1bea      	subs	r2, r5, r7
 800970e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8009712:	9207      	str	r2, [sp, #28]
 8009714:	9a06      	ldr	r2, [sp, #24]
 8009716:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800971a:	2a00      	cmp	r2, #0
 800971c:	bf08      	it	eq
 800971e:	461a      	moveq	r2, r3
 8009720:	2b10      	cmp	r3, #16
 8009722:	9206      	str	r2, [sp, #24]
 8009724:	461a      	mov	r2, r3
 8009726:	bfa8      	it	ge
 8009728:	2210      	movge	r2, #16
 800972a:	2b09      	cmp	r3, #9
 800972c:	ec59 8b17 	vmov	r8, r9, d7
 8009730:	dd0c      	ble.n	800974c <_strtod_l+0x3cc>
 8009732:	4972      	ldr	r1, [pc, #456]	; (80098fc <_strtod_l+0x57c>)
 8009734:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009738:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800973c:	ee06 aa90 	vmov	s13, sl
 8009740:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8009744:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009748:	ec59 8b16 	vmov	r8, r9, d6
 800974c:	2b0f      	cmp	r3, #15
 800974e:	dc36      	bgt.n	80097be <_strtod_l+0x43e>
 8009750:	9907      	ldr	r1, [sp, #28]
 8009752:	2900      	cmp	r1, #0
 8009754:	f43f ae58 	beq.w	8009408 <_strtod_l+0x88>
 8009758:	dd23      	ble.n	80097a2 <_strtod_l+0x422>
 800975a:	2916      	cmp	r1, #22
 800975c:	dc0b      	bgt.n	8009776 <_strtod_l+0x3f6>
 800975e:	4b67      	ldr	r3, [pc, #412]	; (80098fc <_strtod_l+0x57c>)
 8009760:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009764:	ed93 7b00 	vldr	d7, [r3]
 8009768:	ec49 8b16 	vmov	d6, r8, r9
 800976c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009770:	ec59 8b17 	vmov	r8, r9, d7
 8009774:	e648      	b.n	8009408 <_strtod_l+0x88>
 8009776:	9807      	ldr	r0, [sp, #28]
 8009778:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800977c:	4281      	cmp	r1, r0
 800977e:	db1e      	blt.n	80097be <_strtod_l+0x43e>
 8009780:	4a5e      	ldr	r2, [pc, #376]	; (80098fc <_strtod_l+0x57c>)
 8009782:	f1c3 030f 	rsb	r3, r3, #15
 8009786:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800978a:	ed91 7b00 	vldr	d7, [r1]
 800978e:	ec49 8b16 	vmov	d6, r8, r9
 8009792:	1ac3      	subs	r3, r0, r3
 8009794:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009798:	ee27 7b06 	vmul.f64	d7, d7, d6
 800979c:	ed92 6b00 	vldr	d6, [r2]
 80097a0:	e7e4      	b.n	800976c <_strtod_l+0x3ec>
 80097a2:	9907      	ldr	r1, [sp, #28]
 80097a4:	3116      	adds	r1, #22
 80097a6:	db0a      	blt.n	80097be <_strtod_l+0x43e>
 80097a8:	4b54      	ldr	r3, [pc, #336]	; (80098fc <_strtod_l+0x57c>)
 80097aa:	1b7d      	subs	r5, r7, r5
 80097ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80097b0:	ed95 7b00 	vldr	d7, [r5]
 80097b4:	ec49 8b16 	vmov	d6, r8, r9
 80097b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80097bc:	e7d8      	b.n	8009770 <_strtod_l+0x3f0>
 80097be:	9907      	ldr	r1, [sp, #28]
 80097c0:	1a9a      	subs	r2, r3, r2
 80097c2:	440a      	add	r2, r1
 80097c4:	2a00      	cmp	r2, #0
 80097c6:	dd6f      	ble.n	80098a8 <_strtod_l+0x528>
 80097c8:	f012 000f 	ands.w	r0, r2, #15
 80097cc:	d00a      	beq.n	80097e4 <_strtod_l+0x464>
 80097ce:	494b      	ldr	r1, [pc, #300]	; (80098fc <_strtod_l+0x57c>)
 80097d0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80097d4:	ed91 7b00 	vldr	d7, [r1]
 80097d8:	ec49 8b16 	vmov	d6, r8, r9
 80097dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097e0:	ec59 8b17 	vmov	r8, r9, d7
 80097e4:	f032 020f 	bics.w	r2, r2, #15
 80097e8:	d04f      	beq.n	800988a <_strtod_l+0x50a>
 80097ea:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80097ee:	dd22      	ble.n	8009836 <_strtod_l+0x4b6>
 80097f0:	2500      	movs	r5, #0
 80097f2:	462e      	mov	r6, r5
 80097f4:	9506      	str	r5, [sp, #24]
 80097f6:	462f      	mov	r7, r5
 80097f8:	2322      	movs	r3, #34	; 0x22
 80097fa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009908 <_strtod_l+0x588>
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	f04f 0800 	mov.w	r8, #0
 8009804:	9b06      	ldr	r3, [sp, #24]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f43f adfe 	beq.w	8009408 <_strtod_l+0x88>
 800980c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800980e:	4620      	mov	r0, r4
 8009810:	f001 f83c 	bl	800a88c <_Bfree>
 8009814:	4639      	mov	r1, r7
 8009816:	4620      	mov	r0, r4
 8009818:	f001 f838 	bl	800a88c <_Bfree>
 800981c:	4631      	mov	r1, r6
 800981e:	4620      	mov	r0, r4
 8009820:	f001 f834 	bl	800a88c <_Bfree>
 8009824:	9906      	ldr	r1, [sp, #24]
 8009826:	4620      	mov	r0, r4
 8009828:	f001 f830 	bl	800a88c <_Bfree>
 800982c:	4629      	mov	r1, r5
 800982e:	4620      	mov	r0, r4
 8009830:	f001 f82c 	bl	800a88c <_Bfree>
 8009834:	e5e8      	b.n	8009408 <_strtod_l+0x88>
 8009836:	2000      	movs	r0, #0
 8009838:	ec49 8b17 	vmov	d7, r8, r9
 800983c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009900 <_strtod_l+0x580>
 8009840:	1112      	asrs	r2, r2, #4
 8009842:	4601      	mov	r1, r0
 8009844:	2a01      	cmp	r2, #1
 8009846:	dc23      	bgt.n	8009890 <_strtod_l+0x510>
 8009848:	b108      	cbz	r0, 800984e <_strtod_l+0x4ce>
 800984a:	ec59 8b17 	vmov	r8, r9, d7
 800984e:	4a2c      	ldr	r2, [pc, #176]	; (8009900 <_strtod_l+0x580>)
 8009850:	482c      	ldr	r0, [pc, #176]	; (8009904 <_strtod_l+0x584>)
 8009852:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009856:	ed92 7b00 	vldr	d7, [r2]
 800985a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800985e:	ec49 8b16 	vmov	d6, r8, r9
 8009862:	4a29      	ldr	r2, [pc, #164]	; (8009908 <_strtod_l+0x588>)
 8009864:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009868:	ee17 1a90 	vmov	r1, s15
 800986c:	400a      	ands	r2, r1
 800986e:	4282      	cmp	r2, r0
 8009870:	ec59 8b17 	vmov	r8, r9, d7
 8009874:	d8bc      	bhi.n	80097f0 <_strtod_l+0x470>
 8009876:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800987a:	4282      	cmp	r2, r0
 800987c:	bf86      	itte	hi
 800987e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800990c <_strtod_l+0x58c>
 8009882:	f04f 38ff 	movhi.w	r8, #4294967295
 8009886:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800988a:	2200      	movs	r2, #0
 800988c:	9204      	str	r2, [sp, #16]
 800988e:	e078      	b.n	8009982 <_strtod_l+0x602>
 8009890:	07d6      	lsls	r6, r2, #31
 8009892:	d504      	bpl.n	800989e <_strtod_l+0x51e>
 8009894:	ed9c 6b00 	vldr	d6, [ip]
 8009898:	2001      	movs	r0, #1
 800989a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800989e:	3101      	adds	r1, #1
 80098a0:	1052      	asrs	r2, r2, #1
 80098a2:	f10c 0c08 	add.w	ip, ip, #8
 80098a6:	e7cd      	b.n	8009844 <_strtod_l+0x4c4>
 80098a8:	d0ef      	beq.n	800988a <_strtod_l+0x50a>
 80098aa:	4252      	negs	r2, r2
 80098ac:	f012 000f 	ands.w	r0, r2, #15
 80098b0:	d00a      	beq.n	80098c8 <_strtod_l+0x548>
 80098b2:	4912      	ldr	r1, [pc, #72]	; (80098fc <_strtod_l+0x57c>)
 80098b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80098b8:	ed91 7b00 	vldr	d7, [r1]
 80098bc:	ec49 8b16 	vmov	d6, r8, r9
 80098c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80098c4:	ec59 8b17 	vmov	r8, r9, d7
 80098c8:	1112      	asrs	r2, r2, #4
 80098ca:	d0de      	beq.n	800988a <_strtod_l+0x50a>
 80098cc:	2a1f      	cmp	r2, #31
 80098ce:	dd1f      	ble.n	8009910 <_strtod_l+0x590>
 80098d0:	2500      	movs	r5, #0
 80098d2:	462e      	mov	r6, r5
 80098d4:	9506      	str	r5, [sp, #24]
 80098d6:	462f      	mov	r7, r5
 80098d8:	2322      	movs	r3, #34	; 0x22
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	f04f 0900 	mov.w	r9, #0
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	e78e      	b.n	8009804 <_strtod_l+0x484>
 80098e6:	bf00      	nop
 80098e8:	0800bdf9 	.word	0x0800bdf9
 80098ec:	0800be10 	.word	0x0800be10
 80098f0:	0800bdf0 	.word	0x0800bdf0
 80098f4:	0800bdf3 	.word	0x0800bdf3
 80098f8:	0800c087 	.word	0x0800c087
 80098fc:	0800bf78 	.word	0x0800bf78
 8009900:	0800bf50 	.word	0x0800bf50
 8009904:	7ca00000 	.word	0x7ca00000
 8009908:	7ff00000 	.word	0x7ff00000
 800990c:	7fefffff 	.word	0x7fefffff
 8009910:	f012 0110 	ands.w	r1, r2, #16
 8009914:	bf18      	it	ne
 8009916:	216a      	movne	r1, #106	; 0x6a
 8009918:	9104      	str	r1, [sp, #16]
 800991a:	ec49 8b17 	vmov	d7, r8, r9
 800991e:	49be      	ldr	r1, [pc, #760]	; (8009c18 <_strtod_l+0x898>)
 8009920:	2000      	movs	r0, #0
 8009922:	07d6      	lsls	r6, r2, #31
 8009924:	d504      	bpl.n	8009930 <_strtod_l+0x5b0>
 8009926:	ed91 6b00 	vldr	d6, [r1]
 800992a:	2001      	movs	r0, #1
 800992c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009930:	1052      	asrs	r2, r2, #1
 8009932:	f101 0108 	add.w	r1, r1, #8
 8009936:	d1f4      	bne.n	8009922 <_strtod_l+0x5a2>
 8009938:	b108      	cbz	r0, 800993e <_strtod_l+0x5be>
 800993a:	ec59 8b17 	vmov	r8, r9, d7
 800993e:	9a04      	ldr	r2, [sp, #16]
 8009940:	b1c2      	cbz	r2, 8009974 <_strtod_l+0x5f4>
 8009942:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009946:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800994a:	2a00      	cmp	r2, #0
 800994c:	4648      	mov	r0, r9
 800994e:	dd11      	ble.n	8009974 <_strtod_l+0x5f4>
 8009950:	2a1f      	cmp	r2, #31
 8009952:	f340 812e 	ble.w	8009bb2 <_strtod_l+0x832>
 8009956:	2a34      	cmp	r2, #52	; 0x34
 8009958:	bfde      	ittt	le
 800995a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800995e:	f04f 32ff 	movle.w	r2, #4294967295
 8009962:	fa02 f101 	lslle.w	r1, r2, r1
 8009966:	f04f 0800 	mov.w	r8, #0
 800996a:	bfcc      	ite	gt
 800996c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009970:	ea01 0900 	andle.w	r9, r1, r0
 8009974:	ec49 8b17 	vmov	d7, r8, r9
 8009978:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800997c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009980:	d0a6      	beq.n	80098d0 <_strtod_l+0x550>
 8009982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009984:	9200      	str	r2, [sp, #0]
 8009986:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009988:	9a06      	ldr	r2, [sp, #24]
 800998a:	4620      	mov	r0, r4
 800998c:	f000 ffe6 	bl	800a95c <__s2b>
 8009990:	9006      	str	r0, [sp, #24]
 8009992:	2800      	cmp	r0, #0
 8009994:	f43f af2c 	beq.w	80097f0 <_strtod_l+0x470>
 8009998:	9b07      	ldr	r3, [sp, #28]
 800999a:	1b7d      	subs	r5, r7, r5
 800999c:	2b00      	cmp	r3, #0
 800999e:	bfb4      	ite	lt
 80099a0:	462b      	movlt	r3, r5
 80099a2:	2300      	movge	r3, #0
 80099a4:	9309      	str	r3, [sp, #36]	; 0x24
 80099a6:	9b07      	ldr	r3, [sp, #28]
 80099a8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009bf8 <_strtod_l+0x878>
 80099ac:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009c00 <_strtod_l+0x880>
 80099b0:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009c08 <_strtod_l+0x888>
 80099b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099b8:	2500      	movs	r5, #0
 80099ba:	930c      	str	r3, [sp, #48]	; 0x30
 80099bc:	462e      	mov	r6, r5
 80099be:	9b06      	ldr	r3, [sp, #24]
 80099c0:	4620      	mov	r0, r4
 80099c2:	6859      	ldr	r1, [r3, #4]
 80099c4:	f000 ff22 	bl	800a80c <_Balloc>
 80099c8:	4607      	mov	r7, r0
 80099ca:	2800      	cmp	r0, #0
 80099cc:	f43f af14 	beq.w	80097f8 <_strtod_l+0x478>
 80099d0:	9b06      	ldr	r3, [sp, #24]
 80099d2:	691a      	ldr	r2, [r3, #16]
 80099d4:	3202      	adds	r2, #2
 80099d6:	f103 010c 	add.w	r1, r3, #12
 80099da:	0092      	lsls	r2, r2, #2
 80099dc:	300c      	adds	r0, #12
 80099de:	f7ff fb38 	bl	8009052 <memcpy>
 80099e2:	ec49 8b10 	vmov	d0, r8, r9
 80099e6:	aa14      	add	r2, sp, #80	; 0x50
 80099e8:	a913      	add	r1, sp, #76	; 0x4c
 80099ea:	4620      	mov	r0, r4
 80099ec:	f001 fafc 	bl	800afe8 <__d2b>
 80099f0:	ec49 8b18 	vmov	d8, r8, r9
 80099f4:	9012      	str	r0, [sp, #72]	; 0x48
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f43f aefe 	beq.w	80097f8 <_strtod_l+0x478>
 80099fc:	2101      	movs	r1, #1
 80099fe:	4620      	mov	r0, r4
 8009a00:	f001 f846 	bl	800aa90 <__i2b>
 8009a04:	4606      	mov	r6, r0
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f43f aef6 	beq.w	80097f8 <_strtod_l+0x478>
 8009a0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a0e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bfab      	itete	ge
 8009a14:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009a16:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009a18:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009a1c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009a20:	bfac      	ite	ge
 8009a22:	eb03 0b02 	addge.w	fp, r3, r2
 8009a26:	eba2 0a03 	sublt.w	sl, r2, r3
 8009a2a:	9a04      	ldr	r2, [sp, #16]
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	440b      	add	r3, r1
 8009a30:	4a7a      	ldr	r2, [pc, #488]	; (8009c1c <_strtod_l+0x89c>)
 8009a32:	3b01      	subs	r3, #1
 8009a34:	4293      	cmp	r3, r2
 8009a36:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009a3a:	f280 80cd 	bge.w	8009bd8 <_strtod_l+0x858>
 8009a3e:	1ad2      	subs	r2, r2, r3
 8009a40:	2a1f      	cmp	r2, #31
 8009a42:	eba1 0102 	sub.w	r1, r1, r2
 8009a46:	f04f 0001 	mov.w	r0, #1
 8009a4a:	f300 80b9 	bgt.w	8009bc0 <_strtod_l+0x840>
 8009a4e:	fa00 f302 	lsl.w	r3, r0, r2
 8009a52:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a54:	2300      	movs	r3, #0
 8009a56:	930a      	str	r3, [sp, #40]	; 0x28
 8009a58:	eb0b 0301 	add.w	r3, fp, r1
 8009a5c:	9a04      	ldr	r2, [sp, #16]
 8009a5e:	459b      	cmp	fp, r3
 8009a60:	448a      	add	sl, r1
 8009a62:	4492      	add	sl, r2
 8009a64:	465a      	mov	r2, fp
 8009a66:	bfa8      	it	ge
 8009a68:	461a      	movge	r2, r3
 8009a6a:	4552      	cmp	r2, sl
 8009a6c:	bfa8      	it	ge
 8009a6e:	4652      	movge	r2, sl
 8009a70:	2a00      	cmp	r2, #0
 8009a72:	bfc2      	ittt	gt
 8009a74:	1a9b      	subgt	r3, r3, r2
 8009a76:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009a7a:	ebab 0b02 	subgt.w	fp, fp, r2
 8009a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a80:	2a00      	cmp	r2, #0
 8009a82:	dd18      	ble.n	8009ab6 <_strtod_l+0x736>
 8009a84:	4631      	mov	r1, r6
 8009a86:	4620      	mov	r0, r4
 8009a88:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a8a:	f001 f8c1 	bl	800ac10 <__pow5mult>
 8009a8e:	4606      	mov	r6, r0
 8009a90:	2800      	cmp	r0, #0
 8009a92:	f43f aeb1 	beq.w	80097f8 <_strtod_l+0x478>
 8009a96:	4601      	mov	r1, r0
 8009a98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f001 f80e 	bl	800aabc <__multiply>
 8009aa0:	900e      	str	r0, [sp, #56]	; 0x38
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f43f aea8 	beq.w	80097f8 <_strtod_l+0x478>
 8009aa8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f000 feee 	bl	800a88c <_Bfree>
 8009ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ab4:	9212      	str	r2, [sp, #72]	; 0x48
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f300 8093 	bgt.w	8009be2 <_strtod_l+0x862>
 8009abc:	9b07      	ldr	r3, [sp, #28]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dd08      	ble.n	8009ad4 <_strtod_l+0x754>
 8009ac2:	4639      	mov	r1, r7
 8009ac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f001 f8a2 	bl	800ac10 <__pow5mult>
 8009acc:	4607      	mov	r7, r0
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f43f ae92 	beq.w	80097f8 <_strtod_l+0x478>
 8009ad4:	f1ba 0f00 	cmp.w	sl, #0
 8009ad8:	dd08      	ble.n	8009aec <_strtod_l+0x76c>
 8009ada:	4639      	mov	r1, r7
 8009adc:	4652      	mov	r2, sl
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f001 f8f0 	bl	800acc4 <__lshift>
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f43f ae86 	beq.w	80097f8 <_strtod_l+0x478>
 8009aec:	f1bb 0f00 	cmp.w	fp, #0
 8009af0:	dd08      	ble.n	8009b04 <_strtod_l+0x784>
 8009af2:	4631      	mov	r1, r6
 8009af4:	465a      	mov	r2, fp
 8009af6:	4620      	mov	r0, r4
 8009af8:	f001 f8e4 	bl	800acc4 <__lshift>
 8009afc:	4606      	mov	r6, r0
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f ae7a 	beq.w	80097f8 <_strtod_l+0x478>
 8009b04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009b06:	463a      	mov	r2, r7
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f001 f967 	bl	800addc <__mdiff>
 8009b0e:	4605      	mov	r5, r0
 8009b10:	2800      	cmp	r0, #0
 8009b12:	f43f ae71 	beq.w	80097f8 <_strtod_l+0x478>
 8009b16:	2300      	movs	r3, #0
 8009b18:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009b1c:	60c3      	str	r3, [r0, #12]
 8009b1e:	4631      	mov	r1, r6
 8009b20:	f001 f940 	bl	800ada4 <__mcmp>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	da7d      	bge.n	8009c24 <_strtod_l+0x8a4>
 8009b28:	ea5a 0308 	orrs.w	r3, sl, r8
 8009b2c:	f040 80a3 	bne.w	8009c76 <_strtod_l+0x8f6>
 8009b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f040 809e 	bne.w	8009c76 <_strtod_l+0x8f6>
 8009b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b3e:	0d1b      	lsrs	r3, r3, #20
 8009b40:	051b      	lsls	r3, r3, #20
 8009b42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b46:	f240 8096 	bls.w	8009c76 <_strtod_l+0x8f6>
 8009b4a:	696b      	ldr	r3, [r5, #20]
 8009b4c:	b91b      	cbnz	r3, 8009b56 <_strtod_l+0x7d6>
 8009b4e:	692b      	ldr	r3, [r5, #16]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	f340 8090 	ble.w	8009c76 <_strtod_l+0x8f6>
 8009b56:	4629      	mov	r1, r5
 8009b58:	2201      	movs	r2, #1
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f001 f8b2 	bl	800acc4 <__lshift>
 8009b60:	4631      	mov	r1, r6
 8009b62:	4605      	mov	r5, r0
 8009b64:	f001 f91e 	bl	800ada4 <__mcmp>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f340 8084 	ble.w	8009c76 <_strtod_l+0x8f6>
 8009b6e:	9904      	ldr	r1, [sp, #16]
 8009b70:	4a2b      	ldr	r2, [pc, #172]	; (8009c20 <_strtod_l+0x8a0>)
 8009b72:	464b      	mov	r3, r9
 8009b74:	2900      	cmp	r1, #0
 8009b76:	f000 809d 	beq.w	8009cb4 <_strtod_l+0x934>
 8009b7a:	ea02 0109 	and.w	r1, r2, r9
 8009b7e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b82:	f300 8097 	bgt.w	8009cb4 <_strtod_l+0x934>
 8009b86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b8a:	f77f aea5 	ble.w	80098d8 <_strtod_l+0x558>
 8009b8e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009c10 <_strtod_l+0x890>
 8009b92:	ec49 8b16 	vmov	d6, r8, r9
 8009b96:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009b9e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	bf08      	it	eq
 8009ba6:	2322      	moveq	r3, #34	; 0x22
 8009ba8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009bac:	bf08      	it	eq
 8009bae:	6023      	streq	r3, [r4, #0]
 8009bb0:	e62c      	b.n	800980c <_strtod_l+0x48c>
 8009bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8009bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8009bba:	ea02 0808 	and.w	r8, r2, r8
 8009bbe:	e6d9      	b.n	8009974 <_strtod_l+0x5f4>
 8009bc0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009bc4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009bc8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009bcc:	33e2      	adds	r3, #226	; 0xe2
 8009bce:	fa00 f303 	lsl.w	r3, r0, r3
 8009bd2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009bd6:	e73f      	b.n	8009a58 <_strtod_l+0x6d8>
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009be0:	e73a      	b.n	8009a58 <_strtod_l+0x6d8>
 8009be2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009be4:	461a      	mov	r2, r3
 8009be6:	4620      	mov	r0, r4
 8009be8:	f001 f86c 	bl	800acc4 <__lshift>
 8009bec:	9012      	str	r0, [sp, #72]	; 0x48
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f47f af64 	bne.w	8009abc <_strtod_l+0x73c>
 8009bf4:	e600      	b.n	80097f8 <_strtod_l+0x478>
 8009bf6:	bf00      	nop
 8009bf8:	94a03595 	.word	0x94a03595
 8009bfc:	3fcfffff 	.word	0x3fcfffff
 8009c00:	94a03595 	.word	0x94a03595
 8009c04:	3fdfffff 	.word	0x3fdfffff
 8009c08:	35afe535 	.word	0x35afe535
 8009c0c:	3fe00000 	.word	0x3fe00000
 8009c10:	00000000 	.word	0x00000000
 8009c14:	39500000 	.word	0x39500000
 8009c18:	0800be28 	.word	0x0800be28
 8009c1c:	fffffc02 	.word	0xfffffc02
 8009c20:	7ff00000 	.word	0x7ff00000
 8009c24:	46cb      	mov	fp, r9
 8009c26:	d15f      	bne.n	8009ce8 <_strtod_l+0x968>
 8009c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c2c:	f1ba 0f00 	cmp.w	sl, #0
 8009c30:	d02a      	beq.n	8009c88 <_strtod_l+0x908>
 8009c32:	4aa7      	ldr	r2, [pc, #668]	; (8009ed0 <_strtod_l+0xb50>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d12b      	bne.n	8009c90 <_strtod_l+0x910>
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	4642      	mov	r2, r8
 8009c3c:	b1fb      	cbz	r3, 8009c7e <_strtod_l+0x8fe>
 8009c3e:	4ba5      	ldr	r3, [pc, #660]	; (8009ed4 <_strtod_l+0xb54>)
 8009c40:	ea09 0303 	and.w	r3, r9, r3
 8009c44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c48:	f04f 31ff 	mov.w	r1, #4294967295
 8009c4c:	d81a      	bhi.n	8009c84 <_strtod_l+0x904>
 8009c4e:	0d1b      	lsrs	r3, r3, #20
 8009c50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c54:	fa01 f303 	lsl.w	r3, r1, r3
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d119      	bne.n	8009c90 <_strtod_l+0x910>
 8009c5c:	4b9e      	ldr	r3, [pc, #632]	; (8009ed8 <_strtod_l+0xb58>)
 8009c5e:	459b      	cmp	fp, r3
 8009c60:	d102      	bne.n	8009c68 <_strtod_l+0x8e8>
 8009c62:	3201      	adds	r2, #1
 8009c64:	f43f adc8 	beq.w	80097f8 <_strtod_l+0x478>
 8009c68:	4b9a      	ldr	r3, [pc, #616]	; (8009ed4 <_strtod_l+0xb54>)
 8009c6a:	ea0b 0303 	and.w	r3, fp, r3
 8009c6e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009c72:	f04f 0800 	mov.w	r8, #0
 8009c76:	9b04      	ldr	r3, [sp, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d188      	bne.n	8009b8e <_strtod_l+0x80e>
 8009c7c:	e5c6      	b.n	800980c <_strtod_l+0x48c>
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c82:	e7e9      	b.n	8009c58 <_strtod_l+0x8d8>
 8009c84:	460b      	mov	r3, r1
 8009c86:	e7e7      	b.n	8009c58 <_strtod_l+0x8d8>
 8009c88:	ea53 0308 	orrs.w	r3, r3, r8
 8009c8c:	f43f af6f 	beq.w	8009b6e <_strtod_l+0x7ee>
 8009c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c92:	b1cb      	cbz	r3, 8009cc8 <_strtod_l+0x948>
 8009c94:	ea13 0f0b 	tst.w	r3, fp
 8009c98:	d0ed      	beq.n	8009c76 <_strtod_l+0x8f6>
 8009c9a:	9a04      	ldr	r2, [sp, #16]
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	f1ba 0f00 	cmp.w	sl, #0
 8009ca4:	d014      	beq.n	8009cd0 <_strtod_l+0x950>
 8009ca6:	f7ff fb50 	bl	800934a <sulp>
 8009caa:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009cae:	ec59 8b17 	vmov	r8, r9, d7
 8009cb2:	e7e0      	b.n	8009c76 <_strtod_l+0x8f6>
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009cba:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009cbe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009cc2:	f04f 38ff 	mov.w	r8, #4294967295
 8009cc6:	e7d6      	b.n	8009c76 <_strtod_l+0x8f6>
 8009cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cca:	ea13 0f08 	tst.w	r3, r8
 8009cce:	e7e3      	b.n	8009c98 <_strtod_l+0x918>
 8009cd0:	f7ff fb3b 	bl	800934a <sulp>
 8009cd4:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009cd8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce0:	ec59 8b10 	vmov	r8, r9, d0
 8009ce4:	d1c7      	bne.n	8009c76 <_strtod_l+0x8f6>
 8009ce6:	e5f7      	b.n	80098d8 <_strtod_l+0x558>
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4628      	mov	r0, r5
 8009cec:	f001 f9d8 	bl	800b0a0 <__ratio>
 8009cf0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009cf4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfc:	d865      	bhi.n	8009dca <_strtod_l+0xa4a>
 8009cfe:	f1ba 0f00 	cmp.w	sl, #0
 8009d02:	d042      	beq.n	8009d8a <_strtod_l+0xa0a>
 8009d04:	4b75      	ldr	r3, [pc, #468]	; (8009edc <_strtod_l+0xb5c>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009d0c:	4871      	ldr	r0, [pc, #452]	; (8009ed4 <_strtod_l+0xb54>)
 8009d0e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009ee8 <_strtod_l+0xb68>
 8009d12:	ea0b 0100 	and.w	r1, fp, r0
 8009d16:	4561      	cmp	r1, ip
 8009d18:	f040 808e 	bne.w	8009e38 <_strtod_l+0xab8>
 8009d1c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009d20:	ec49 8b10 	vmov	d0, r8, r9
 8009d24:	ec43 2b1c 	vmov	d12, r2, r3
 8009d28:	910a      	str	r1, [sp, #40]	; 0x28
 8009d2a:	f001 f8e1 	bl	800aef0 <__ulp>
 8009d2e:	ec49 8b1e 	vmov	d14, r8, r9
 8009d32:	4868      	ldr	r0, [pc, #416]	; (8009ed4 <_strtod_l+0xb54>)
 8009d34:	eeac eb00 	vfma.f64	d14, d12, d0
 8009d38:	ee1e 3a90 	vmov	r3, s29
 8009d3c:	4a68      	ldr	r2, [pc, #416]	; (8009ee0 <_strtod_l+0xb60>)
 8009d3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d40:	4018      	ands	r0, r3
 8009d42:	4290      	cmp	r0, r2
 8009d44:	ec59 8b1e 	vmov	r8, r9, d14
 8009d48:	d94e      	bls.n	8009de8 <_strtod_l+0xa68>
 8009d4a:	ee18 3a90 	vmov	r3, s17
 8009d4e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d104      	bne.n	8009d60 <_strtod_l+0x9e0>
 8009d56:	ee18 3a10 	vmov	r3, s16
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	f43f ad4c 	beq.w	80097f8 <_strtod_l+0x478>
 8009d60:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009ed8 <_strtod_l+0xb58>
 8009d64:	f04f 38ff 	mov.w	r8, #4294967295
 8009d68:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 fd8e 	bl	800a88c <_Bfree>
 8009d70:	4639      	mov	r1, r7
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 fd8a 	bl	800a88c <_Bfree>
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 fd86 	bl	800a88c <_Bfree>
 8009d80:	4629      	mov	r1, r5
 8009d82:	4620      	mov	r0, r4
 8009d84:	f000 fd82 	bl	800a88c <_Bfree>
 8009d88:	e619      	b.n	80099be <_strtod_l+0x63e>
 8009d8a:	f1b8 0f00 	cmp.w	r8, #0
 8009d8e:	d112      	bne.n	8009db6 <_strtod_l+0xa36>
 8009d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d94:	b9b3      	cbnz	r3, 8009dc4 <_strtod_l+0xa44>
 8009d96:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009d9a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009da6:	bf58      	it	pl
 8009da8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009dac:	eeb1 7b4d 	vneg.f64	d7, d13
 8009db0:	ec53 2b17 	vmov	r2, r3, d7
 8009db4:	e7aa      	b.n	8009d0c <_strtod_l+0x98c>
 8009db6:	f1b8 0f01 	cmp.w	r8, #1
 8009dba:	d103      	bne.n	8009dc4 <_strtod_l+0xa44>
 8009dbc:	f1b9 0f00 	cmp.w	r9, #0
 8009dc0:	f43f ad8a 	beq.w	80098d8 <_strtod_l+0x558>
 8009dc4:	4b47      	ldr	r3, [pc, #284]	; (8009ee4 <_strtod_l+0xb64>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	e79e      	b.n	8009d08 <_strtod_l+0x988>
 8009dca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009dce:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009dd2:	f1ba 0f00 	cmp.w	sl, #0
 8009dd6:	d104      	bne.n	8009de2 <_strtod_l+0xa62>
 8009dd8:	eeb1 7b4d 	vneg.f64	d7, d13
 8009ddc:	ec53 2b17 	vmov	r2, r3, d7
 8009de0:	e794      	b.n	8009d0c <_strtod_l+0x98c>
 8009de2:	eeb0 7b4d 	vmov.f64	d7, d13
 8009de6:	e7f9      	b.n	8009ddc <_strtod_l+0xa5c>
 8009de8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1ba      	bne.n	8009d68 <_strtod_l+0x9e8>
 8009df2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009df6:	0d1b      	lsrs	r3, r3, #20
 8009df8:	051b      	lsls	r3, r3, #20
 8009dfa:	4299      	cmp	r1, r3
 8009dfc:	d1b4      	bne.n	8009d68 <_strtod_l+0x9e8>
 8009dfe:	ec51 0b1d 	vmov	r0, r1, d13
 8009e02:	f7f6 fc49 	bl	8000698 <__aeabi_d2lz>
 8009e06:	f7f6 fc01 	bl	800060c <__aeabi_l2d>
 8009e0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e0e:	ec41 0b17 	vmov	d7, r0, r1
 8009e12:	ea43 0308 	orr.w	r3, r3, r8
 8009e16:	ea53 030a 	orrs.w	r3, r3, sl
 8009e1a:	ee3d db47 	vsub.f64	d13, d13, d7
 8009e1e:	d03c      	beq.n	8009e9a <_strtod_l+0xb1a>
 8009e20:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e28:	f53f acf0 	bmi.w	800980c <_strtod_l+0x48c>
 8009e2c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e34:	dd98      	ble.n	8009d68 <_strtod_l+0x9e8>
 8009e36:	e4e9      	b.n	800980c <_strtod_l+0x48c>
 8009e38:	9804      	ldr	r0, [sp, #16]
 8009e3a:	b1f0      	cbz	r0, 8009e7a <_strtod_l+0xafa>
 8009e3c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009e40:	d81b      	bhi.n	8009e7a <_strtod_l+0xafa>
 8009e42:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009ec8 <_strtod_l+0xb48>
 8009e46:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4e:	d811      	bhi.n	8009e74 <_strtod_l+0xaf4>
 8009e50:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009e54:	ee1d 3a10 	vmov	r3, s26
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	bf38      	it	cc
 8009e5c:	2301      	movcc	r3, #1
 8009e5e:	ee0d 3a10 	vmov	s26, r3
 8009e62:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009e66:	f1ba 0f00 	cmp.w	sl, #0
 8009e6a:	d113      	bne.n	8009e94 <_strtod_l+0xb14>
 8009e6c:	eeb1 7b4d 	vneg.f64	d7, d13
 8009e70:	ec53 2b17 	vmov	r2, r3, d7
 8009e74:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009e78:	1a43      	subs	r3, r0, r1
 8009e7a:	eeb0 0b48 	vmov.f64	d0, d8
 8009e7e:	ec43 2b1c 	vmov	d12, r2, r3
 8009e82:	910a      	str	r1, [sp, #40]	; 0x28
 8009e84:	f001 f834 	bl	800aef0 <__ulp>
 8009e88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e8a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8009e8e:	ec59 8b18 	vmov	r8, r9, d8
 8009e92:	e7ab      	b.n	8009dec <_strtod_l+0xa6c>
 8009e94:	eeb0 7b4d 	vmov.f64	d7, d13
 8009e98:	e7ea      	b.n	8009e70 <_strtod_l+0xaf0>
 8009e9a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea2:	f57f af61 	bpl.w	8009d68 <_strtod_l+0x9e8>
 8009ea6:	e4b1      	b.n	800980c <_strtod_l+0x48c>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9308      	str	r3, [sp, #32]
 8009eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	f7ff baad 	b.w	8009410 <_strtod_l+0x90>
 8009eb6:	2a65      	cmp	r2, #101	; 0x65
 8009eb8:	f43f ab9f 	beq.w	80095fa <_strtod_l+0x27a>
 8009ebc:	2a45      	cmp	r2, #69	; 0x45
 8009ebe:	f43f ab9c 	beq.w	80095fa <_strtod_l+0x27a>
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	f7ff bbd4 	b.w	8009670 <_strtod_l+0x2f0>
 8009ec8:	ffc00000 	.word	0xffc00000
 8009ecc:	41dfffff 	.word	0x41dfffff
 8009ed0:	000fffff 	.word	0x000fffff
 8009ed4:	7ff00000 	.word	0x7ff00000
 8009ed8:	7fefffff 	.word	0x7fefffff
 8009edc:	3ff00000 	.word	0x3ff00000
 8009ee0:	7c9fffff 	.word	0x7c9fffff
 8009ee4:	bff00000 	.word	0xbff00000
 8009ee8:	7fe00000 	.word	0x7fe00000

08009eec <strtod>:
 8009eec:	460a      	mov	r2, r1
 8009eee:	4601      	mov	r1, r0
 8009ef0:	4802      	ldr	r0, [pc, #8]	; (8009efc <strtod+0x10>)
 8009ef2:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <strtod+0x14>)
 8009ef4:	6800      	ldr	r0, [r0, #0]
 8009ef6:	f7ff ba43 	b.w	8009380 <_strtod_l>
 8009efa:	bf00      	nop
 8009efc:	20000010 	.word	0x20000010
 8009f00:	20000078 	.word	0x20000078

08009f04 <_write_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d07      	ldr	r5, [pc, #28]	; (8009f24 <_write_r+0x20>)
 8009f08:	4604      	mov	r4, r0
 8009f0a:	4608      	mov	r0, r1
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	602a      	str	r2, [r5, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f7f7 fe77 	bl	8001c06 <_write>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_write_r+0x1e>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_write_r+0x1e>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	20005658 	.word	0x20005658

08009f28 <_close_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d06      	ldr	r5, [pc, #24]	; (8009f44 <_close_r+0x1c>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	602b      	str	r3, [r5, #0]
 8009f34:	f7f7 fe83 	bl	8001c3e <_close>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_close_r+0x1a>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_close_r+0x1a>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	20005658 	.word	0x20005658

08009f48 <__sflush_r>:
 8009f48:	898a      	ldrh	r2, [r1, #12]
 8009f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4e:	4605      	mov	r5, r0
 8009f50:	0710      	lsls	r0, r2, #28
 8009f52:	460c      	mov	r4, r1
 8009f54:	d458      	bmi.n	800a008 <__sflush_r+0xc0>
 8009f56:	684b      	ldr	r3, [r1, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	dc05      	bgt.n	8009f68 <__sflush_r+0x20>
 8009f5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	dc02      	bgt.n	8009f68 <__sflush_r+0x20>
 8009f62:	2000      	movs	r0, #0
 8009f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f6a:	2e00      	cmp	r6, #0
 8009f6c:	d0f9      	beq.n	8009f62 <__sflush_r+0x1a>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f74:	682f      	ldr	r7, [r5, #0]
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	d032      	beq.n	8009fe0 <__sflush_r+0x98>
 8009f7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	075a      	lsls	r2, r3, #29
 8009f80:	d505      	bpl.n	8009f8e <__sflush_r+0x46>
 8009f82:	6863      	ldr	r3, [r4, #4]
 8009f84:	1ac0      	subs	r0, r0, r3
 8009f86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f88:	b10b      	cbz	r3, 8009f8e <__sflush_r+0x46>
 8009f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f8c:	1ac0      	subs	r0, r0, r3
 8009f8e:	2300      	movs	r3, #0
 8009f90:	4602      	mov	r2, r0
 8009f92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f94:	6a21      	ldr	r1, [r4, #32]
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b0      	blx	r6
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	d106      	bne.n	8009fae <__sflush_r+0x66>
 8009fa0:	6829      	ldr	r1, [r5, #0]
 8009fa2:	291d      	cmp	r1, #29
 8009fa4:	d82c      	bhi.n	800a000 <__sflush_r+0xb8>
 8009fa6:	4a2a      	ldr	r2, [pc, #168]	; (800a050 <__sflush_r+0x108>)
 8009fa8:	40ca      	lsrs	r2, r1
 8009faa:	07d6      	lsls	r6, r2, #31
 8009fac:	d528      	bpl.n	800a000 <__sflush_r+0xb8>
 8009fae:	2200      	movs	r2, #0
 8009fb0:	6062      	str	r2, [r4, #4]
 8009fb2:	04d9      	lsls	r1, r3, #19
 8009fb4:	6922      	ldr	r2, [r4, #16]
 8009fb6:	6022      	str	r2, [r4, #0]
 8009fb8:	d504      	bpl.n	8009fc4 <__sflush_r+0x7c>
 8009fba:	1c42      	adds	r2, r0, #1
 8009fbc:	d101      	bne.n	8009fc2 <__sflush_r+0x7a>
 8009fbe:	682b      	ldr	r3, [r5, #0]
 8009fc0:	b903      	cbnz	r3, 8009fc4 <__sflush_r+0x7c>
 8009fc2:	6560      	str	r0, [r4, #84]	; 0x54
 8009fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fc6:	602f      	str	r7, [r5, #0]
 8009fc8:	2900      	cmp	r1, #0
 8009fca:	d0ca      	beq.n	8009f62 <__sflush_r+0x1a>
 8009fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fd0:	4299      	cmp	r1, r3
 8009fd2:	d002      	beq.n	8009fda <__sflush_r+0x92>
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f001 f8ed 	bl	800b1b4 <_free_r>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	6360      	str	r0, [r4, #52]	; 0x34
 8009fde:	e7c1      	b.n	8009f64 <__sflush_r+0x1c>
 8009fe0:	6a21      	ldr	r1, [r4, #32]
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	47b0      	blx	r6
 8009fe8:	1c41      	adds	r1, r0, #1
 8009fea:	d1c7      	bne.n	8009f7c <__sflush_r+0x34>
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0c4      	beq.n	8009f7c <__sflush_r+0x34>
 8009ff2:	2b1d      	cmp	r3, #29
 8009ff4:	d001      	beq.n	8009ffa <__sflush_r+0xb2>
 8009ff6:	2b16      	cmp	r3, #22
 8009ff8:	d101      	bne.n	8009ffe <__sflush_r+0xb6>
 8009ffa:	602f      	str	r7, [r5, #0]
 8009ffc:	e7b1      	b.n	8009f62 <__sflush_r+0x1a>
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a004:	81a3      	strh	r3, [r4, #12]
 800a006:	e7ad      	b.n	8009f64 <__sflush_r+0x1c>
 800a008:	690f      	ldr	r7, [r1, #16]
 800a00a:	2f00      	cmp	r7, #0
 800a00c:	d0a9      	beq.n	8009f62 <__sflush_r+0x1a>
 800a00e:	0793      	lsls	r3, r2, #30
 800a010:	680e      	ldr	r6, [r1, #0]
 800a012:	bf08      	it	eq
 800a014:	694b      	ldreq	r3, [r1, #20]
 800a016:	600f      	str	r7, [r1, #0]
 800a018:	bf18      	it	ne
 800a01a:	2300      	movne	r3, #0
 800a01c:	eba6 0807 	sub.w	r8, r6, r7
 800a020:	608b      	str	r3, [r1, #8]
 800a022:	f1b8 0f00 	cmp.w	r8, #0
 800a026:	dd9c      	ble.n	8009f62 <__sflush_r+0x1a>
 800a028:	6a21      	ldr	r1, [r4, #32]
 800a02a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a02c:	4643      	mov	r3, r8
 800a02e:	463a      	mov	r2, r7
 800a030:	4628      	mov	r0, r5
 800a032:	47b0      	blx	r6
 800a034:	2800      	cmp	r0, #0
 800a036:	dc06      	bgt.n	800a046 <__sflush_r+0xfe>
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	f04f 30ff 	mov.w	r0, #4294967295
 800a044:	e78e      	b.n	8009f64 <__sflush_r+0x1c>
 800a046:	4407      	add	r7, r0
 800a048:	eba8 0800 	sub.w	r8, r8, r0
 800a04c:	e7e9      	b.n	800a022 <__sflush_r+0xda>
 800a04e:	bf00      	nop
 800a050:	20400001 	.word	0x20400001

0800a054 <_fflush_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	690b      	ldr	r3, [r1, #16]
 800a058:	4605      	mov	r5, r0
 800a05a:	460c      	mov	r4, r1
 800a05c:	b913      	cbnz	r3, 800a064 <_fflush_r+0x10>
 800a05e:	2500      	movs	r5, #0
 800a060:	4628      	mov	r0, r5
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	b118      	cbz	r0, 800a06e <_fflush_r+0x1a>
 800a066:	6983      	ldr	r3, [r0, #24]
 800a068:	b90b      	cbnz	r3, 800a06e <_fflush_r+0x1a>
 800a06a:	f7fe ff2d 	bl	8008ec8 <__sinit>
 800a06e:	4b14      	ldr	r3, [pc, #80]	; (800a0c0 <_fflush_r+0x6c>)
 800a070:	429c      	cmp	r4, r3
 800a072:	d11b      	bne.n	800a0ac <_fflush_r+0x58>
 800a074:	686c      	ldr	r4, [r5, #4]
 800a076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0ef      	beq.n	800a05e <_fflush_r+0xa>
 800a07e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a080:	07d0      	lsls	r0, r2, #31
 800a082:	d404      	bmi.n	800a08e <_fflush_r+0x3a>
 800a084:	0599      	lsls	r1, r3, #22
 800a086:	d402      	bmi.n	800a08e <_fflush_r+0x3a>
 800a088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a08a:	f7fe ffe0 	bl	800904e <__retarget_lock_acquire_recursive>
 800a08e:	4628      	mov	r0, r5
 800a090:	4621      	mov	r1, r4
 800a092:	f7ff ff59 	bl	8009f48 <__sflush_r>
 800a096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a098:	07da      	lsls	r2, r3, #31
 800a09a:	4605      	mov	r5, r0
 800a09c:	d4e0      	bmi.n	800a060 <_fflush_r+0xc>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	059b      	lsls	r3, r3, #22
 800a0a2:	d4dd      	bmi.n	800a060 <_fflush_r+0xc>
 800a0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0a6:	f7fe ffd3 	bl	8009050 <__retarget_lock_release_recursive>
 800a0aa:	e7d9      	b.n	800a060 <_fflush_r+0xc>
 800a0ac:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <_fflush_r+0x70>)
 800a0ae:	429c      	cmp	r4, r3
 800a0b0:	d101      	bne.n	800a0b6 <_fflush_r+0x62>
 800a0b2:	68ac      	ldr	r4, [r5, #8]
 800a0b4:	e7df      	b.n	800a076 <_fflush_r+0x22>
 800a0b6:	4b04      	ldr	r3, [pc, #16]	; (800a0c8 <_fflush_r+0x74>)
 800a0b8:	429c      	cmp	r4, r3
 800a0ba:	bf08      	it	eq
 800a0bc:	68ec      	ldreq	r4, [r5, #12]
 800a0be:	e7da      	b.n	800a076 <_fflush_r+0x22>
 800a0c0:	0800bdac 	.word	0x0800bdac
 800a0c4:	0800bdcc 	.word	0x0800bdcc
 800a0c8:	0800bd8c 	.word	0x0800bd8c

0800a0cc <rshift>:
 800a0cc:	6903      	ldr	r3, [r0, #16]
 800a0ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0da:	f100 0414 	add.w	r4, r0, #20
 800a0de:	dd45      	ble.n	800a16c <rshift+0xa0>
 800a0e0:	f011 011f 	ands.w	r1, r1, #31
 800a0e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0ec:	d10c      	bne.n	800a108 <rshift+0x3c>
 800a0ee:	f100 0710 	add.w	r7, r0, #16
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	42b1      	cmp	r1, r6
 800a0f6:	d334      	bcc.n	800a162 <rshift+0x96>
 800a0f8:	1a9b      	subs	r3, r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	1eea      	subs	r2, r5, #3
 800a0fe:	4296      	cmp	r6, r2
 800a100:	bf38      	it	cc
 800a102:	2300      	movcc	r3, #0
 800a104:	4423      	add	r3, r4
 800a106:	e015      	b.n	800a134 <rshift+0x68>
 800a108:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a10c:	f1c1 0820 	rsb	r8, r1, #32
 800a110:	40cf      	lsrs	r7, r1
 800a112:	f105 0e04 	add.w	lr, r5, #4
 800a116:	46a1      	mov	r9, r4
 800a118:	4576      	cmp	r6, lr
 800a11a:	46f4      	mov	ip, lr
 800a11c:	d815      	bhi.n	800a14a <rshift+0x7e>
 800a11e:	1a9a      	subs	r2, r3, r2
 800a120:	0092      	lsls	r2, r2, #2
 800a122:	3a04      	subs	r2, #4
 800a124:	3501      	adds	r5, #1
 800a126:	42ae      	cmp	r6, r5
 800a128:	bf38      	it	cc
 800a12a:	2200      	movcc	r2, #0
 800a12c:	18a3      	adds	r3, r4, r2
 800a12e:	50a7      	str	r7, [r4, r2]
 800a130:	b107      	cbz	r7, 800a134 <rshift+0x68>
 800a132:	3304      	adds	r3, #4
 800a134:	1b1a      	subs	r2, r3, r4
 800a136:	42a3      	cmp	r3, r4
 800a138:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a13c:	bf08      	it	eq
 800a13e:	2300      	moveq	r3, #0
 800a140:	6102      	str	r2, [r0, #16]
 800a142:	bf08      	it	eq
 800a144:	6143      	streq	r3, [r0, #20]
 800a146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a14a:	f8dc c000 	ldr.w	ip, [ip]
 800a14e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a152:	ea4c 0707 	orr.w	r7, ip, r7
 800a156:	f849 7b04 	str.w	r7, [r9], #4
 800a15a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a15e:	40cf      	lsrs	r7, r1
 800a160:	e7da      	b.n	800a118 <rshift+0x4c>
 800a162:	f851 cb04 	ldr.w	ip, [r1], #4
 800a166:	f847 cf04 	str.w	ip, [r7, #4]!
 800a16a:	e7c3      	b.n	800a0f4 <rshift+0x28>
 800a16c:	4623      	mov	r3, r4
 800a16e:	e7e1      	b.n	800a134 <rshift+0x68>

0800a170 <__hexdig_fun>:
 800a170:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a174:	2b09      	cmp	r3, #9
 800a176:	d802      	bhi.n	800a17e <__hexdig_fun+0xe>
 800a178:	3820      	subs	r0, #32
 800a17a:	b2c0      	uxtb	r0, r0
 800a17c:	4770      	bx	lr
 800a17e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a182:	2b05      	cmp	r3, #5
 800a184:	d801      	bhi.n	800a18a <__hexdig_fun+0x1a>
 800a186:	3847      	subs	r0, #71	; 0x47
 800a188:	e7f7      	b.n	800a17a <__hexdig_fun+0xa>
 800a18a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a18e:	2b05      	cmp	r3, #5
 800a190:	d801      	bhi.n	800a196 <__hexdig_fun+0x26>
 800a192:	3827      	subs	r0, #39	; 0x27
 800a194:	e7f1      	b.n	800a17a <__hexdig_fun+0xa>
 800a196:	2000      	movs	r0, #0
 800a198:	4770      	bx	lr
	...

0800a19c <__gethex>:
 800a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	ed2d 8b02 	vpush	{d8}
 800a1a4:	b089      	sub	sp, #36	; 0x24
 800a1a6:	ee08 0a10 	vmov	s16, r0
 800a1aa:	9304      	str	r3, [sp, #16]
 800a1ac:	4bb4      	ldr	r3, [pc, #720]	; (800a480 <__gethex+0x2e4>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	468b      	mov	fp, r1
 800a1b6:	4690      	mov	r8, r2
 800a1b8:	f7f6 f842 	bl	8000240 <strlen>
 800a1bc:	9b01      	ldr	r3, [sp, #4]
 800a1be:	f8db 2000 	ldr.w	r2, [fp]
 800a1c2:	4403      	add	r3, r0
 800a1c4:	4682      	mov	sl, r0
 800a1c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a1ca:	9305      	str	r3, [sp, #20]
 800a1cc:	1c93      	adds	r3, r2, #2
 800a1ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a1d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a1d6:	32fe      	adds	r2, #254	; 0xfe
 800a1d8:	18d1      	adds	r1, r2, r3
 800a1da:	461f      	mov	r7, r3
 800a1dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1e0:	9100      	str	r1, [sp, #0]
 800a1e2:	2830      	cmp	r0, #48	; 0x30
 800a1e4:	d0f8      	beq.n	800a1d8 <__gethex+0x3c>
 800a1e6:	f7ff ffc3 	bl	800a170 <__hexdig_fun>
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d13a      	bne.n	800a266 <__gethex+0xca>
 800a1f0:	9901      	ldr	r1, [sp, #4]
 800a1f2:	4652      	mov	r2, sl
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7ff f894 	bl	8009322 <strncmp>
 800a1fa:	4605      	mov	r5, r0
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d168      	bne.n	800a2d2 <__gethex+0x136>
 800a200:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a204:	eb07 060a 	add.w	r6, r7, sl
 800a208:	f7ff ffb2 	bl	800a170 <__hexdig_fun>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d062      	beq.n	800a2d6 <__gethex+0x13a>
 800a210:	4633      	mov	r3, r6
 800a212:	7818      	ldrb	r0, [r3, #0]
 800a214:	2830      	cmp	r0, #48	; 0x30
 800a216:	461f      	mov	r7, r3
 800a218:	f103 0301 	add.w	r3, r3, #1
 800a21c:	d0f9      	beq.n	800a212 <__gethex+0x76>
 800a21e:	f7ff ffa7 	bl	800a170 <__hexdig_fun>
 800a222:	2301      	movs	r3, #1
 800a224:	fab0 f480 	clz	r4, r0
 800a228:	0964      	lsrs	r4, r4, #5
 800a22a:	4635      	mov	r5, r6
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	463a      	mov	r2, r7
 800a230:	4616      	mov	r6, r2
 800a232:	3201      	adds	r2, #1
 800a234:	7830      	ldrb	r0, [r6, #0]
 800a236:	f7ff ff9b 	bl	800a170 <__hexdig_fun>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d1f8      	bne.n	800a230 <__gethex+0x94>
 800a23e:	9901      	ldr	r1, [sp, #4]
 800a240:	4652      	mov	r2, sl
 800a242:	4630      	mov	r0, r6
 800a244:	f7ff f86d 	bl	8009322 <strncmp>
 800a248:	b980      	cbnz	r0, 800a26c <__gethex+0xd0>
 800a24a:	b94d      	cbnz	r5, 800a260 <__gethex+0xc4>
 800a24c:	eb06 050a 	add.w	r5, r6, sl
 800a250:	462a      	mov	r2, r5
 800a252:	4616      	mov	r6, r2
 800a254:	3201      	adds	r2, #1
 800a256:	7830      	ldrb	r0, [r6, #0]
 800a258:	f7ff ff8a 	bl	800a170 <__hexdig_fun>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d1f8      	bne.n	800a252 <__gethex+0xb6>
 800a260:	1bad      	subs	r5, r5, r6
 800a262:	00ad      	lsls	r5, r5, #2
 800a264:	e004      	b.n	800a270 <__gethex+0xd4>
 800a266:	2400      	movs	r4, #0
 800a268:	4625      	mov	r5, r4
 800a26a:	e7e0      	b.n	800a22e <__gethex+0x92>
 800a26c:	2d00      	cmp	r5, #0
 800a26e:	d1f7      	bne.n	800a260 <__gethex+0xc4>
 800a270:	7833      	ldrb	r3, [r6, #0]
 800a272:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a276:	2b50      	cmp	r3, #80	; 0x50
 800a278:	d13b      	bne.n	800a2f2 <__gethex+0x156>
 800a27a:	7873      	ldrb	r3, [r6, #1]
 800a27c:	2b2b      	cmp	r3, #43	; 0x2b
 800a27e:	d02c      	beq.n	800a2da <__gethex+0x13e>
 800a280:	2b2d      	cmp	r3, #45	; 0x2d
 800a282:	d02e      	beq.n	800a2e2 <__gethex+0x146>
 800a284:	1c71      	adds	r1, r6, #1
 800a286:	f04f 0900 	mov.w	r9, #0
 800a28a:	7808      	ldrb	r0, [r1, #0]
 800a28c:	f7ff ff70 	bl	800a170 <__hexdig_fun>
 800a290:	1e43      	subs	r3, r0, #1
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b18      	cmp	r3, #24
 800a296:	d82c      	bhi.n	800a2f2 <__gethex+0x156>
 800a298:	f1a0 0210 	sub.w	r2, r0, #16
 800a29c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a2a0:	f7ff ff66 	bl	800a170 <__hexdig_fun>
 800a2a4:	1e43      	subs	r3, r0, #1
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b18      	cmp	r3, #24
 800a2aa:	d91d      	bls.n	800a2e8 <__gethex+0x14c>
 800a2ac:	f1b9 0f00 	cmp.w	r9, #0
 800a2b0:	d000      	beq.n	800a2b4 <__gethex+0x118>
 800a2b2:	4252      	negs	r2, r2
 800a2b4:	4415      	add	r5, r2
 800a2b6:	f8cb 1000 	str.w	r1, [fp]
 800a2ba:	b1e4      	cbz	r4, 800a2f6 <__gethex+0x15a>
 800a2bc:	9b00      	ldr	r3, [sp, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	bf14      	ite	ne
 800a2c2:	2700      	movne	r7, #0
 800a2c4:	2706      	moveq	r7, #6
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	b009      	add	sp, #36	; 0x24
 800a2ca:	ecbd 8b02 	vpop	{d8}
 800a2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d2:	463e      	mov	r6, r7
 800a2d4:	4625      	mov	r5, r4
 800a2d6:	2401      	movs	r4, #1
 800a2d8:	e7ca      	b.n	800a270 <__gethex+0xd4>
 800a2da:	f04f 0900 	mov.w	r9, #0
 800a2de:	1cb1      	adds	r1, r6, #2
 800a2e0:	e7d3      	b.n	800a28a <__gethex+0xee>
 800a2e2:	f04f 0901 	mov.w	r9, #1
 800a2e6:	e7fa      	b.n	800a2de <__gethex+0x142>
 800a2e8:	230a      	movs	r3, #10
 800a2ea:	fb03 0202 	mla	r2, r3, r2, r0
 800a2ee:	3a10      	subs	r2, #16
 800a2f0:	e7d4      	b.n	800a29c <__gethex+0x100>
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	e7df      	b.n	800a2b6 <__gethex+0x11a>
 800a2f6:	1bf3      	subs	r3, r6, r7
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	2b07      	cmp	r3, #7
 800a2fe:	dc0b      	bgt.n	800a318 <__gethex+0x17c>
 800a300:	ee18 0a10 	vmov	r0, s16
 800a304:	f000 fa82 	bl	800a80c <_Balloc>
 800a308:	4604      	mov	r4, r0
 800a30a:	b940      	cbnz	r0, 800a31e <__gethex+0x182>
 800a30c:	4b5d      	ldr	r3, [pc, #372]	; (800a484 <__gethex+0x2e8>)
 800a30e:	4602      	mov	r2, r0
 800a310:	21de      	movs	r1, #222	; 0xde
 800a312:	485d      	ldr	r0, [pc, #372]	; (800a488 <__gethex+0x2ec>)
 800a314:	f000 ffc2 	bl	800b29c <__assert_func>
 800a318:	3101      	adds	r1, #1
 800a31a:	105b      	asrs	r3, r3, #1
 800a31c:	e7ee      	b.n	800a2fc <__gethex+0x160>
 800a31e:	f100 0914 	add.w	r9, r0, #20
 800a322:	f04f 0b00 	mov.w	fp, #0
 800a326:	f1ca 0301 	rsb	r3, sl, #1
 800a32a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a32e:	f8cd b000 	str.w	fp, [sp]
 800a332:	9306      	str	r3, [sp, #24]
 800a334:	42b7      	cmp	r7, r6
 800a336:	d340      	bcc.n	800a3ba <__gethex+0x21e>
 800a338:	9802      	ldr	r0, [sp, #8]
 800a33a:	9b00      	ldr	r3, [sp, #0]
 800a33c:	f840 3b04 	str.w	r3, [r0], #4
 800a340:	eba0 0009 	sub.w	r0, r0, r9
 800a344:	1080      	asrs	r0, r0, #2
 800a346:	0146      	lsls	r6, r0, #5
 800a348:	6120      	str	r0, [r4, #16]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fb50 	bl	800a9f0 <__hi0bits>
 800a350:	1a30      	subs	r0, r6, r0
 800a352:	f8d8 6000 	ldr.w	r6, [r8]
 800a356:	42b0      	cmp	r0, r6
 800a358:	dd63      	ble.n	800a422 <__gethex+0x286>
 800a35a:	1b87      	subs	r7, r0, r6
 800a35c:	4639      	mov	r1, r7
 800a35e:	4620      	mov	r0, r4
 800a360:	f000 fef1 	bl	800b146 <__any_on>
 800a364:	4682      	mov	sl, r0
 800a366:	b1a8      	cbz	r0, 800a394 <__gethex+0x1f8>
 800a368:	1e7b      	subs	r3, r7, #1
 800a36a:	1159      	asrs	r1, r3, #5
 800a36c:	f003 021f 	and.w	r2, r3, #31
 800a370:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a374:	f04f 0a01 	mov.w	sl, #1
 800a378:	fa0a f202 	lsl.w	r2, sl, r2
 800a37c:	420a      	tst	r2, r1
 800a37e:	d009      	beq.n	800a394 <__gethex+0x1f8>
 800a380:	4553      	cmp	r3, sl
 800a382:	dd05      	ble.n	800a390 <__gethex+0x1f4>
 800a384:	1eb9      	subs	r1, r7, #2
 800a386:	4620      	mov	r0, r4
 800a388:	f000 fedd 	bl	800b146 <__any_on>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d145      	bne.n	800a41c <__gethex+0x280>
 800a390:	f04f 0a02 	mov.w	sl, #2
 800a394:	4639      	mov	r1, r7
 800a396:	4620      	mov	r0, r4
 800a398:	f7ff fe98 	bl	800a0cc <rshift>
 800a39c:	443d      	add	r5, r7
 800a39e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3a2:	42ab      	cmp	r3, r5
 800a3a4:	da4c      	bge.n	800a440 <__gethex+0x2a4>
 800a3a6:	ee18 0a10 	vmov	r0, s16
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	f000 fa6e 	bl	800a88c <_Bfree>
 800a3b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	27a3      	movs	r7, #163	; 0xa3
 800a3b8:	e785      	b.n	800a2c6 <__gethex+0x12a>
 800a3ba:	1e73      	subs	r3, r6, #1
 800a3bc:	9a05      	ldr	r2, [sp, #20]
 800a3be:	9303      	str	r3, [sp, #12]
 800a3c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d019      	beq.n	800a3fc <__gethex+0x260>
 800a3c8:	f1bb 0f20 	cmp.w	fp, #32
 800a3cc:	d107      	bne.n	800a3de <__gethex+0x242>
 800a3ce:	9b02      	ldr	r3, [sp, #8]
 800a3d0:	9a00      	ldr	r2, [sp, #0]
 800a3d2:	f843 2b04 	str.w	r2, [r3], #4
 800a3d6:	9302      	str	r3, [sp, #8]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	469b      	mov	fp, r3
 800a3de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a3e2:	f7ff fec5 	bl	800a170 <__hexdig_fun>
 800a3e6:	9b00      	ldr	r3, [sp, #0]
 800a3e8:	f000 000f 	and.w	r0, r0, #15
 800a3ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800a3f0:	4303      	orrs	r3, r0
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	f10b 0b04 	add.w	fp, fp, #4
 800a3f8:	9b03      	ldr	r3, [sp, #12]
 800a3fa:	e00d      	b.n	800a418 <__gethex+0x27c>
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	9a06      	ldr	r2, [sp, #24]
 800a400:	4413      	add	r3, r2
 800a402:	42bb      	cmp	r3, r7
 800a404:	d3e0      	bcc.n	800a3c8 <__gethex+0x22c>
 800a406:	4618      	mov	r0, r3
 800a408:	9901      	ldr	r1, [sp, #4]
 800a40a:	9307      	str	r3, [sp, #28]
 800a40c:	4652      	mov	r2, sl
 800a40e:	f7fe ff88 	bl	8009322 <strncmp>
 800a412:	9b07      	ldr	r3, [sp, #28]
 800a414:	2800      	cmp	r0, #0
 800a416:	d1d7      	bne.n	800a3c8 <__gethex+0x22c>
 800a418:	461e      	mov	r6, r3
 800a41a:	e78b      	b.n	800a334 <__gethex+0x198>
 800a41c:	f04f 0a03 	mov.w	sl, #3
 800a420:	e7b8      	b.n	800a394 <__gethex+0x1f8>
 800a422:	da0a      	bge.n	800a43a <__gethex+0x29e>
 800a424:	1a37      	subs	r7, r6, r0
 800a426:	4621      	mov	r1, r4
 800a428:	ee18 0a10 	vmov	r0, s16
 800a42c:	463a      	mov	r2, r7
 800a42e:	f000 fc49 	bl	800acc4 <__lshift>
 800a432:	1bed      	subs	r5, r5, r7
 800a434:	4604      	mov	r4, r0
 800a436:	f100 0914 	add.w	r9, r0, #20
 800a43a:	f04f 0a00 	mov.w	sl, #0
 800a43e:	e7ae      	b.n	800a39e <__gethex+0x202>
 800a440:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a444:	42a8      	cmp	r0, r5
 800a446:	dd72      	ble.n	800a52e <__gethex+0x392>
 800a448:	1b45      	subs	r5, r0, r5
 800a44a:	42ae      	cmp	r6, r5
 800a44c:	dc36      	bgt.n	800a4bc <__gethex+0x320>
 800a44e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a452:	2b02      	cmp	r3, #2
 800a454:	d02a      	beq.n	800a4ac <__gethex+0x310>
 800a456:	2b03      	cmp	r3, #3
 800a458:	d02c      	beq.n	800a4b4 <__gethex+0x318>
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d11c      	bne.n	800a498 <__gethex+0x2fc>
 800a45e:	42ae      	cmp	r6, r5
 800a460:	d11a      	bne.n	800a498 <__gethex+0x2fc>
 800a462:	2e01      	cmp	r6, #1
 800a464:	d112      	bne.n	800a48c <__gethex+0x2f0>
 800a466:	9a04      	ldr	r2, [sp, #16]
 800a468:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	2301      	movs	r3, #1
 800a470:	6123      	str	r3, [r4, #16]
 800a472:	f8c9 3000 	str.w	r3, [r9]
 800a476:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a478:	2762      	movs	r7, #98	; 0x62
 800a47a:	601c      	str	r4, [r3, #0]
 800a47c:	e723      	b.n	800a2c6 <__gethex+0x12a>
 800a47e:	bf00      	nop
 800a480:	0800bec8 	.word	0x0800bec8
 800a484:	0800be50 	.word	0x0800be50
 800a488:	0800be61 	.word	0x0800be61
 800a48c:	1e71      	subs	r1, r6, #1
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 fe59 	bl	800b146 <__any_on>
 800a494:	2800      	cmp	r0, #0
 800a496:	d1e6      	bne.n	800a466 <__gethex+0x2ca>
 800a498:	ee18 0a10 	vmov	r0, s16
 800a49c:	4621      	mov	r1, r4
 800a49e:	f000 f9f5 	bl	800a88c <_Bfree>
 800a4a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	2750      	movs	r7, #80	; 0x50
 800a4aa:	e70c      	b.n	800a2c6 <__gethex+0x12a>
 800a4ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f2      	bne.n	800a498 <__gethex+0x2fc>
 800a4b2:	e7d8      	b.n	800a466 <__gethex+0x2ca>
 800a4b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1d5      	bne.n	800a466 <__gethex+0x2ca>
 800a4ba:	e7ed      	b.n	800a498 <__gethex+0x2fc>
 800a4bc:	1e6f      	subs	r7, r5, #1
 800a4be:	f1ba 0f00 	cmp.w	sl, #0
 800a4c2:	d131      	bne.n	800a528 <__gethex+0x38c>
 800a4c4:	b127      	cbz	r7, 800a4d0 <__gethex+0x334>
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fe3c 	bl	800b146 <__any_on>
 800a4ce:	4682      	mov	sl, r0
 800a4d0:	117b      	asrs	r3, r7, #5
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a4d8:	f007 071f 	and.w	r7, r7, #31
 800a4dc:	fa01 f707 	lsl.w	r7, r1, r7
 800a4e0:	421f      	tst	r7, r3
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	bf18      	it	ne
 800a4e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a4ec:	1b76      	subs	r6, r6, r5
 800a4ee:	f7ff fded 	bl	800a0cc <rshift>
 800a4f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4f6:	2702      	movs	r7, #2
 800a4f8:	f1ba 0f00 	cmp.w	sl, #0
 800a4fc:	d048      	beq.n	800a590 <__gethex+0x3f4>
 800a4fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d015      	beq.n	800a532 <__gethex+0x396>
 800a506:	2b03      	cmp	r3, #3
 800a508:	d017      	beq.n	800a53a <__gethex+0x39e>
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d109      	bne.n	800a522 <__gethex+0x386>
 800a50e:	f01a 0f02 	tst.w	sl, #2
 800a512:	d006      	beq.n	800a522 <__gethex+0x386>
 800a514:	f8d9 0000 	ldr.w	r0, [r9]
 800a518:	ea4a 0a00 	orr.w	sl, sl, r0
 800a51c:	f01a 0f01 	tst.w	sl, #1
 800a520:	d10e      	bne.n	800a540 <__gethex+0x3a4>
 800a522:	f047 0710 	orr.w	r7, r7, #16
 800a526:	e033      	b.n	800a590 <__gethex+0x3f4>
 800a528:	f04f 0a01 	mov.w	sl, #1
 800a52c:	e7d0      	b.n	800a4d0 <__gethex+0x334>
 800a52e:	2701      	movs	r7, #1
 800a530:	e7e2      	b.n	800a4f8 <__gethex+0x35c>
 800a532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a534:	f1c3 0301 	rsb	r3, r3, #1
 800a538:	9315      	str	r3, [sp, #84]	; 0x54
 800a53a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0f0      	beq.n	800a522 <__gethex+0x386>
 800a540:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a544:	f104 0314 	add.w	r3, r4, #20
 800a548:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a54c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a550:	f04f 0c00 	mov.w	ip, #0
 800a554:	4618      	mov	r0, r3
 800a556:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a55e:	d01c      	beq.n	800a59a <__gethex+0x3fe>
 800a560:	3201      	adds	r2, #1
 800a562:	6002      	str	r2, [r0, #0]
 800a564:	2f02      	cmp	r7, #2
 800a566:	f104 0314 	add.w	r3, r4, #20
 800a56a:	d13f      	bne.n	800a5ec <__gethex+0x450>
 800a56c:	f8d8 2000 	ldr.w	r2, [r8]
 800a570:	3a01      	subs	r2, #1
 800a572:	42b2      	cmp	r2, r6
 800a574:	d10a      	bne.n	800a58c <__gethex+0x3f0>
 800a576:	1171      	asrs	r1, r6, #5
 800a578:	2201      	movs	r2, #1
 800a57a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a57e:	f006 061f 	and.w	r6, r6, #31
 800a582:	fa02 f606 	lsl.w	r6, r2, r6
 800a586:	421e      	tst	r6, r3
 800a588:	bf18      	it	ne
 800a58a:	4617      	movne	r7, r2
 800a58c:	f047 0720 	orr.w	r7, r7, #32
 800a590:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a592:	601c      	str	r4, [r3, #0]
 800a594:	9b04      	ldr	r3, [sp, #16]
 800a596:	601d      	str	r5, [r3, #0]
 800a598:	e695      	b.n	800a2c6 <__gethex+0x12a>
 800a59a:	4299      	cmp	r1, r3
 800a59c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a5a0:	d8d8      	bhi.n	800a554 <__gethex+0x3b8>
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	459b      	cmp	fp, r3
 800a5a6:	db19      	blt.n	800a5dc <__gethex+0x440>
 800a5a8:	6861      	ldr	r1, [r4, #4]
 800a5aa:	ee18 0a10 	vmov	r0, s16
 800a5ae:	3101      	adds	r1, #1
 800a5b0:	f000 f92c 	bl	800a80c <_Balloc>
 800a5b4:	4681      	mov	r9, r0
 800a5b6:	b918      	cbnz	r0, 800a5c0 <__gethex+0x424>
 800a5b8:	4b1a      	ldr	r3, [pc, #104]	; (800a624 <__gethex+0x488>)
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	2184      	movs	r1, #132	; 0x84
 800a5be:	e6a8      	b.n	800a312 <__gethex+0x176>
 800a5c0:	6922      	ldr	r2, [r4, #16]
 800a5c2:	3202      	adds	r2, #2
 800a5c4:	f104 010c 	add.w	r1, r4, #12
 800a5c8:	0092      	lsls	r2, r2, #2
 800a5ca:	300c      	adds	r0, #12
 800a5cc:	f7fe fd41 	bl	8009052 <memcpy>
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	ee18 0a10 	vmov	r0, s16
 800a5d6:	f000 f959 	bl	800a88c <_Bfree>
 800a5da:	464c      	mov	r4, r9
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5e4:	6122      	str	r2, [r4, #16]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	615a      	str	r2, [r3, #20]
 800a5ea:	e7bb      	b.n	800a564 <__gethex+0x3c8>
 800a5ec:	6922      	ldr	r2, [r4, #16]
 800a5ee:	455a      	cmp	r2, fp
 800a5f0:	dd0b      	ble.n	800a60a <__gethex+0x46e>
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f7ff fd69 	bl	800a0cc <rshift>
 800a5fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5fe:	3501      	adds	r5, #1
 800a600:	42ab      	cmp	r3, r5
 800a602:	f6ff aed0 	blt.w	800a3a6 <__gethex+0x20a>
 800a606:	2701      	movs	r7, #1
 800a608:	e7c0      	b.n	800a58c <__gethex+0x3f0>
 800a60a:	f016 061f 	ands.w	r6, r6, #31
 800a60e:	d0fa      	beq.n	800a606 <__gethex+0x46a>
 800a610:	4453      	add	r3, sl
 800a612:	f1c6 0620 	rsb	r6, r6, #32
 800a616:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a61a:	f000 f9e9 	bl	800a9f0 <__hi0bits>
 800a61e:	42b0      	cmp	r0, r6
 800a620:	dbe7      	blt.n	800a5f2 <__gethex+0x456>
 800a622:	e7f0      	b.n	800a606 <__gethex+0x46a>
 800a624:	0800be50 	.word	0x0800be50

0800a628 <L_shift>:
 800a628:	f1c2 0208 	rsb	r2, r2, #8
 800a62c:	0092      	lsls	r2, r2, #2
 800a62e:	b570      	push	{r4, r5, r6, lr}
 800a630:	f1c2 0620 	rsb	r6, r2, #32
 800a634:	6843      	ldr	r3, [r0, #4]
 800a636:	6804      	ldr	r4, [r0, #0]
 800a638:	fa03 f506 	lsl.w	r5, r3, r6
 800a63c:	432c      	orrs	r4, r5
 800a63e:	40d3      	lsrs	r3, r2
 800a640:	6004      	str	r4, [r0, #0]
 800a642:	f840 3f04 	str.w	r3, [r0, #4]!
 800a646:	4288      	cmp	r0, r1
 800a648:	d3f4      	bcc.n	800a634 <L_shift+0xc>
 800a64a:	bd70      	pop	{r4, r5, r6, pc}

0800a64c <__match>:
 800a64c:	b530      	push	{r4, r5, lr}
 800a64e:	6803      	ldr	r3, [r0, #0]
 800a650:	3301      	adds	r3, #1
 800a652:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a656:	b914      	cbnz	r4, 800a65e <__match+0x12>
 800a658:	6003      	str	r3, [r0, #0]
 800a65a:	2001      	movs	r0, #1
 800a65c:	bd30      	pop	{r4, r5, pc}
 800a65e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a662:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a666:	2d19      	cmp	r5, #25
 800a668:	bf98      	it	ls
 800a66a:	3220      	addls	r2, #32
 800a66c:	42a2      	cmp	r2, r4
 800a66e:	d0f0      	beq.n	800a652 <__match+0x6>
 800a670:	2000      	movs	r0, #0
 800a672:	e7f3      	b.n	800a65c <__match+0x10>

0800a674 <__hexnan>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	680b      	ldr	r3, [r1, #0]
 800a67a:	115e      	asrs	r6, r3, #5
 800a67c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a680:	f013 031f 	ands.w	r3, r3, #31
 800a684:	b087      	sub	sp, #28
 800a686:	bf18      	it	ne
 800a688:	3604      	addne	r6, #4
 800a68a:	2500      	movs	r5, #0
 800a68c:	1f37      	subs	r7, r6, #4
 800a68e:	4690      	mov	r8, r2
 800a690:	6802      	ldr	r2, [r0, #0]
 800a692:	9301      	str	r3, [sp, #4]
 800a694:	4682      	mov	sl, r0
 800a696:	f846 5c04 	str.w	r5, [r6, #-4]
 800a69a:	46b9      	mov	r9, r7
 800a69c:	463c      	mov	r4, r7
 800a69e:	9502      	str	r5, [sp, #8]
 800a6a0:	46ab      	mov	fp, r5
 800a6a2:	7851      	ldrb	r1, [r2, #1]
 800a6a4:	1c53      	adds	r3, r2, #1
 800a6a6:	9303      	str	r3, [sp, #12]
 800a6a8:	b341      	cbz	r1, 800a6fc <__hexnan+0x88>
 800a6aa:	4608      	mov	r0, r1
 800a6ac:	9205      	str	r2, [sp, #20]
 800a6ae:	9104      	str	r1, [sp, #16]
 800a6b0:	f7ff fd5e 	bl	800a170 <__hexdig_fun>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d14f      	bne.n	800a758 <__hexnan+0xe4>
 800a6b8:	9904      	ldr	r1, [sp, #16]
 800a6ba:	9a05      	ldr	r2, [sp, #20]
 800a6bc:	2920      	cmp	r1, #32
 800a6be:	d818      	bhi.n	800a6f2 <__hexnan+0x7e>
 800a6c0:	9b02      	ldr	r3, [sp, #8]
 800a6c2:	459b      	cmp	fp, r3
 800a6c4:	dd13      	ble.n	800a6ee <__hexnan+0x7a>
 800a6c6:	454c      	cmp	r4, r9
 800a6c8:	d206      	bcs.n	800a6d8 <__hexnan+0x64>
 800a6ca:	2d07      	cmp	r5, #7
 800a6cc:	dc04      	bgt.n	800a6d8 <__hexnan+0x64>
 800a6ce:	462a      	mov	r2, r5
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7ff ffa8 	bl	800a628 <L_shift>
 800a6d8:	4544      	cmp	r4, r8
 800a6da:	d950      	bls.n	800a77e <__hexnan+0x10a>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f1a4 0904 	sub.w	r9, r4, #4
 800a6e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6e6:	f8cd b008 	str.w	fp, [sp, #8]
 800a6ea:	464c      	mov	r4, r9
 800a6ec:	461d      	mov	r5, r3
 800a6ee:	9a03      	ldr	r2, [sp, #12]
 800a6f0:	e7d7      	b.n	800a6a2 <__hexnan+0x2e>
 800a6f2:	2929      	cmp	r1, #41	; 0x29
 800a6f4:	d156      	bne.n	800a7a4 <__hexnan+0x130>
 800a6f6:	3202      	adds	r2, #2
 800a6f8:	f8ca 2000 	str.w	r2, [sl]
 800a6fc:	f1bb 0f00 	cmp.w	fp, #0
 800a700:	d050      	beq.n	800a7a4 <__hexnan+0x130>
 800a702:	454c      	cmp	r4, r9
 800a704:	d206      	bcs.n	800a714 <__hexnan+0xa0>
 800a706:	2d07      	cmp	r5, #7
 800a708:	dc04      	bgt.n	800a714 <__hexnan+0xa0>
 800a70a:	462a      	mov	r2, r5
 800a70c:	4649      	mov	r1, r9
 800a70e:	4620      	mov	r0, r4
 800a710:	f7ff ff8a 	bl	800a628 <L_shift>
 800a714:	4544      	cmp	r4, r8
 800a716:	d934      	bls.n	800a782 <__hexnan+0x10e>
 800a718:	f1a8 0204 	sub.w	r2, r8, #4
 800a71c:	4623      	mov	r3, r4
 800a71e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a722:	f842 1f04 	str.w	r1, [r2, #4]!
 800a726:	429f      	cmp	r7, r3
 800a728:	d2f9      	bcs.n	800a71e <__hexnan+0xaa>
 800a72a:	1b3b      	subs	r3, r7, r4
 800a72c:	f023 0303 	bic.w	r3, r3, #3
 800a730:	3304      	adds	r3, #4
 800a732:	3401      	adds	r4, #1
 800a734:	3e03      	subs	r6, #3
 800a736:	42b4      	cmp	r4, r6
 800a738:	bf88      	it	hi
 800a73a:	2304      	movhi	r3, #4
 800a73c:	4443      	add	r3, r8
 800a73e:	2200      	movs	r2, #0
 800a740:	f843 2b04 	str.w	r2, [r3], #4
 800a744:	429f      	cmp	r7, r3
 800a746:	d2fb      	bcs.n	800a740 <__hexnan+0xcc>
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	b91b      	cbnz	r3, 800a754 <__hexnan+0xe0>
 800a74c:	4547      	cmp	r7, r8
 800a74e:	d127      	bne.n	800a7a0 <__hexnan+0x12c>
 800a750:	2301      	movs	r3, #1
 800a752:	603b      	str	r3, [r7, #0]
 800a754:	2005      	movs	r0, #5
 800a756:	e026      	b.n	800a7a6 <__hexnan+0x132>
 800a758:	3501      	adds	r5, #1
 800a75a:	2d08      	cmp	r5, #8
 800a75c:	f10b 0b01 	add.w	fp, fp, #1
 800a760:	dd06      	ble.n	800a770 <__hexnan+0xfc>
 800a762:	4544      	cmp	r4, r8
 800a764:	d9c3      	bls.n	800a6ee <__hexnan+0x7a>
 800a766:	2300      	movs	r3, #0
 800a768:	f844 3c04 	str.w	r3, [r4, #-4]
 800a76c:	2501      	movs	r5, #1
 800a76e:	3c04      	subs	r4, #4
 800a770:	6822      	ldr	r2, [r4, #0]
 800a772:	f000 000f 	and.w	r0, r0, #15
 800a776:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a77a:	6022      	str	r2, [r4, #0]
 800a77c:	e7b7      	b.n	800a6ee <__hexnan+0x7a>
 800a77e:	2508      	movs	r5, #8
 800a780:	e7b5      	b.n	800a6ee <__hexnan+0x7a>
 800a782:	9b01      	ldr	r3, [sp, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0df      	beq.n	800a748 <__hexnan+0xd4>
 800a788:	f04f 32ff 	mov.w	r2, #4294967295
 800a78c:	f1c3 0320 	rsb	r3, r3, #32
 800a790:	fa22 f303 	lsr.w	r3, r2, r3
 800a794:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a798:	401a      	ands	r2, r3
 800a79a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a79e:	e7d3      	b.n	800a748 <__hexnan+0xd4>
 800a7a0:	3f04      	subs	r7, #4
 800a7a2:	e7d1      	b.n	800a748 <__hexnan+0xd4>
 800a7a4:	2004      	movs	r0, #4
 800a7a6:	b007      	add	sp, #28
 800a7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7ac <_lseek_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4d07      	ldr	r5, [pc, #28]	; (800a7cc <_lseek_r+0x20>)
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	4608      	mov	r0, r1
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	602a      	str	r2, [r5, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f7f7 fa66 	bl	8001c8c <_lseek>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_lseek_r+0x1e>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_lseek_r+0x1e>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	20005658 	.word	0x20005658

0800a7d0 <__ascii_mbtowc>:
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	b901      	cbnz	r1, 800a7d6 <__ascii_mbtowc+0x6>
 800a7d4:	a901      	add	r1, sp, #4
 800a7d6:	b142      	cbz	r2, 800a7ea <__ascii_mbtowc+0x1a>
 800a7d8:	b14b      	cbz	r3, 800a7ee <__ascii_mbtowc+0x1e>
 800a7da:	7813      	ldrb	r3, [r2, #0]
 800a7dc:	600b      	str	r3, [r1, #0]
 800a7de:	7812      	ldrb	r2, [r2, #0]
 800a7e0:	1e10      	subs	r0, r2, #0
 800a7e2:	bf18      	it	ne
 800a7e4:	2001      	movne	r0, #1
 800a7e6:	b002      	add	sp, #8
 800a7e8:	4770      	bx	lr
 800a7ea:	4610      	mov	r0, r2
 800a7ec:	e7fb      	b.n	800a7e6 <__ascii_mbtowc+0x16>
 800a7ee:	f06f 0001 	mvn.w	r0, #1
 800a7f2:	e7f8      	b.n	800a7e6 <__ascii_mbtowc+0x16>

0800a7f4 <__malloc_lock>:
 800a7f4:	4801      	ldr	r0, [pc, #4]	; (800a7fc <__malloc_lock+0x8>)
 800a7f6:	f7fe bc2a 	b.w	800904e <__retarget_lock_acquire_recursive>
 800a7fa:	bf00      	nop
 800a7fc:	2000564c 	.word	0x2000564c

0800a800 <__malloc_unlock>:
 800a800:	4801      	ldr	r0, [pc, #4]	; (800a808 <__malloc_unlock+0x8>)
 800a802:	f7fe bc25 	b.w	8009050 <__retarget_lock_release_recursive>
 800a806:	bf00      	nop
 800a808:	2000564c 	.word	0x2000564c

0800a80c <_Balloc>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a810:	4604      	mov	r4, r0
 800a812:	460d      	mov	r5, r1
 800a814:	b976      	cbnz	r6, 800a834 <_Balloc+0x28>
 800a816:	2010      	movs	r0, #16
 800a818:	f000 fd70 	bl	800b2fc <malloc>
 800a81c:	4602      	mov	r2, r0
 800a81e:	6260      	str	r0, [r4, #36]	; 0x24
 800a820:	b920      	cbnz	r0, 800a82c <_Balloc+0x20>
 800a822:	4b18      	ldr	r3, [pc, #96]	; (800a884 <_Balloc+0x78>)
 800a824:	4818      	ldr	r0, [pc, #96]	; (800a888 <_Balloc+0x7c>)
 800a826:	2166      	movs	r1, #102	; 0x66
 800a828:	f000 fd38 	bl	800b29c <__assert_func>
 800a82c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a830:	6006      	str	r6, [r0, #0]
 800a832:	60c6      	str	r6, [r0, #12]
 800a834:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a836:	68f3      	ldr	r3, [r6, #12]
 800a838:	b183      	cbz	r3, 800a85c <_Balloc+0x50>
 800a83a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a842:	b9b8      	cbnz	r0, 800a874 <_Balloc+0x68>
 800a844:	2101      	movs	r1, #1
 800a846:	fa01 f605 	lsl.w	r6, r1, r5
 800a84a:	1d72      	adds	r2, r6, #5
 800a84c:	0092      	lsls	r2, r2, #2
 800a84e:	4620      	mov	r0, r4
 800a850:	f000 fc9a 	bl	800b188 <_calloc_r>
 800a854:	b160      	cbz	r0, 800a870 <_Balloc+0x64>
 800a856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a85a:	e00e      	b.n	800a87a <_Balloc+0x6e>
 800a85c:	2221      	movs	r2, #33	; 0x21
 800a85e:	2104      	movs	r1, #4
 800a860:	4620      	mov	r0, r4
 800a862:	f000 fc91 	bl	800b188 <_calloc_r>
 800a866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a868:	60f0      	str	r0, [r6, #12]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e4      	bne.n	800a83a <_Balloc+0x2e>
 800a870:	2000      	movs	r0, #0
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	6802      	ldr	r2, [r0, #0]
 800a876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a87a:	2300      	movs	r3, #0
 800a87c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a880:	e7f7      	b.n	800a872 <_Balloc+0x66>
 800a882:	bf00      	nop
 800a884:	0800bedc 	.word	0x0800bedc
 800a888:	0800bef3 	.word	0x0800bef3

0800a88c <_Bfree>:
 800a88c:	b570      	push	{r4, r5, r6, lr}
 800a88e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a890:	4605      	mov	r5, r0
 800a892:	460c      	mov	r4, r1
 800a894:	b976      	cbnz	r6, 800a8b4 <_Bfree+0x28>
 800a896:	2010      	movs	r0, #16
 800a898:	f000 fd30 	bl	800b2fc <malloc>
 800a89c:	4602      	mov	r2, r0
 800a89e:	6268      	str	r0, [r5, #36]	; 0x24
 800a8a0:	b920      	cbnz	r0, 800a8ac <_Bfree+0x20>
 800a8a2:	4b09      	ldr	r3, [pc, #36]	; (800a8c8 <_Bfree+0x3c>)
 800a8a4:	4809      	ldr	r0, [pc, #36]	; (800a8cc <_Bfree+0x40>)
 800a8a6:	218a      	movs	r1, #138	; 0x8a
 800a8a8:	f000 fcf8 	bl	800b29c <__assert_func>
 800a8ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8b0:	6006      	str	r6, [r0, #0]
 800a8b2:	60c6      	str	r6, [r0, #12]
 800a8b4:	b13c      	cbz	r4, 800a8c6 <_Bfree+0x3a>
 800a8b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8b8:	6862      	ldr	r2, [r4, #4]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8c0:	6021      	str	r1, [r4, #0]
 800a8c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8c6:	bd70      	pop	{r4, r5, r6, pc}
 800a8c8:	0800bedc 	.word	0x0800bedc
 800a8cc:	0800bef3 	.word	0x0800bef3

0800a8d0 <__multadd>:
 800a8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d4:	690d      	ldr	r5, [r1, #16]
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	460c      	mov	r4, r1
 800a8da:	461e      	mov	r6, r3
 800a8dc:	f101 0c14 	add.w	ip, r1, #20
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8e6:	b299      	uxth	r1, r3
 800a8e8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8ec:	0c1e      	lsrs	r6, r3, #16
 800a8ee:	0c0b      	lsrs	r3, r1, #16
 800a8f0:	fb02 3306 	mla	r3, r2, r6, r3
 800a8f4:	b289      	uxth	r1, r1
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8fc:	4285      	cmp	r5, r0
 800a8fe:	f84c 1b04 	str.w	r1, [ip], #4
 800a902:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a906:	dcec      	bgt.n	800a8e2 <__multadd+0x12>
 800a908:	b30e      	cbz	r6, 800a94e <__multadd+0x7e>
 800a90a:	68a3      	ldr	r3, [r4, #8]
 800a90c:	42ab      	cmp	r3, r5
 800a90e:	dc19      	bgt.n	800a944 <__multadd+0x74>
 800a910:	6861      	ldr	r1, [r4, #4]
 800a912:	4638      	mov	r0, r7
 800a914:	3101      	adds	r1, #1
 800a916:	f7ff ff79 	bl	800a80c <_Balloc>
 800a91a:	4680      	mov	r8, r0
 800a91c:	b928      	cbnz	r0, 800a92a <__multadd+0x5a>
 800a91e:	4602      	mov	r2, r0
 800a920:	4b0c      	ldr	r3, [pc, #48]	; (800a954 <__multadd+0x84>)
 800a922:	480d      	ldr	r0, [pc, #52]	; (800a958 <__multadd+0x88>)
 800a924:	21b5      	movs	r1, #181	; 0xb5
 800a926:	f000 fcb9 	bl	800b29c <__assert_func>
 800a92a:	6922      	ldr	r2, [r4, #16]
 800a92c:	3202      	adds	r2, #2
 800a92e:	f104 010c 	add.w	r1, r4, #12
 800a932:	0092      	lsls	r2, r2, #2
 800a934:	300c      	adds	r0, #12
 800a936:	f7fe fb8c 	bl	8009052 <memcpy>
 800a93a:	4621      	mov	r1, r4
 800a93c:	4638      	mov	r0, r7
 800a93e:	f7ff ffa5 	bl	800a88c <_Bfree>
 800a942:	4644      	mov	r4, r8
 800a944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a948:	3501      	adds	r5, #1
 800a94a:	615e      	str	r6, [r3, #20]
 800a94c:	6125      	str	r5, [r4, #16]
 800a94e:	4620      	mov	r0, r4
 800a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a954:	0800be50 	.word	0x0800be50
 800a958:	0800bef3 	.word	0x0800bef3

0800a95c <__s2b>:
 800a95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a960:	460c      	mov	r4, r1
 800a962:	4615      	mov	r5, r2
 800a964:	461f      	mov	r7, r3
 800a966:	2209      	movs	r2, #9
 800a968:	3308      	adds	r3, #8
 800a96a:	4606      	mov	r6, r0
 800a96c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a970:	2100      	movs	r1, #0
 800a972:	2201      	movs	r2, #1
 800a974:	429a      	cmp	r2, r3
 800a976:	db09      	blt.n	800a98c <__s2b+0x30>
 800a978:	4630      	mov	r0, r6
 800a97a:	f7ff ff47 	bl	800a80c <_Balloc>
 800a97e:	b940      	cbnz	r0, 800a992 <__s2b+0x36>
 800a980:	4602      	mov	r2, r0
 800a982:	4b19      	ldr	r3, [pc, #100]	; (800a9e8 <__s2b+0x8c>)
 800a984:	4819      	ldr	r0, [pc, #100]	; (800a9ec <__s2b+0x90>)
 800a986:	21ce      	movs	r1, #206	; 0xce
 800a988:	f000 fc88 	bl	800b29c <__assert_func>
 800a98c:	0052      	lsls	r2, r2, #1
 800a98e:	3101      	adds	r1, #1
 800a990:	e7f0      	b.n	800a974 <__s2b+0x18>
 800a992:	9b08      	ldr	r3, [sp, #32]
 800a994:	6143      	str	r3, [r0, #20]
 800a996:	2d09      	cmp	r5, #9
 800a998:	f04f 0301 	mov.w	r3, #1
 800a99c:	6103      	str	r3, [r0, #16]
 800a99e:	dd16      	ble.n	800a9ce <__s2b+0x72>
 800a9a0:	f104 0909 	add.w	r9, r4, #9
 800a9a4:	46c8      	mov	r8, r9
 800a9a6:	442c      	add	r4, r5
 800a9a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a9ac:	4601      	mov	r1, r0
 800a9ae:	3b30      	subs	r3, #48	; 0x30
 800a9b0:	220a      	movs	r2, #10
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f7ff ff8c 	bl	800a8d0 <__multadd>
 800a9b8:	45a0      	cmp	r8, r4
 800a9ba:	d1f5      	bne.n	800a9a8 <__s2b+0x4c>
 800a9bc:	f1a5 0408 	sub.w	r4, r5, #8
 800a9c0:	444c      	add	r4, r9
 800a9c2:	1b2d      	subs	r5, r5, r4
 800a9c4:	1963      	adds	r3, r4, r5
 800a9c6:	42bb      	cmp	r3, r7
 800a9c8:	db04      	blt.n	800a9d4 <__s2b+0x78>
 800a9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ce:	340a      	adds	r4, #10
 800a9d0:	2509      	movs	r5, #9
 800a9d2:	e7f6      	b.n	800a9c2 <__s2b+0x66>
 800a9d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9d8:	4601      	mov	r1, r0
 800a9da:	3b30      	subs	r3, #48	; 0x30
 800a9dc:	220a      	movs	r2, #10
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f7ff ff76 	bl	800a8d0 <__multadd>
 800a9e4:	e7ee      	b.n	800a9c4 <__s2b+0x68>
 800a9e6:	bf00      	nop
 800a9e8:	0800be50 	.word	0x0800be50
 800a9ec:	0800bef3 	.word	0x0800bef3

0800a9f0 <__hi0bits>:
 800a9f0:	0c03      	lsrs	r3, r0, #16
 800a9f2:	041b      	lsls	r3, r3, #16
 800a9f4:	b9d3      	cbnz	r3, 800aa2c <__hi0bits+0x3c>
 800a9f6:	0400      	lsls	r0, r0, #16
 800a9f8:	2310      	movs	r3, #16
 800a9fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9fe:	bf04      	itt	eq
 800aa00:	0200      	lsleq	r0, r0, #8
 800aa02:	3308      	addeq	r3, #8
 800aa04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa08:	bf04      	itt	eq
 800aa0a:	0100      	lsleq	r0, r0, #4
 800aa0c:	3304      	addeq	r3, #4
 800aa0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa12:	bf04      	itt	eq
 800aa14:	0080      	lsleq	r0, r0, #2
 800aa16:	3302      	addeq	r3, #2
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	db05      	blt.n	800aa28 <__hi0bits+0x38>
 800aa1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa20:	f103 0301 	add.w	r3, r3, #1
 800aa24:	bf08      	it	eq
 800aa26:	2320      	moveq	r3, #32
 800aa28:	4618      	mov	r0, r3
 800aa2a:	4770      	bx	lr
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	e7e4      	b.n	800a9fa <__hi0bits+0xa>

0800aa30 <__lo0bits>:
 800aa30:	6803      	ldr	r3, [r0, #0]
 800aa32:	f013 0207 	ands.w	r2, r3, #7
 800aa36:	4601      	mov	r1, r0
 800aa38:	d00b      	beq.n	800aa52 <__lo0bits+0x22>
 800aa3a:	07da      	lsls	r2, r3, #31
 800aa3c:	d423      	bmi.n	800aa86 <__lo0bits+0x56>
 800aa3e:	0798      	lsls	r0, r3, #30
 800aa40:	bf49      	itett	mi
 800aa42:	085b      	lsrmi	r3, r3, #1
 800aa44:	089b      	lsrpl	r3, r3, #2
 800aa46:	2001      	movmi	r0, #1
 800aa48:	600b      	strmi	r3, [r1, #0]
 800aa4a:	bf5c      	itt	pl
 800aa4c:	600b      	strpl	r3, [r1, #0]
 800aa4e:	2002      	movpl	r0, #2
 800aa50:	4770      	bx	lr
 800aa52:	b298      	uxth	r0, r3
 800aa54:	b9a8      	cbnz	r0, 800aa82 <__lo0bits+0x52>
 800aa56:	0c1b      	lsrs	r3, r3, #16
 800aa58:	2010      	movs	r0, #16
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	b90a      	cbnz	r2, 800aa62 <__lo0bits+0x32>
 800aa5e:	3008      	adds	r0, #8
 800aa60:	0a1b      	lsrs	r3, r3, #8
 800aa62:	071a      	lsls	r2, r3, #28
 800aa64:	bf04      	itt	eq
 800aa66:	091b      	lsreq	r3, r3, #4
 800aa68:	3004      	addeq	r0, #4
 800aa6a:	079a      	lsls	r2, r3, #30
 800aa6c:	bf04      	itt	eq
 800aa6e:	089b      	lsreq	r3, r3, #2
 800aa70:	3002      	addeq	r0, #2
 800aa72:	07da      	lsls	r2, r3, #31
 800aa74:	d403      	bmi.n	800aa7e <__lo0bits+0x4e>
 800aa76:	085b      	lsrs	r3, r3, #1
 800aa78:	f100 0001 	add.w	r0, r0, #1
 800aa7c:	d005      	beq.n	800aa8a <__lo0bits+0x5a>
 800aa7e:	600b      	str	r3, [r1, #0]
 800aa80:	4770      	bx	lr
 800aa82:	4610      	mov	r0, r2
 800aa84:	e7e9      	b.n	800aa5a <__lo0bits+0x2a>
 800aa86:	2000      	movs	r0, #0
 800aa88:	4770      	bx	lr
 800aa8a:	2020      	movs	r0, #32
 800aa8c:	4770      	bx	lr
	...

0800aa90 <__i2b>:
 800aa90:	b510      	push	{r4, lr}
 800aa92:	460c      	mov	r4, r1
 800aa94:	2101      	movs	r1, #1
 800aa96:	f7ff feb9 	bl	800a80c <_Balloc>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	b928      	cbnz	r0, 800aaaa <__i2b+0x1a>
 800aa9e:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <__i2b+0x24>)
 800aaa0:	4805      	ldr	r0, [pc, #20]	; (800aab8 <__i2b+0x28>)
 800aaa2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aaa6:	f000 fbf9 	bl	800b29c <__assert_func>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	6144      	str	r4, [r0, #20]
 800aaae:	6103      	str	r3, [r0, #16]
 800aab0:	bd10      	pop	{r4, pc}
 800aab2:	bf00      	nop
 800aab4:	0800be50 	.word	0x0800be50
 800aab8:	0800bef3 	.word	0x0800bef3

0800aabc <__multiply>:
 800aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac0:	4691      	mov	r9, r2
 800aac2:	690a      	ldr	r2, [r1, #16]
 800aac4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	bfb8      	it	lt
 800aacc:	460b      	movlt	r3, r1
 800aace:	460c      	mov	r4, r1
 800aad0:	bfbc      	itt	lt
 800aad2:	464c      	movlt	r4, r9
 800aad4:	4699      	movlt	r9, r3
 800aad6:	6927      	ldr	r7, [r4, #16]
 800aad8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aadc:	68a3      	ldr	r3, [r4, #8]
 800aade:	6861      	ldr	r1, [r4, #4]
 800aae0:	eb07 060a 	add.w	r6, r7, sl
 800aae4:	42b3      	cmp	r3, r6
 800aae6:	b085      	sub	sp, #20
 800aae8:	bfb8      	it	lt
 800aaea:	3101      	addlt	r1, #1
 800aaec:	f7ff fe8e 	bl	800a80c <_Balloc>
 800aaf0:	b930      	cbnz	r0, 800ab00 <__multiply+0x44>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	4b44      	ldr	r3, [pc, #272]	; (800ac08 <__multiply+0x14c>)
 800aaf6:	4845      	ldr	r0, [pc, #276]	; (800ac0c <__multiply+0x150>)
 800aaf8:	f240 115d 	movw	r1, #349	; 0x15d
 800aafc:	f000 fbce 	bl	800b29c <__assert_func>
 800ab00:	f100 0514 	add.w	r5, r0, #20
 800ab04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab08:	462b      	mov	r3, r5
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4543      	cmp	r3, r8
 800ab0e:	d321      	bcc.n	800ab54 <__multiply+0x98>
 800ab10:	f104 0314 	add.w	r3, r4, #20
 800ab14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ab18:	f109 0314 	add.w	r3, r9, #20
 800ab1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ab20:	9202      	str	r2, [sp, #8]
 800ab22:	1b3a      	subs	r2, r7, r4
 800ab24:	3a15      	subs	r2, #21
 800ab26:	f022 0203 	bic.w	r2, r2, #3
 800ab2a:	3204      	adds	r2, #4
 800ab2c:	f104 0115 	add.w	r1, r4, #21
 800ab30:	428f      	cmp	r7, r1
 800ab32:	bf38      	it	cc
 800ab34:	2204      	movcc	r2, #4
 800ab36:	9201      	str	r2, [sp, #4]
 800ab38:	9a02      	ldr	r2, [sp, #8]
 800ab3a:	9303      	str	r3, [sp, #12]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d80c      	bhi.n	800ab5a <__multiply+0x9e>
 800ab40:	2e00      	cmp	r6, #0
 800ab42:	dd03      	ble.n	800ab4c <__multiply+0x90>
 800ab44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d05a      	beq.n	800ac02 <__multiply+0x146>
 800ab4c:	6106      	str	r6, [r0, #16]
 800ab4e:	b005      	add	sp, #20
 800ab50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab54:	f843 2b04 	str.w	r2, [r3], #4
 800ab58:	e7d8      	b.n	800ab0c <__multiply+0x50>
 800ab5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab5e:	f1ba 0f00 	cmp.w	sl, #0
 800ab62:	d024      	beq.n	800abae <__multiply+0xf2>
 800ab64:	f104 0e14 	add.w	lr, r4, #20
 800ab68:	46a9      	mov	r9, r5
 800ab6a:	f04f 0c00 	mov.w	ip, #0
 800ab6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab72:	f8d9 1000 	ldr.w	r1, [r9]
 800ab76:	fa1f fb82 	uxth.w	fp, r2
 800ab7a:	b289      	uxth	r1, r1
 800ab7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab84:	f8d9 2000 	ldr.w	r2, [r9]
 800ab88:	4461      	add	r1, ip
 800ab8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab96:	b289      	uxth	r1, r1
 800ab98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab9c:	4577      	cmp	r7, lr
 800ab9e:	f849 1b04 	str.w	r1, [r9], #4
 800aba2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aba6:	d8e2      	bhi.n	800ab6e <__multiply+0xb2>
 800aba8:	9a01      	ldr	r2, [sp, #4]
 800abaa:	f845 c002 	str.w	ip, [r5, r2]
 800abae:	9a03      	ldr	r2, [sp, #12]
 800abb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800abb4:	3304      	adds	r3, #4
 800abb6:	f1b9 0f00 	cmp.w	r9, #0
 800abba:	d020      	beq.n	800abfe <__multiply+0x142>
 800abbc:	6829      	ldr	r1, [r5, #0]
 800abbe:	f104 0c14 	add.w	ip, r4, #20
 800abc2:	46ae      	mov	lr, r5
 800abc4:	f04f 0a00 	mov.w	sl, #0
 800abc8:	f8bc b000 	ldrh.w	fp, [ip]
 800abcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800abd0:	fb09 220b 	mla	r2, r9, fp, r2
 800abd4:	4492      	add	sl, r2
 800abd6:	b289      	uxth	r1, r1
 800abd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800abdc:	f84e 1b04 	str.w	r1, [lr], #4
 800abe0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800abe4:	f8be 1000 	ldrh.w	r1, [lr]
 800abe8:	0c12      	lsrs	r2, r2, #16
 800abea:	fb09 1102 	mla	r1, r9, r2, r1
 800abee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800abf2:	4567      	cmp	r7, ip
 800abf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800abf8:	d8e6      	bhi.n	800abc8 <__multiply+0x10c>
 800abfa:	9a01      	ldr	r2, [sp, #4]
 800abfc:	50a9      	str	r1, [r5, r2]
 800abfe:	3504      	adds	r5, #4
 800ac00:	e79a      	b.n	800ab38 <__multiply+0x7c>
 800ac02:	3e01      	subs	r6, #1
 800ac04:	e79c      	b.n	800ab40 <__multiply+0x84>
 800ac06:	bf00      	nop
 800ac08:	0800be50 	.word	0x0800be50
 800ac0c:	0800bef3 	.word	0x0800bef3

0800ac10 <__pow5mult>:
 800ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	4615      	mov	r5, r2
 800ac16:	f012 0203 	ands.w	r2, r2, #3
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	d007      	beq.n	800ac30 <__pow5mult+0x20>
 800ac20:	4c25      	ldr	r4, [pc, #148]	; (800acb8 <__pow5mult+0xa8>)
 800ac22:	3a01      	subs	r2, #1
 800ac24:	2300      	movs	r3, #0
 800ac26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac2a:	f7ff fe51 	bl	800a8d0 <__multadd>
 800ac2e:	4607      	mov	r7, r0
 800ac30:	10ad      	asrs	r5, r5, #2
 800ac32:	d03d      	beq.n	800acb0 <__pow5mult+0xa0>
 800ac34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac36:	b97c      	cbnz	r4, 800ac58 <__pow5mult+0x48>
 800ac38:	2010      	movs	r0, #16
 800ac3a:	f000 fb5f 	bl	800b2fc <malloc>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	6270      	str	r0, [r6, #36]	; 0x24
 800ac42:	b928      	cbnz	r0, 800ac50 <__pow5mult+0x40>
 800ac44:	4b1d      	ldr	r3, [pc, #116]	; (800acbc <__pow5mult+0xac>)
 800ac46:	481e      	ldr	r0, [pc, #120]	; (800acc0 <__pow5mult+0xb0>)
 800ac48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac4c:	f000 fb26 	bl	800b29c <__assert_func>
 800ac50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac54:	6004      	str	r4, [r0, #0]
 800ac56:	60c4      	str	r4, [r0, #12]
 800ac58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac60:	b94c      	cbnz	r4, 800ac76 <__pow5mult+0x66>
 800ac62:	f240 2171 	movw	r1, #625	; 0x271
 800ac66:	4630      	mov	r0, r6
 800ac68:	f7ff ff12 	bl	800aa90 <__i2b>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac72:	4604      	mov	r4, r0
 800ac74:	6003      	str	r3, [r0, #0]
 800ac76:	f04f 0900 	mov.w	r9, #0
 800ac7a:	07eb      	lsls	r3, r5, #31
 800ac7c:	d50a      	bpl.n	800ac94 <__pow5mult+0x84>
 800ac7e:	4639      	mov	r1, r7
 800ac80:	4622      	mov	r2, r4
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff ff1a 	bl	800aabc <__multiply>
 800ac88:	4639      	mov	r1, r7
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7ff fdfd 	bl	800a88c <_Bfree>
 800ac92:	4647      	mov	r7, r8
 800ac94:	106d      	asrs	r5, r5, #1
 800ac96:	d00b      	beq.n	800acb0 <__pow5mult+0xa0>
 800ac98:	6820      	ldr	r0, [r4, #0]
 800ac9a:	b938      	cbnz	r0, 800acac <__pow5mult+0x9c>
 800ac9c:	4622      	mov	r2, r4
 800ac9e:	4621      	mov	r1, r4
 800aca0:	4630      	mov	r0, r6
 800aca2:	f7ff ff0b 	bl	800aabc <__multiply>
 800aca6:	6020      	str	r0, [r4, #0]
 800aca8:	f8c0 9000 	str.w	r9, [r0]
 800acac:	4604      	mov	r4, r0
 800acae:	e7e4      	b.n	800ac7a <__pow5mult+0x6a>
 800acb0:	4638      	mov	r0, r7
 800acb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acb6:	bf00      	nop
 800acb8:	0800c040 	.word	0x0800c040
 800acbc:	0800bedc 	.word	0x0800bedc
 800acc0:	0800bef3 	.word	0x0800bef3

0800acc4 <__lshift>:
 800acc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc8:	460c      	mov	r4, r1
 800acca:	6849      	ldr	r1, [r1, #4]
 800accc:	6923      	ldr	r3, [r4, #16]
 800acce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acd2:	68a3      	ldr	r3, [r4, #8]
 800acd4:	4607      	mov	r7, r0
 800acd6:	4691      	mov	r9, r2
 800acd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acdc:	f108 0601 	add.w	r6, r8, #1
 800ace0:	42b3      	cmp	r3, r6
 800ace2:	db0b      	blt.n	800acfc <__lshift+0x38>
 800ace4:	4638      	mov	r0, r7
 800ace6:	f7ff fd91 	bl	800a80c <_Balloc>
 800acea:	4605      	mov	r5, r0
 800acec:	b948      	cbnz	r0, 800ad02 <__lshift+0x3e>
 800acee:	4602      	mov	r2, r0
 800acf0:	4b2a      	ldr	r3, [pc, #168]	; (800ad9c <__lshift+0xd8>)
 800acf2:	482b      	ldr	r0, [pc, #172]	; (800ada0 <__lshift+0xdc>)
 800acf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800acf8:	f000 fad0 	bl	800b29c <__assert_func>
 800acfc:	3101      	adds	r1, #1
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	e7ee      	b.n	800ace0 <__lshift+0x1c>
 800ad02:	2300      	movs	r3, #0
 800ad04:	f100 0114 	add.w	r1, r0, #20
 800ad08:	f100 0210 	add.w	r2, r0, #16
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	4553      	cmp	r3, sl
 800ad10:	db37      	blt.n	800ad82 <__lshift+0xbe>
 800ad12:	6920      	ldr	r0, [r4, #16]
 800ad14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad18:	f104 0314 	add.w	r3, r4, #20
 800ad1c:	f019 091f 	ands.w	r9, r9, #31
 800ad20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ad28:	d02f      	beq.n	800ad8a <__lshift+0xc6>
 800ad2a:	f1c9 0e20 	rsb	lr, r9, #32
 800ad2e:	468a      	mov	sl, r1
 800ad30:	f04f 0c00 	mov.w	ip, #0
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	fa02 f209 	lsl.w	r2, r2, r9
 800ad3a:	ea42 020c 	orr.w	r2, r2, ip
 800ad3e:	f84a 2b04 	str.w	r2, [sl], #4
 800ad42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad46:	4298      	cmp	r0, r3
 800ad48:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad4c:	d8f2      	bhi.n	800ad34 <__lshift+0x70>
 800ad4e:	1b03      	subs	r3, r0, r4
 800ad50:	3b15      	subs	r3, #21
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	3304      	adds	r3, #4
 800ad58:	f104 0215 	add.w	r2, r4, #21
 800ad5c:	4290      	cmp	r0, r2
 800ad5e:	bf38      	it	cc
 800ad60:	2304      	movcc	r3, #4
 800ad62:	f841 c003 	str.w	ip, [r1, r3]
 800ad66:	f1bc 0f00 	cmp.w	ip, #0
 800ad6a:	d001      	beq.n	800ad70 <__lshift+0xac>
 800ad6c:	f108 0602 	add.w	r6, r8, #2
 800ad70:	3e01      	subs	r6, #1
 800ad72:	4638      	mov	r0, r7
 800ad74:	612e      	str	r6, [r5, #16]
 800ad76:	4621      	mov	r1, r4
 800ad78:	f7ff fd88 	bl	800a88c <_Bfree>
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad82:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad86:	3301      	adds	r3, #1
 800ad88:	e7c1      	b.n	800ad0e <__lshift+0x4a>
 800ad8a:	3904      	subs	r1, #4
 800ad8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad90:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad94:	4298      	cmp	r0, r3
 800ad96:	d8f9      	bhi.n	800ad8c <__lshift+0xc8>
 800ad98:	e7ea      	b.n	800ad70 <__lshift+0xac>
 800ad9a:	bf00      	nop
 800ad9c:	0800be50 	.word	0x0800be50
 800ada0:	0800bef3 	.word	0x0800bef3

0800ada4 <__mcmp>:
 800ada4:	b530      	push	{r4, r5, lr}
 800ada6:	6902      	ldr	r2, [r0, #16]
 800ada8:	690c      	ldr	r4, [r1, #16]
 800adaa:	1b12      	subs	r2, r2, r4
 800adac:	d10e      	bne.n	800adcc <__mcmp+0x28>
 800adae:	f100 0314 	add.w	r3, r0, #20
 800adb2:	3114      	adds	r1, #20
 800adb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800adb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800adbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800adc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800adc4:	42a5      	cmp	r5, r4
 800adc6:	d003      	beq.n	800add0 <__mcmp+0x2c>
 800adc8:	d305      	bcc.n	800add6 <__mcmp+0x32>
 800adca:	2201      	movs	r2, #1
 800adcc:	4610      	mov	r0, r2
 800adce:	bd30      	pop	{r4, r5, pc}
 800add0:	4283      	cmp	r3, r0
 800add2:	d3f3      	bcc.n	800adbc <__mcmp+0x18>
 800add4:	e7fa      	b.n	800adcc <__mcmp+0x28>
 800add6:	f04f 32ff 	mov.w	r2, #4294967295
 800adda:	e7f7      	b.n	800adcc <__mcmp+0x28>

0800addc <__mdiff>:
 800addc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	460c      	mov	r4, r1
 800ade2:	4606      	mov	r6, r0
 800ade4:	4611      	mov	r1, r2
 800ade6:	4620      	mov	r0, r4
 800ade8:	4690      	mov	r8, r2
 800adea:	f7ff ffdb 	bl	800ada4 <__mcmp>
 800adee:	1e05      	subs	r5, r0, #0
 800adf0:	d110      	bne.n	800ae14 <__mdiff+0x38>
 800adf2:	4629      	mov	r1, r5
 800adf4:	4630      	mov	r0, r6
 800adf6:	f7ff fd09 	bl	800a80c <_Balloc>
 800adfa:	b930      	cbnz	r0, 800ae0a <__mdiff+0x2e>
 800adfc:	4b3a      	ldr	r3, [pc, #232]	; (800aee8 <__mdiff+0x10c>)
 800adfe:	4602      	mov	r2, r0
 800ae00:	f240 2132 	movw	r1, #562	; 0x232
 800ae04:	4839      	ldr	r0, [pc, #228]	; (800aeec <__mdiff+0x110>)
 800ae06:	f000 fa49 	bl	800b29c <__assert_func>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae14:	bfa4      	itt	ge
 800ae16:	4643      	movge	r3, r8
 800ae18:	46a0      	movge	r8, r4
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae20:	bfa6      	itte	ge
 800ae22:	461c      	movge	r4, r3
 800ae24:	2500      	movge	r5, #0
 800ae26:	2501      	movlt	r5, #1
 800ae28:	f7ff fcf0 	bl	800a80c <_Balloc>
 800ae2c:	b920      	cbnz	r0, 800ae38 <__mdiff+0x5c>
 800ae2e:	4b2e      	ldr	r3, [pc, #184]	; (800aee8 <__mdiff+0x10c>)
 800ae30:	4602      	mov	r2, r0
 800ae32:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae36:	e7e5      	b.n	800ae04 <__mdiff+0x28>
 800ae38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae3c:	6926      	ldr	r6, [r4, #16]
 800ae3e:	60c5      	str	r5, [r0, #12]
 800ae40:	f104 0914 	add.w	r9, r4, #20
 800ae44:	f108 0514 	add.w	r5, r8, #20
 800ae48:	f100 0e14 	add.w	lr, r0, #20
 800ae4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae54:	f108 0210 	add.w	r2, r8, #16
 800ae58:	46f2      	mov	sl, lr
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae64:	fa1f f883 	uxth.w	r8, r3
 800ae68:	fa11 f18b 	uxtah	r1, r1, fp
 800ae6c:	0c1b      	lsrs	r3, r3, #16
 800ae6e:	eba1 0808 	sub.w	r8, r1, r8
 800ae72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae7a:	fa1f f888 	uxth.w	r8, r8
 800ae7e:	1419      	asrs	r1, r3, #16
 800ae80:	454e      	cmp	r6, r9
 800ae82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae86:	f84a 3b04 	str.w	r3, [sl], #4
 800ae8a:	d8e7      	bhi.n	800ae5c <__mdiff+0x80>
 800ae8c:	1b33      	subs	r3, r6, r4
 800ae8e:	3b15      	subs	r3, #21
 800ae90:	f023 0303 	bic.w	r3, r3, #3
 800ae94:	3304      	adds	r3, #4
 800ae96:	3415      	adds	r4, #21
 800ae98:	42a6      	cmp	r6, r4
 800ae9a:	bf38      	it	cc
 800ae9c:	2304      	movcc	r3, #4
 800ae9e:	441d      	add	r5, r3
 800aea0:	4473      	add	r3, lr
 800aea2:	469e      	mov	lr, r3
 800aea4:	462e      	mov	r6, r5
 800aea6:	4566      	cmp	r6, ip
 800aea8:	d30e      	bcc.n	800aec8 <__mdiff+0xec>
 800aeaa:	f10c 0203 	add.w	r2, ip, #3
 800aeae:	1b52      	subs	r2, r2, r5
 800aeb0:	f022 0203 	bic.w	r2, r2, #3
 800aeb4:	3d03      	subs	r5, #3
 800aeb6:	45ac      	cmp	ip, r5
 800aeb8:	bf38      	it	cc
 800aeba:	2200      	movcc	r2, #0
 800aebc:	441a      	add	r2, r3
 800aebe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aec2:	b17b      	cbz	r3, 800aee4 <__mdiff+0x108>
 800aec4:	6107      	str	r7, [r0, #16]
 800aec6:	e7a3      	b.n	800ae10 <__mdiff+0x34>
 800aec8:	f856 8b04 	ldr.w	r8, [r6], #4
 800aecc:	fa11 f288 	uxtah	r2, r1, r8
 800aed0:	1414      	asrs	r4, r2, #16
 800aed2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aed6:	b292      	uxth	r2, r2
 800aed8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aedc:	f84e 2b04 	str.w	r2, [lr], #4
 800aee0:	1421      	asrs	r1, r4, #16
 800aee2:	e7e0      	b.n	800aea6 <__mdiff+0xca>
 800aee4:	3f01      	subs	r7, #1
 800aee6:	e7ea      	b.n	800aebe <__mdiff+0xe2>
 800aee8:	0800be50 	.word	0x0800be50
 800aeec:	0800bef3 	.word	0x0800bef3

0800aef0 <__ulp>:
 800aef0:	b082      	sub	sp, #8
 800aef2:	ed8d 0b00 	vstr	d0, [sp]
 800aef6:	9b01      	ldr	r3, [sp, #4]
 800aef8:	4912      	ldr	r1, [pc, #72]	; (800af44 <__ulp+0x54>)
 800aefa:	4019      	ands	r1, r3
 800aefc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800af00:	2900      	cmp	r1, #0
 800af02:	dd05      	ble.n	800af10 <__ulp+0x20>
 800af04:	2200      	movs	r2, #0
 800af06:	460b      	mov	r3, r1
 800af08:	ec43 2b10 	vmov	d0, r2, r3
 800af0c:	b002      	add	sp, #8
 800af0e:	4770      	bx	lr
 800af10:	4249      	negs	r1, r1
 800af12:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800af16:	ea4f 5021 	mov.w	r0, r1, asr #20
 800af1a:	f04f 0200 	mov.w	r2, #0
 800af1e:	f04f 0300 	mov.w	r3, #0
 800af22:	da04      	bge.n	800af2e <__ulp+0x3e>
 800af24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800af28:	fa41 f300 	asr.w	r3, r1, r0
 800af2c:	e7ec      	b.n	800af08 <__ulp+0x18>
 800af2e:	f1a0 0114 	sub.w	r1, r0, #20
 800af32:	291e      	cmp	r1, #30
 800af34:	bfda      	itte	le
 800af36:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800af3a:	fa20 f101 	lsrle.w	r1, r0, r1
 800af3e:	2101      	movgt	r1, #1
 800af40:	460a      	mov	r2, r1
 800af42:	e7e1      	b.n	800af08 <__ulp+0x18>
 800af44:	7ff00000 	.word	0x7ff00000

0800af48 <__b2d>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	6905      	ldr	r5, [r0, #16]
 800af4c:	f100 0714 	add.w	r7, r0, #20
 800af50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800af54:	1f2e      	subs	r6, r5, #4
 800af56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800af5a:	4620      	mov	r0, r4
 800af5c:	f7ff fd48 	bl	800a9f0 <__hi0bits>
 800af60:	f1c0 0320 	rsb	r3, r0, #32
 800af64:	280a      	cmp	r0, #10
 800af66:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800afe4 <__b2d+0x9c>
 800af6a:	600b      	str	r3, [r1, #0]
 800af6c:	dc14      	bgt.n	800af98 <__b2d+0x50>
 800af6e:	f1c0 0e0b 	rsb	lr, r0, #11
 800af72:	fa24 f10e 	lsr.w	r1, r4, lr
 800af76:	42b7      	cmp	r7, r6
 800af78:	ea41 030c 	orr.w	r3, r1, ip
 800af7c:	bf34      	ite	cc
 800af7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af82:	2100      	movcs	r1, #0
 800af84:	3015      	adds	r0, #21
 800af86:	fa04 f000 	lsl.w	r0, r4, r0
 800af8a:	fa21 f10e 	lsr.w	r1, r1, lr
 800af8e:	ea40 0201 	orr.w	r2, r0, r1
 800af92:	ec43 2b10 	vmov	d0, r2, r3
 800af96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af98:	42b7      	cmp	r7, r6
 800af9a:	bf3a      	itte	cc
 800af9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800afa0:	f1a5 0608 	subcc.w	r6, r5, #8
 800afa4:	2100      	movcs	r1, #0
 800afa6:	380b      	subs	r0, #11
 800afa8:	d017      	beq.n	800afda <__b2d+0x92>
 800afaa:	f1c0 0c20 	rsb	ip, r0, #32
 800afae:	fa04 f500 	lsl.w	r5, r4, r0
 800afb2:	42be      	cmp	r6, r7
 800afb4:	fa21 f40c 	lsr.w	r4, r1, ip
 800afb8:	ea45 0504 	orr.w	r5, r5, r4
 800afbc:	bf8c      	ite	hi
 800afbe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800afc2:	2400      	movls	r4, #0
 800afc4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800afc8:	fa01 f000 	lsl.w	r0, r1, r0
 800afcc:	fa24 f40c 	lsr.w	r4, r4, ip
 800afd0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800afd4:	ea40 0204 	orr.w	r2, r0, r4
 800afd8:	e7db      	b.n	800af92 <__b2d+0x4a>
 800afda:	ea44 030c 	orr.w	r3, r4, ip
 800afde:	460a      	mov	r2, r1
 800afe0:	e7d7      	b.n	800af92 <__b2d+0x4a>
 800afe2:	bf00      	nop
 800afe4:	3ff00000 	.word	0x3ff00000

0800afe8 <__d2b>:
 800afe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afec:	4689      	mov	r9, r1
 800afee:	2101      	movs	r1, #1
 800aff0:	ec57 6b10 	vmov	r6, r7, d0
 800aff4:	4690      	mov	r8, r2
 800aff6:	f7ff fc09 	bl	800a80c <_Balloc>
 800affa:	4604      	mov	r4, r0
 800affc:	b930      	cbnz	r0, 800b00c <__d2b+0x24>
 800affe:	4602      	mov	r2, r0
 800b000:	4b25      	ldr	r3, [pc, #148]	; (800b098 <__d2b+0xb0>)
 800b002:	4826      	ldr	r0, [pc, #152]	; (800b09c <__d2b+0xb4>)
 800b004:	f240 310a 	movw	r1, #778	; 0x30a
 800b008:	f000 f948 	bl	800b29c <__assert_func>
 800b00c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b014:	bb35      	cbnz	r5, 800b064 <__d2b+0x7c>
 800b016:	2e00      	cmp	r6, #0
 800b018:	9301      	str	r3, [sp, #4]
 800b01a:	d028      	beq.n	800b06e <__d2b+0x86>
 800b01c:	4668      	mov	r0, sp
 800b01e:	9600      	str	r6, [sp, #0]
 800b020:	f7ff fd06 	bl	800aa30 <__lo0bits>
 800b024:	9900      	ldr	r1, [sp, #0]
 800b026:	b300      	cbz	r0, 800b06a <__d2b+0x82>
 800b028:	9a01      	ldr	r2, [sp, #4]
 800b02a:	f1c0 0320 	rsb	r3, r0, #32
 800b02e:	fa02 f303 	lsl.w	r3, r2, r3
 800b032:	430b      	orrs	r3, r1
 800b034:	40c2      	lsrs	r2, r0
 800b036:	6163      	str	r3, [r4, #20]
 800b038:	9201      	str	r2, [sp, #4]
 800b03a:	9b01      	ldr	r3, [sp, #4]
 800b03c:	61a3      	str	r3, [r4, #24]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	bf14      	ite	ne
 800b042:	2202      	movne	r2, #2
 800b044:	2201      	moveq	r2, #1
 800b046:	6122      	str	r2, [r4, #16]
 800b048:	b1d5      	cbz	r5, 800b080 <__d2b+0x98>
 800b04a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b04e:	4405      	add	r5, r0
 800b050:	f8c9 5000 	str.w	r5, [r9]
 800b054:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b058:	f8c8 0000 	str.w	r0, [r8]
 800b05c:	4620      	mov	r0, r4
 800b05e:	b003      	add	sp, #12
 800b060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b068:	e7d5      	b.n	800b016 <__d2b+0x2e>
 800b06a:	6161      	str	r1, [r4, #20]
 800b06c:	e7e5      	b.n	800b03a <__d2b+0x52>
 800b06e:	a801      	add	r0, sp, #4
 800b070:	f7ff fcde 	bl	800aa30 <__lo0bits>
 800b074:	9b01      	ldr	r3, [sp, #4]
 800b076:	6163      	str	r3, [r4, #20]
 800b078:	2201      	movs	r2, #1
 800b07a:	6122      	str	r2, [r4, #16]
 800b07c:	3020      	adds	r0, #32
 800b07e:	e7e3      	b.n	800b048 <__d2b+0x60>
 800b080:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b084:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b088:	f8c9 0000 	str.w	r0, [r9]
 800b08c:	6918      	ldr	r0, [r3, #16]
 800b08e:	f7ff fcaf 	bl	800a9f0 <__hi0bits>
 800b092:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b096:	e7df      	b.n	800b058 <__d2b+0x70>
 800b098:	0800be50 	.word	0x0800be50
 800b09c:	0800bef3 	.word	0x0800bef3

0800b0a0 <__ratio>:
 800b0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	4688      	mov	r8, r1
 800b0a6:	4669      	mov	r1, sp
 800b0a8:	4681      	mov	r9, r0
 800b0aa:	f7ff ff4d 	bl	800af48 <__b2d>
 800b0ae:	a901      	add	r1, sp, #4
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	ec55 4b10 	vmov	r4, r5, d0
 800b0b6:	ee10 aa10 	vmov	sl, s0
 800b0ba:	f7ff ff45 	bl	800af48 <__b2d>
 800b0be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b0c6:	1a59      	subs	r1, r3, r1
 800b0c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b0d2:	ec57 6b10 	vmov	r6, r7, d0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	bfd6      	itet	le
 800b0da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b0de:	462a      	movgt	r2, r5
 800b0e0:	463a      	movle	r2, r7
 800b0e2:	46ab      	mov	fp, r5
 800b0e4:	bfd6      	itet	le
 800b0e6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b0ea:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b0ee:	ee00 3a90 	vmovle	s1, r3
 800b0f2:	ec4b ab17 	vmov	d7, sl, fp
 800b0f6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b0fa:	b003      	add	sp, #12
 800b0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b100 <__copybits>:
 800b100:	3901      	subs	r1, #1
 800b102:	b570      	push	{r4, r5, r6, lr}
 800b104:	1149      	asrs	r1, r1, #5
 800b106:	6914      	ldr	r4, [r2, #16]
 800b108:	3101      	adds	r1, #1
 800b10a:	f102 0314 	add.w	r3, r2, #20
 800b10e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b112:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b116:	1f05      	subs	r5, r0, #4
 800b118:	42a3      	cmp	r3, r4
 800b11a:	d30c      	bcc.n	800b136 <__copybits+0x36>
 800b11c:	1aa3      	subs	r3, r4, r2
 800b11e:	3b11      	subs	r3, #17
 800b120:	f023 0303 	bic.w	r3, r3, #3
 800b124:	3211      	adds	r2, #17
 800b126:	42a2      	cmp	r2, r4
 800b128:	bf88      	it	hi
 800b12a:	2300      	movhi	r3, #0
 800b12c:	4418      	add	r0, r3
 800b12e:	2300      	movs	r3, #0
 800b130:	4288      	cmp	r0, r1
 800b132:	d305      	bcc.n	800b140 <__copybits+0x40>
 800b134:	bd70      	pop	{r4, r5, r6, pc}
 800b136:	f853 6b04 	ldr.w	r6, [r3], #4
 800b13a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b13e:	e7eb      	b.n	800b118 <__copybits+0x18>
 800b140:	f840 3b04 	str.w	r3, [r0], #4
 800b144:	e7f4      	b.n	800b130 <__copybits+0x30>

0800b146 <__any_on>:
 800b146:	f100 0214 	add.w	r2, r0, #20
 800b14a:	6900      	ldr	r0, [r0, #16]
 800b14c:	114b      	asrs	r3, r1, #5
 800b14e:	4298      	cmp	r0, r3
 800b150:	b510      	push	{r4, lr}
 800b152:	db11      	blt.n	800b178 <__any_on+0x32>
 800b154:	dd0a      	ble.n	800b16c <__any_on+0x26>
 800b156:	f011 011f 	ands.w	r1, r1, #31
 800b15a:	d007      	beq.n	800b16c <__any_on+0x26>
 800b15c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b160:	fa24 f001 	lsr.w	r0, r4, r1
 800b164:	fa00 f101 	lsl.w	r1, r0, r1
 800b168:	428c      	cmp	r4, r1
 800b16a:	d10b      	bne.n	800b184 <__any_on+0x3e>
 800b16c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b170:	4293      	cmp	r3, r2
 800b172:	d803      	bhi.n	800b17c <__any_on+0x36>
 800b174:	2000      	movs	r0, #0
 800b176:	bd10      	pop	{r4, pc}
 800b178:	4603      	mov	r3, r0
 800b17a:	e7f7      	b.n	800b16c <__any_on+0x26>
 800b17c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b180:	2900      	cmp	r1, #0
 800b182:	d0f5      	beq.n	800b170 <__any_on+0x2a>
 800b184:	2001      	movs	r0, #1
 800b186:	e7f6      	b.n	800b176 <__any_on+0x30>

0800b188 <_calloc_r>:
 800b188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b18a:	fba1 2402 	umull	r2, r4, r1, r2
 800b18e:	b94c      	cbnz	r4, 800b1a4 <_calloc_r+0x1c>
 800b190:	4611      	mov	r1, r2
 800b192:	9201      	str	r2, [sp, #4]
 800b194:	f7fd ff94 	bl	80090c0 <_malloc_r>
 800b198:	9a01      	ldr	r2, [sp, #4]
 800b19a:	4605      	mov	r5, r0
 800b19c:	b930      	cbnz	r0, 800b1ac <_calloc_r+0x24>
 800b19e:	4628      	mov	r0, r5
 800b1a0:	b003      	add	sp, #12
 800b1a2:	bd30      	pop	{r4, r5, pc}
 800b1a4:	220c      	movs	r2, #12
 800b1a6:	6002      	str	r2, [r0, #0]
 800b1a8:	2500      	movs	r5, #0
 800b1aa:	e7f8      	b.n	800b19e <_calloc_r+0x16>
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	f7fd ff5e 	bl	800906e <memset>
 800b1b2:	e7f4      	b.n	800b19e <_calloc_r+0x16>

0800b1b4 <_free_r>:
 800b1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1b6:	2900      	cmp	r1, #0
 800b1b8:	d044      	beq.n	800b244 <_free_r+0x90>
 800b1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1be:	9001      	str	r0, [sp, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b1c6:	bfb8      	it	lt
 800b1c8:	18e4      	addlt	r4, r4, r3
 800b1ca:	f7ff fb13 	bl	800a7f4 <__malloc_lock>
 800b1ce:	4a1e      	ldr	r2, [pc, #120]	; (800b248 <_free_r+0x94>)
 800b1d0:	9801      	ldr	r0, [sp, #4]
 800b1d2:	6813      	ldr	r3, [r2, #0]
 800b1d4:	b933      	cbnz	r3, 800b1e4 <_free_r+0x30>
 800b1d6:	6063      	str	r3, [r4, #4]
 800b1d8:	6014      	str	r4, [r2, #0]
 800b1da:	b003      	add	sp, #12
 800b1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1e0:	f7ff bb0e 	b.w	800a800 <__malloc_unlock>
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	d908      	bls.n	800b1fa <_free_r+0x46>
 800b1e8:	6825      	ldr	r5, [r4, #0]
 800b1ea:	1961      	adds	r1, r4, r5
 800b1ec:	428b      	cmp	r3, r1
 800b1ee:	bf01      	itttt	eq
 800b1f0:	6819      	ldreq	r1, [r3, #0]
 800b1f2:	685b      	ldreq	r3, [r3, #4]
 800b1f4:	1949      	addeq	r1, r1, r5
 800b1f6:	6021      	streq	r1, [r4, #0]
 800b1f8:	e7ed      	b.n	800b1d6 <_free_r+0x22>
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	b10b      	cbz	r3, 800b204 <_free_r+0x50>
 800b200:	42a3      	cmp	r3, r4
 800b202:	d9fa      	bls.n	800b1fa <_free_r+0x46>
 800b204:	6811      	ldr	r1, [r2, #0]
 800b206:	1855      	adds	r5, r2, r1
 800b208:	42a5      	cmp	r5, r4
 800b20a:	d10b      	bne.n	800b224 <_free_r+0x70>
 800b20c:	6824      	ldr	r4, [r4, #0]
 800b20e:	4421      	add	r1, r4
 800b210:	1854      	adds	r4, r2, r1
 800b212:	42a3      	cmp	r3, r4
 800b214:	6011      	str	r1, [r2, #0]
 800b216:	d1e0      	bne.n	800b1da <_free_r+0x26>
 800b218:	681c      	ldr	r4, [r3, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	6053      	str	r3, [r2, #4]
 800b21e:	4421      	add	r1, r4
 800b220:	6011      	str	r1, [r2, #0]
 800b222:	e7da      	b.n	800b1da <_free_r+0x26>
 800b224:	d902      	bls.n	800b22c <_free_r+0x78>
 800b226:	230c      	movs	r3, #12
 800b228:	6003      	str	r3, [r0, #0]
 800b22a:	e7d6      	b.n	800b1da <_free_r+0x26>
 800b22c:	6825      	ldr	r5, [r4, #0]
 800b22e:	1961      	adds	r1, r4, r5
 800b230:	428b      	cmp	r3, r1
 800b232:	bf04      	itt	eq
 800b234:	6819      	ldreq	r1, [r3, #0]
 800b236:	685b      	ldreq	r3, [r3, #4]
 800b238:	6063      	str	r3, [r4, #4]
 800b23a:	bf04      	itt	eq
 800b23c:	1949      	addeq	r1, r1, r5
 800b23e:	6021      	streq	r1, [r4, #0]
 800b240:	6054      	str	r4, [r2, #4]
 800b242:	e7ca      	b.n	800b1da <_free_r+0x26>
 800b244:	b003      	add	sp, #12
 800b246:	bd30      	pop	{r4, r5, pc}
 800b248:	20005650 	.word	0x20005650

0800b24c <_read_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4d07      	ldr	r5, [pc, #28]	; (800b26c <_read_r+0x20>)
 800b250:	4604      	mov	r4, r0
 800b252:	4608      	mov	r0, r1
 800b254:	4611      	mov	r1, r2
 800b256:	2200      	movs	r2, #0
 800b258:	602a      	str	r2, [r5, #0]
 800b25a:	461a      	mov	r2, r3
 800b25c:	f7f6 fcb6 	bl	8001bcc <_read>
 800b260:	1c43      	adds	r3, r0, #1
 800b262:	d102      	bne.n	800b26a <_read_r+0x1e>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	b103      	cbz	r3, 800b26a <_read_r+0x1e>
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	20005658 	.word	0x20005658

0800b270 <nan>:
 800b270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b278 <nan+0x8>
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	00000000 	.word	0x00000000
 800b27c:	7ff80000 	.word	0x7ff80000

0800b280 <__ascii_wctomb>:
 800b280:	b149      	cbz	r1, 800b296 <__ascii_wctomb+0x16>
 800b282:	2aff      	cmp	r2, #255	; 0xff
 800b284:	bf85      	ittet	hi
 800b286:	238a      	movhi	r3, #138	; 0x8a
 800b288:	6003      	strhi	r3, [r0, #0]
 800b28a:	700a      	strbls	r2, [r1, #0]
 800b28c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b290:	bf98      	it	ls
 800b292:	2001      	movls	r0, #1
 800b294:	4770      	bx	lr
 800b296:	4608      	mov	r0, r1
 800b298:	4770      	bx	lr
	...

0800b29c <__assert_func>:
 800b29c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b29e:	4614      	mov	r4, r2
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4b09      	ldr	r3, [pc, #36]	; (800b2c8 <__assert_func+0x2c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	68d8      	ldr	r0, [r3, #12]
 800b2aa:	b14c      	cbz	r4, 800b2c0 <__assert_func+0x24>
 800b2ac:	4b07      	ldr	r3, [pc, #28]	; (800b2cc <__assert_func+0x30>)
 800b2ae:	9100      	str	r1, [sp, #0]
 800b2b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2b4:	4906      	ldr	r1, [pc, #24]	; (800b2d0 <__assert_func+0x34>)
 800b2b6:	462b      	mov	r3, r5
 800b2b8:	f000 f80e 	bl	800b2d8 <fiprintf>
 800b2bc:	f000 fbd4 	bl	800ba68 <abort>
 800b2c0:	4b04      	ldr	r3, [pc, #16]	; (800b2d4 <__assert_func+0x38>)
 800b2c2:	461c      	mov	r4, r3
 800b2c4:	e7f3      	b.n	800b2ae <__assert_func+0x12>
 800b2c6:	bf00      	nop
 800b2c8:	20000010 	.word	0x20000010
 800b2cc:	0800c04c 	.word	0x0800c04c
 800b2d0:	0800c059 	.word	0x0800c059
 800b2d4:	0800c087 	.word	0x0800c087

0800b2d8 <fiprintf>:
 800b2d8:	b40e      	push	{r1, r2, r3}
 800b2da:	b503      	push	{r0, r1, lr}
 800b2dc:	4601      	mov	r1, r0
 800b2de:	ab03      	add	r3, sp, #12
 800b2e0:	4805      	ldr	r0, [pc, #20]	; (800b2f8 <fiprintf+0x20>)
 800b2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e6:	6800      	ldr	r0, [r0, #0]
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	f000 f839 	bl	800b360 <_vfiprintf_r>
 800b2ee:	b002      	add	sp, #8
 800b2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2f4:	b003      	add	sp, #12
 800b2f6:	4770      	bx	lr
 800b2f8:	20000010 	.word	0x20000010

0800b2fc <malloc>:
 800b2fc:	4b02      	ldr	r3, [pc, #8]	; (800b308 <malloc+0xc>)
 800b2fe:	4601      	mov	r1, r0
 800b300:	6818      	ldr	r0, [r3, #0]
 800b302:	f7fd bedd 	b.w	80090c0 <_malloc_r>
 800b306:	bf00      	nop
 800b308:	20000010 	.word	0x20000010

0800b30c <__sfputc_r>:
 800b30c:	6893      	ldr	r3, [r2, #8]
 800b30e:	3b01      	subs	r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	b410      	push	{r4}
 800b314:	6093      	str	r3, [r2, #8]
 800b316:	da08      	bge.n	800b32a <__sfputc_r+0x1e>
 800b318:	6994      	ldr	r4, [r2, #24]
 800b31a:	42a3      	cmp	r3, r4
 800b31c:	db01      	blt.n	800b322 <__sfputc_r+0x16>
 800b31e:	290a      	cmp	r1, #10
 800b320:	d103      	bne.n	800b32a <__sfputc_r+0x1e>
 800b322:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b326:	f000 badf 	b.w	800b8e8 <__swbuf_r>
 800b32a:	6813      	ldr	r3, [r2, #0]
 800b32c:	1c58      	adds	r0, r3, #1
 800b32e:	6010      	str	r0, [r2, #0]
 800b330:	7019      	strb	r1, [r3, #0]
 800b332:	4608      	mov	r0, r1
 800b334:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <__sfputs_r>:
 800b33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33c:	4606      	mov	r6, r0
 800b33e:	460f      	mov	r7, r1
 800b340:	4614      	mov	r4, r2
 800b342:	18d5      	adds	r5, r2, r3
 800b344:	42ac      	cmp	r4, r5
 800b346:	d101      	bne.n	800b34c <__sfputs_r+0x12>
 800b348:	2000      	movs	r0, #0
 800b34a:	e007      	b.n	800b35c <__sfputs_r+0x22>
 800b34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b350:	463a      	mov	r2, r7
 800b352:	4630      	mov	r0, r6
 800b354:	f7ff ffda 	bl	800b30c <__sfputc_r>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d1f3      	bne.n	800b344 <__sfputs_r+0xa>
 800b35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b360 <_vfiprintf_r>:
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	460d      	mov	r5, r1
 800b366:	b09d      	sub	sp, #116	; 0x74
 800b368:	4614      	mov	r4, r2
 800b36a:	4698      	mov	r8, r3
 800b36c:	4606      	mov	r6, r0
 800b36e:	b118      	cbz	r0, 800b378 <_vfiprintf_r+0x18>
 800b370:	6983      	ldr	r3, [r0, #24]
 800b372:	b90b      	cbnz	r3, 800b378 <_vfiprintf_r+0x18>
 800b374:	f7fd fda8 	bl	8008ec8 <__sinit>
 800b378:	4b89      	ldr	r3, [pc, #548]	; (800b5a0 <_vfiprintf_r+0x240>)
 800b37a:	429d      	cmp	r5, r3
 800b37c:	d11b      	bne.n	800b3b6 <_vfiprintf_r+0x56>
 800b37e:	6875      	ldr	r5, [r6, #4]
 800b380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b382:	07d9      	lsls	r1, r3, #31
 800b384:	d405      	bmi.n	800b392 <_vfiprintf_r+0x32>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	059a      	lsls	r2, r3, #22
 800b38a:	d402      	bmi.n	800b392 <_vfiprintf_r+0x32>
 800b38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b38e:	f7fd fe5e 	bl	800904e <__retarget_lock_acquire_recursive>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	071b      	lsls	r3, r3, #28
 800b396:	d501      	bpl.n	800b39c <_vfiprintf_r+0x3c>
 800b398:	692b      	ldr	r3, [r5, #16]
 800b39a:	b9eb      	cbnz	r3, 800b3d8 <_vfiprintf_r+0x78>
 800b39c:	4629      	mov	r1, r5
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f000 faf4 	bl	800b98c <__swsetup_r>
 800b3a4:	b1c0      	cbz	r0, 800b3d8 <_vfiprintf_r+0x78>
 800b3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3a8:	07dc      	lsls	r4, r3, #31
 800b3aa:	d50e      	bpl.n	800b3ca <_vfiprintf_r+0x6a>
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b0:	b01d      	add	sp, #116	; 0x74
 800b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b6:	4b7b      	ldr	r3, [pc, #492]	; (800b5a4 <_vfiprintf_r+0x244>)
 800b3b8:	429d      	cmp	r5, r3
 800b3ba:	d101      	bne.n	800b3c0 <_vfiprintf_r+0x60>
 800b3bc:	68b5      	ldr	r5, [r6, #8]
 800b3be:	e7df      	b.n	800b380 <_vfiprintf_r+0x20>
 800b3c0:	4b79      	ldr	r3, [pc, #484]	; (800b5a8 <_vfiprintf_r+0x248>)
 800b3c2:	429d      	cmp	r5, r3
 800b3c4:	bf08      	it	eq
 800b3c6:	68f5      	ldreq	r5, [r6, #12]
 800b3c8:	e7da      	b.n	800b380 <_vfiprintf_r+0x20>
 800b3ca:	89ab      	ldrh	r3, [r5, #12]
 800b3cc:	0598      	lsls	r0, r3, #22
 800b3ce:	d4ed      	bmi.n	800b3ac <_vfiprintf_r+0x4c>
 800b3d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3d2:	f7fd fe3d 	bl	8009050 <__retarget_lock_release_recursive>
 800b3d6:	e7e9      	b.n	800b3ac <_vfiprintf_r+0x4c>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	9309      	str	r3, [sp, #36]	; 0x24
 800b3dc:	2320      	movs	r3, #32
 800b3de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3e6:	2330      	movs	r3, #48	; 0x30
 800b3e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5ac <_vfiprintf_r+0x24c>
 800b3ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3f0:	f04f 0901 	mov.w	r9, #1
 800b3f4:	4623      	mov	r3, r4
 800b3f6:	469a      	mov	sl, r3
 800b3f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3fc:	b10a      	cbz	r2, 800b402 <_vfiprintf_r+0xa2>
 800b3fe:	2a25      	cmp	r2, #37	; 0x25
 800b400:	d1f9      	bne.n	800b3f6 <_vfiprintf_r+0x96>
 800b402:	ebba 0b04 	subs.w	fp, sl, r4
 800b406:	d00b      	beq.n	800b420 <_vfiprintf_r+0xc0>
 800b408:	465b      	mov	r3, fp
 800b40a:	4622      	mov	r2, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	4630      	mov	r0, r6
 800b410:	f7ff ff93 	bl	800b33a <__sfputs_r>
 800b414:	3001      	adds	r0, #1
 800b416:	f000 80aa 	beq.w	800b56e <_vfiprintf_r+0x20e>
 800b41a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b41c:	445a      	add	r2, fp
 800b41e:	9209      	str	r2, [sp, #36]	; 0x24
 800b420:	f89a 3000 	ldrb.w	r3, [sl]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 80a2 	beq.w	800b56e <_vfiprintf_r+0x20e>
 800b42a:	2300      	movs	r3, #0
 800b42c:	f04f 32ff 	mov.w	r2, #4294967295
 800b430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b434:	f10a 0a01 	add.w	sl, sl, #1
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	9307      	str	r3, [sp, #28]
 800b43c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b440:	931a      	str	r3, [sp, #104]	; 0x68
 800b442:	4654      	mov	r4, sl
 800b444:	2205      	movs	r2, #5
 800b446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b44a:	4858      	ldr	r0, [pc, #352]	; (800b5ac <_vfiprintf_r+0x24c>)
 800b44c:	f7f4 ff00 	bl	8000250 <memchr>
 800b450:	9a04      	ldr	r2, [sp, #16]
 800b452:	b9d8      	cbnz	r0, 800b48c <_vfiprintf_r+0x12c>
 800b454:	06d1      	lsls	r1, r2, #27
 800b456:	bf44      	itt	mi
 800b458:	2320      	movmi	r3, #32
 800b45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b45e:	0713      	lsls	r3, r2, #28
 800b460:	bf44      	itt	mi
 800b462:	232b      	movmi	r3, #43	; 0x2b
 800b464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b468:	f89a 3000 	ldrb.w	r3, [sl]
 800b46c:	2b2a      	cmp	r3, #42	; 0x2a
 800b46e:	d015      	beq.n	800b49c <_vfiprintf_r+0x13c>
 800b470:	9a07      	ldr	r2, [sp, #28]
 800b472:	4654      	mov	r4, sl
 800b474:	2000      	movs	r0, #0
 800b476:	f04f 0c0a 	mov.w	ip, #10
 800b47a:	4621      	mov	r1, r4
 800b47c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b480:	3b30      	subs	r3, #48	; 0x30
 800b482:	2b09      	cmp	r3, #9
 800b484:	d94e      	bls.n	800b524 <_vfiprintf_r+0x1c4>
 800b486:	b1b0      	cbz	r0, 800b4b6 <_vfiprintf_r+0x156>
 800b488:	9207      	str	r2, [sp, #28]
 800b48a:	e014      	b.n	800b4b6 <_vfiprintf_r+0x156>
 800b48c:	eba0 0308 	sub.w	r3, r0, r8
 800b490:	fa09 f303 	lsl.w	r3, r9, r3
 800b494:	4313      	orrs	r3, r2
 800b496:	9304      	str	r3, [sp, #16]
 800b498:	46a2      	mov	sl, r4
 800b49a:	e7d2      	b.n	800b442 <_vfiprintf_r+0xe2>
 800b49c:	9b03      	ldr	r3, [sp, #12]
 800b49e:	1d19      	adds	r1, r3, #4
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	9103      	str	r1, [sp, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bfbb      	ittet	lt
 800b4a8:	425b      	neglt	r3, r3
 800b4aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ae:	9307      	strge	r3, [sp, #28]
 800b4b0:	9307      	strlt	r3, [sp, #28]
 800b4b2:	bfb8      	it	lt
 800b4b4:	9204      	strlt	r2, [sp, #16]
 800b4b6:	7823      	ldrb	r3, [r4, #0]
 800b4b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ba:	d10c      	bne.n	800b4d6 <_vfiprintf_r+0x176>
 800b4bc:	7863      	ldrb	r3, [r4, #1]
 800b4be:	2b2a      	cmp	r3, #42	; 0x2a
 800b4c0:	d135      	bne.n	800b52e <_vfiprintf_r+0x1ce>
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	1d1a      	adds	r2, r3, #4
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	9203      	str	r2, [sp, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	bfb8      	it	lt
 800b4ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4d2:	3402      	adds	r4, #2
 800b4d4:	9305      	str	r3, [sp, #20]
 800b4d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5bc <_vfiprintf_r+0x25c>
 800b4da:	7821      	ldrb	r1, [r4, #0]
 800b4dc:	2203      	movs	r2, #3
 800b4de:	4650      	mov	r0, sl
 800b4e0:	f7f4 feb6 	bl	8000250 <memchr>
 800b4e4:	b140      	cbz	r0, 800b4f8 <_vfiprintf_r+0x198>
 800b4e6:	2340      	movs	r3, #64	; 0x40
 800b4e8:	eba0 000a 	sub.w	r0, r0, sl
 800b4ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b4f0:	9b04      	ldr	r3, [sp, #16]
 800b4f2:	4303      	orrs	r3, r0
 800b4f4:	3401      	adds	r4, #1
 800b4f6:	9304      	str	r3, [sp, #16]
 800b4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4fc:	482c      	ldr	r0, [pc, #176]	; (800b5b0 <_vfiprintf_r+0x250>)
 800b4fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b502:	2206      	movs	r2, #6
 800b504:	f7f4 fea4 	bl	8000250 <memchr>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d03f      	beq.n	800b58c <_vfiprintf_r+0x22c>
 800b50c:	4b29      	ldr	r3, [pc, #164]	; (800b5b4 <_vfiprintf_r+0x254>)
 800b50e:	bb1b      	cbnz	r3, 800b558 <_vfiprintf_r+0x1f8>
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	3307      	adds	r3, #7
 800b514:	f023 0307 	bic.w	r3, r3, #7
 800b518:	3308      	adds	r3, #8
 800b51a:	9303      	str	r3, [sp, #12]
 800b51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51e:	443b      	add	r3, r7
 800b520:	9309      	str	r3, [sp, #36]	; 0x24
 800b522:	e767      	b.n	800b3f4 <_vfiprintf_r+0x94>
 800b524:	fb0c 3202 	mla	r2, ip, r2, r3
 800b528:	460c      	mov	r4, r1
 800b52a:	2001      	movs	r0, #1
 800b52c:	e7a5      	b.n	800b47a <_vfiprintf_r+0x11a>
 800b52e:	2300      	movs	r3, #0
 800b530:	3401      	adds	r4, #1
 800b532:	9305      	str	r3, [sp, #20]
 800b534:	4619      	mov	r1, r3
 800b536:	f04f 0c0a 	mov.w	ip, #10
 800b53a:	4620      	mov	r0, r4
 800b53c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b540:	3a30      	subs	r2, #48	; 0x30
 800b542:	2a09      	cmp	r2, #9
 800b544:	d903      	bls.n	800b54e <_vfiprintf_r+0x1ee>
 800b546:	2b00      	cmp	r3, #0
 800b548:	d0c5      	beq.n	800b4d6 <_vfiprintf_r+0x176>
 800b54a:	9105      	str	r1, [sp, #20]
 800b54c:	e7c3      	b.n	800b4d6 <_vfiprintf_r+0x176>
 800b54e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b552:	4604      	mov	r4, r0
 800b554:	2301      	movs	r3, #1
 800b556:	e7f0      	b.n	800b53a <_vfiprintf_r+0x1da>
 800b558:	ab03      	add	r3, sp, #12
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	462a      	mov	r2, r5
 800b55e:	4b16      	ldr	r3, [pc, #88]	; (800b5b8 <_vfiprintf_r+0x258>)
 800b560:	a904      	add	r1, sp, #16
 800b562:	4630      	mov	r0, r6
 800b564:	f3af 8000 	nop.w
 800b568:	4607      	mov	r7, r0
 800b56a:	1c78      	adds	r0, r7, #1
 800b56c:	d1d6      	bne.n	800b51c <_vfiprintf_r+0x1bc>
 800b56e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b570:	07d9      	lsls	r1, r3, #31
 800b572:	d405      	bmi.n	800b580 <_vfiprintf_r+0x220>
 800b574:	89ab      	ldrh	r3, [r5, #12]
 800b576:	059a      	lsls	r2, r3, #22
 800b578:	d402      	bmi.n	800b580 <_vfiprintf_r+0x220>
 800b57a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b57c:	f7fd fd68 	bl	8009050 <__retarget_lock_release_recursive>
 800b580:	89ab      	ldrh	r3, [r5, #12]
 800b582:	065b      	lsls	r3, r3, #25
 800b584:	f53f af12 	bmi.w	800b3ac <_vfiprintf_r+0x4c>
 800b588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b58a:	e711      	b.n	800b3b0 <_vfiprintf_r+0x50>
 800b58c:	ab03      	add	r3, sp, #12
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	462a      	mov	r2, r5
 800b592:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <_vfiprintf_r+0x258>)
 800b594:	a904      	add	r1, sp, #16
 800b596:	4630      	mov	r0, r6
 800b598:	f000 f880 	bl	800b69c <_printf_i>
 800b59c:	e7e4      	b.n	800b568 <_vfiprintf_r+0x208>
 800b59e:	bf00      	nop
 800b5a0:	0800bdac 	.word	0x0800bdac
 800b5a4:	0800bdcc 	.word	0x0800bdcc
 800b5a8:	0800bd8c 	.word	0x0800bd8c
 800b5ac:	0800c189 	.word	0x0800c189
 800b5b0:	0800c193 	.word	0x0800c193
 800b5b4:	00000000 	.word	0x00000000
 800b5b8:	0800b33b 	.word	0x0800b33b
 800b5bc:	0800c18f 	.word	0x0800c18f

0800b5c0 <_printf_common>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	4616      	mov	r6, r2
 800b5c6:	4699      	mov	r9, r3
 800b5c8:	688a      	ldr	r2, [r1, #8]
 800b5ca:	690b      	ldr	r3, [r1, #16]
 800b5cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	bfb8      	it	lt
 800b5d4:	4613      	movlt	r3, r2
 800b5d6:	6033      	str	r3, [r6, #0]
 800b5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5dc:	4607      	mov	r7, r0
 800b5de:	460c      	mov	r4, r1
 800b5e0:	b10a      	cbz	r2, 800b5e6 <_printf_common+0x26>
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	6033      	str	r3, [r6, #0]
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	0699      	lsls	r1, r3, #26
 800b5ea:	bf42      	ittt	mi
 800b5ec:	6833      	ldrmi	r3, [r6, #0]
 800b5ee:	3302      	addmi	r3, #2
 800b5f0:	6033      	strmi	r3, [r6, #0]
 800b5f2:	6825      	ldr	r5, [r4, #0]
 800b5f4:	f015 0506 	ands.w	r5, r5, #6
 800b5f8:	d106      	bne.n	800b608 <_printf_common+0x48>
 800b5fa:	f104 0a19 	add.w	sl, r4, #25
 800b5fe:	68e3      	ldr	r3, [r4, #12]
 800b600:	6832      	ldr	r2, [r6, #0]
 800b602:	1a9b      	subs	r3, r3, r2
 800b604:	42ab      	cmp	r3, r5
 800b606:	dc26      	bgt.n	800b656 <_printf_common+0x96>
 800b608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b60c:	1e13      	subs	r3, r2, #0
 800b60e:	6822      	ldr	r2, [r4, #0]
 800b610:	bf18      	it	ne
 800b612:	2301      	movne	r3, #1
 800b614:	0692      	lsls	r2, r2, #26
 800b616:	d42b      	bmi.n	800b670 <_printf_common+0xb0>
 800b618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b61c:	4649      	mov	r1, r9
 800b61e:	4638      	mov	r0, r7
 800b620:	47c0      	blx	r8
 800b622:	3001      	adds	r0, #1
 800b624:	d01e      	beq.n	800b664 <_printf_common+0xa4>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	68e5      	ldr	r5, [r4, #12]
 800b62a:	6832      	ldr	r2, [r6, #0]
 800b62c:	f003 0306 	and.w	r3, r3, #6
 800b630:	2b04      	cmp	r3, #4
 800b632:	bf08      	it	eq
 800b634:	1aad      	subeq	r5, r5, r2
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	6922      	ldr	r2, [r4, #16]
 800b63a:	bf0c      	ite	eq
 800b63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b640:	2500      	movne	r5, #0
 800b642:	4293      	cmp	r3, r2
 800b644:	bfc4      	itt	gt
 800b646:	1a9b      	subgt	r3, r3, r2
 800b648:	18ed      	addgt	r5, r5, r3
 800b64a:	2600      	movs	r6, #0
 800b64c:	341a      	adds	r4, #26
 800b64e:	42b5      	cmp	r5, r6
 800b650:	d11a      	bne.n	800b688 <_printf_common+0xc8>
 800b652:	2000      	movs	r0, #0
 800b654:	e008      	b.n	800b668 <_printf_common+0xa8>
 800b656:	2301      	movs	r3, #1
 800b658:	4652      	mov	r2, sl
 800b65a:	4649      	mov	r1, r9
 800b65c:	4638      	mov	r0, r7
 800b65e:	47c0      	blx	r8
 800b660:	3001      	adds	r0, #1
 800b662:	d103      	bne.n	800b66c <_printf_common+0xac>
 800b664:	f04f 30ff 	mov.w	r0, #4294967295
 800b668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66c:	3501      	adds	r5, #1
 800b66e:	e7c6      	b.n	800b5fe <_printf_common+0x3e>
 800b670:	18e1      	adds	r1, r4, r3
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	2030      	movs	r0, #48	; 0x30
 800b676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b67a:	4422      	add	r2, r4
 800b67c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b684:	3302      	adds	r3, #2
 800b686:	e7c7      	b.n	800b618 <_printf_common+0x58>
 800b688:	2301      	movs	r3, #1
 800b68a:	4622      	mov	r2, r4
 800b68c:	4649      	mov	r1, r9
 800b68e:	4638      	mov	r0, r7
 800b690:	47c0      	blx	r8
 800b692:	3001      	adds	r0, #1
 800b694:	d0e6      	beq.n	800b664 <_printf_common+0xa4>
 800b696:	3601      	adds	r6, #1
 800b698:	e7d9      	b.n	800b64e <_printf_common+0x8e>
	...

0800b69c <_printf_i>:
 800b69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a0:	7e0f      	ldrb	r7, [r1, #24]
 800b6a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6a4:	2f78      	cmp	r7, #120	; 0x78
 800b6a6:	4691      	mov	r9, r2
 800b6a8:	4680      	mov	r8, r0
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	469a      	mov	sl, r3
 800b6ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6b2:	d807      	bhi.n	800b6c4 <_printf_i+0x28>
 800b6b4:	2f62      	cmp	r7, #98	; 0x62
 800b6b6:	d80a      	bhi.n	800b6ce <_printf_i+0x32>
 800b6b8:	2f00      	cmp	r7, #0
 800b6ba:	f000 80d8 	beq.w	800b86e <_printf_i+0x1d2>
 800b6be:	2f58      	cmp	r7, #88	; 0x58
 800b6c0:	f000 80a3 	beq.w	800b80a <_printf_i+0x16e>
 800b6c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6cc:	e03a      	b.n	800b744 <_printf_i+0xa8>
 800b6ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6d2:	2b15      	cmp	r3, #21
 800b6d4:	d8f6      	bhi.n	800b6c4 <_printf_i+0x28>
 800b6d6:	a101      	add	r1, pc, #4	; (adr r1, 800b6dc <_printf_i+0x40>)
 800b6d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6dc:	0800b735 	.word	0x0800b735
 800b6e0:	0800b749 	.word	0x0800b749
 800b6e4:	0800b6c5 	.word	0x0800b6c5
 800b6e8:	0800b6c5 	.word	0x0800b6c5
 800b6ec:	0800b6c5 	.word	0x0800b6c5
 800b6f0:	0800b6c5 	.word	0x0800b6c5
 800b6f4:	0800b749 	.word	0x0800b749
 800b6f8:	0800b6c5 	.word	0x0800b6c5
 800b6fc:	0800b6c5 	.word	0x0800b6c5
 800b700:	0800b6c5 	.word	0x0800b6c5
 800b704:	0800b6c5 	.word	0x0800b6c5
 800b708:	0800b855 	.word	0x0800b855
 800b70c:	0800b779 	.word	0x0800b779
 800b710:	0800b837 	.word	0x0800b837
 800b714:	0800b6c5 	.word	0x0800b6c5
 800b718:	0800b6c5 	.word	0x0800b6c5
 800b71c:	0800b877 	.word	0x0800b877
 800b720:	0800b6c5 	.word	0x0800b6c5
 800b724:	0800b779 	.word	0x0800b779
 800b728:	0800b6c5 	.word	0x0800b6c5
 800b72c:	0800b6c5 	.word	0x0800b6c5
 800b730:	0800b83f 	.word	0x0800b83f
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	1d1a      	adds	r2, r3, #4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	602a      	str	r2, [r5, #0]
 800b73c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b744:	2301      	movs	r3, #1
 800b746:	e0a3      	b.n	800b890 <_printf_i+0x1f4>
 800b748:	6820      	ldr	r0, [r4, #0]
 800b74a:	6829      	ldr	r1, [r5, #0]
 800b74c:	0606      	lsls	r6, r0, #24
 800b74e:	f101 0304 	add.w	r3, r1, #4
 800b752:	d50a      	bpl.n	800b76a <_printf_i+0xce>
 800b754:	680e      	ldr	r6, [r1, #0]
 800b756:	602b      	str	r3, [r5, #0]
 800b758:	2e00      	cmp	r6, #0
 800b75a:	da03      	bge.n	800b764 <_printf_i+0xc8>
 800b75c:	232d      	movs	r3, #45	; 0x2d
 800b75e:	4276      	negs	r6, r6
 800b760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b764:	485e      	ldr	r0, [pc, #376]	; (800b8e0 <_printf_i+0x244>)
 800b766:	230a      	movs	r3, #10
 800b768:	e019      	b.n	800b79e <_printf_i+0x102>
 800b76a:	680e      	ldr	r6, [r1, #0]
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b772:	bf18      	it	ne
 800b774:	b236      	sxthne	r6, r6
 800b776:	e7ef      	b.n	800b758 <_printf_i+0xbc>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	6820      	ldr	r0, [r4, #0]
 800b77c:	1d19      	adds	r1, r3, #4
 800b77e:	6029      	str	r1, [r5, #0]
 800b780:	0601      	lsls	r1, r0, #24
 800b782:	d501      	bpl.n	800b788 <_printf_i+0xec>
 800b784:	681e      	ldr	r6, [r3, #0]
 800b786:	e002      	b.n	800b78e <_printf_i+0xf2>
 800b788:	0646      	lsls	r6, r0, #25
 800b78a:	d5fb      	bpl.n	800b784 <_printf_i+0xe8>
 800b78c:	881e      	ldrh	r6, [r3, #0]
 800b78e:	4854      	ldr	r0, [pc, #336]	; (800b8e0 <_printf_i+0x244>)
 800b790:	2f6f      	cmp	r7, #111	; 0x6f
 800b792:	bf0c      	ite	eq
 800b794:	2308      	moveq	r3, #8
 800b796:	230a      	movne	r3, #10
 800b798:	2100      	movs	r1, #0
 800b79a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b79e:	6865      	ldr	r5, [r4, #4]
 800b7a0:	60a5      	str	r5, [r4, #8]
 800b7a2:	2d00      	cmp	r5, #0
 800b7a4:	bfa2      	ittt	ge
 800b7a6:	6821      	ldrge	r1, [r4, #0]
 800b7a8:	f021 0104 	bicge.w	r1, r1, #4
 800b7ac:	6021      	strge	r1, [r4, #0]
 800b7ae:	b90e      	cbnz	r6, 800b7b4 <_printf_i+0x118>
 800b7b0:	2d00      	cmp	r5, #0
 800b7b2:	d04d      	beq.n	800b850 <_printf_i+0x1b4>
 800b7b4:	4615      	mov	r5, r2
 800b7b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7ba:	fb03 6711 	mls	r7, r3, r1, r6
 800b7be:	5dc7      	ldrb	r7, [r0, r7]
 800b7c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7c4:	4637      	mov	r7, r6
 800b7c6:	42bb      	cmp	r3, r7
 800b7c8:	460e      	mov	r6, r1
 800b7ca:	d9f4      	bls.n	800b7b6 <_printf_i+0x11a>
 800b7cc:	2b08      	cmp	r3, #8
 800b7ce:	d10b      	bne.n	800b7e8 <_printf_i+0x14c>
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	07de      	lsls	r6, r3, #31
 800b7d4:	d508      	bpl.n	800b7e8 <_printf_i+0x14c>
 800b7d6:	6923      	ldr	r3, [r4, #16]
 800b7d8:	6861      	ldr	r1, [r4, #4]
 800b7da:	4299      	cmp	r1, r3
 800b7dc:	bfde      	ittt	le
 800b7de:	2330      	movle	r3, #48	; 0x30
 800b7e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7e8:	1b52      	subs	r2, r2, r5
 800b7ea:	6122      	str	r2, [r4, #16]
 800b7ec:	f8cd a000 	str.w	sl, [sp]
 800b7f0:	464b      	mov	r3, r9
 800b7f2:	aa03      	add	r2, sp, #12
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	4640      	mov	r0, r8
 800b7f8:	f7ff fee2 	bl	800b5c0 <_printf_common>
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d14c      	bne.n	800b89a <_printf_i+0x1fe>
 800b800:	f04f 30ff 	mov.w	r0, #4294967295
 800b804:	b004      	add	sp, #16
 800b806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80a:	4835      	ldr	r0, [pc, #212]	; (800b8e0 <_printf_i+0x244>)
 800b80c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b810:	6829      	ldr	r1, [r5, #0]
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	f851 6b04 	ldr.w	r6, [r1], #4
 800b818:	6029      	str	r1, [r5, #0]
 800b81a:	061d      	lsls	r5, r3, #24
 800b81c:	d514      	bpl.n	800b848 <_printf_i+0x1ac>
 800b81e:	07df      	lsls	r7, r3, #31
 800b820:	bf44      	itt	mi
 800b822:	f043 0320 	orrmi.w	r3, r3, #32
 800b826:	6023      	strmi	r3, [r4, #0]
 800b828:	b91e      	cbnz	r6, 800b832 <_printf_i+0x196>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	f023 0320 	bic.w	r3, r3, #32
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	2310      	movs	r3, #16
 800b834:	e7b0      	b.n	800b798 <_printf_i+0xfc>
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	f043 0320 	orr.w	r3, r3, #32
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	2378      	movs	r3, #120	; 0x78
 800b840:	4828      	ldr	r0, [pc, #160]	; (800b8e4 <_printf_i+0x248>)
 800b842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b846:	e7e3      	b.n	800b810 <_printf_i+0x174>
 800b848:	0659      	lsls	r1, r3, #25
 800b84a:	bf48      	it	mi
 800b84c:	b2b6      	uxthmi	r6, r6
 800b84e:	e7e6      	b.n	800b81e <_printf_i+0x182>
 800b850:	4615      	mov	r5, r2
 800b852:	e7bb      	b.n	800b7cc <_printf_i+0x130>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	6826      	ldr	r6, [r4, #0]
 800b858:	6961      	ldr	r1, [r4, #20]
 800b85a:	1d18      	adds	r0, r3, #4
 800b85c:	6028      	str	r0, [r5, #0]
 800b85e:	0635      	lsls	r5, r6, #24
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	d501      	bpl.n	800b868 <_printf_i+0x1cc>
 800b864:	6019      	str	r1, [r3, #0]
 800b866:	e002      	b.n	800b86e <_printf_i+0x1d2>
 800b868:	0670      	lsls	r0, r6, #25
 800b86a:	d5fb      	bpl.n	800b864 <_printf_i+0x1c8>
 800b86c:	8019      	strh	r1, [r3, #0]
 800b86e:	2300      	movs	r3, #0
 800b870:	6123      	str	r3, [r4, #16]
 800b872:	4615      	mov	r5, r2
 800b874:	e7ba      	b.n	800b7ec <_printf_i+0x150>
 800b876:	682b      	ldr	r3, [r5, #0]
 800b878:	1d1a      	adds	r2, r3, #4
 800b87a:	602a      	str	r2, [r5, #0]
 800b87c:	681d      	ldr	r5, [r3, #0]
 800b87e:	6862      	ldr	r2, [r4, #4]
 800b880:	2100      	movs	r1, #0
 800b882:	4628      	mov	r0, r5
 800b884:	f7f4 fce4 	bl	8000250 <memchr>
 800b888:	b108      	cbz	r0, 800b88e <_printf_i+0x1f2>
 800b88a:	1b40      	subs	r0, r0, r5
 800b88c:	6060      	str	r0, [r4, #4]
 800b88e:	6863      	ldr	r3, [r4, #4]
 800b890:	6123      	str	r3, [r4, #16]
 800b892:	2300      	movs	r3, #0
 800b894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b898:	e7a8      	b.n	800b7ec <_printf_i+0x150>
 800b89a:	6923      	ldr	r3, [r4, #16]
 800b89c:	462a      	mov	r2, r5
 800b89e:	4649      	mov	r1, r9
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	47d0      	blx	sl
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	d0ab      	beq.n	800b800 <_printf_i+0x164>
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	079b      	lsls	r3, r3, #30
 800b8ac:	d413      	bmi.n	800b8d6 <_printf_i+0x23a>
 800b8ae:	68e0      	ldr	r0, [r4, #12]
 800b8b0:	9b03      	ldr	r3, [sp, #12]
 800b8b2:	4298      	cmp	r0, r3
 800b8b4:	bfb8      	it	lt
 800b8b6:	4618      	movlt	r0, r3
 800b8b8:	e7a4      	b.n	800b804 <_printf_i+0x168>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	4632      	mov	r2, r6
 800b8be:	4649      	mov	r1, r9
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	47d0      	blx	sl
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d09b      	beq.n	800b800 <_printf_i+0x164>
 800b8c8:	3501      	adds	r5, #1
 800b8ca:	68e3      	ldr	r3, [r4, #12]
 800b8cc:	9903      	ldr	r1, [sp, #12]
 800b8ce:	1a5b      	subs	r3, r3, r1
 800b8d0:	42ab      	cmp	r3, r5
 800b8d2:	dcf2      	bgt.n	800b8ba <_printf_i+0x21e>
 800b8d4:	e7eb      	b.n	800b8ae <_printf_i+0x212>
 800b8d6:	2500      	movs	r5, #0
 800b8d8:	f104 0619 	add.w	r6, r4, #25
 800b8dc:	e7f5      	b.n	800b8ca <_printf_i+0x22e>
 800b8de:	bf00      	nop
 800b8e0:	0800c19a 	.word	0x0800c19a
 800b8e4:	0800c1ab 	.word	0x0800c1ab

0800b8e8 <__swbuf_r>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	460e      	mov	r6, r1
 800b8ec:	4614      	mov	r4, r2
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	b118      	cbz	r0, 800b8fa <__swbuf_r+0x12>
 800b8f2:	6983      	ldr	r3, [r0, #24]
 800b8f4:	b90b      	cbnz	r3, 800b8fa <__swbuf_r+0x12>
 800b8f6:	f7fd fae7 	bl	8008ec8 <__sinit>
 800b8fa:	4b21      	ldr	r3, [pc, #132]	; (800b980 <__swbuf_r+0x98>)
 800b8fc:	429c      	cmp	r4, r3
 800b8fe:	d12b      	bne.n	800b958 <__swbuf_r+0x70>
 800b900:	686c      	ldr	r4, [r5, #4]
 800b902:	69a3      	ldr	r3, [r4, #24]
 800b904:	60a3      	str	r3, [r4, #8]
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	071a      	lsls	r2, r3, #28
 800b90a:	d52f      	bpl.n	800b96c <__swbuf_r+0x84>
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	b36b      	cbz	r3, 800b96c <__swbuf_r+0x84>
 800b910:	6923      	ldr	r3, [r4, #16]
 800b912:	6820      	ldr	r0, [r4, #0]
 800b914:	1ac0      	subs	r0, r0, r3
 800b916:	6963      	ldr	r3, [r4, #20]
 800b918:	b2f6      	uxtb	r6, r6
 800b91a:	4283      	cmp	r3, r0
 800b91c:	4637      	mov	r7, r6
 800b91e:	dc04      	bgt.n	800b92a <__swbuf_r+0x42>
 800b920:	4621      	mov	r1, r4
 800b922:	4628      	mov	r0, r5
 800b924:	f7fe fb96 	bl	800a054 <_fflush_r>
 800b928:	bb30      	cbnz	r0, 800b978 <__swbuf_r+0x90>
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	3b01      	subs	r3, #1
 800b92e:	60a3      	str	r3, [r4, #8]
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	1c5a      	adds	r2, r3, #1
 800b934:	6022      	str	r2, [r4, #0]
 800b936:	701e      	strb	r6, [r3, #0]
 800b938:	6963      	ldr	r3, [r4, #20]
 800b93a:	3001      	adds	r0, #1
 800b93c:	4283      	cmp	r3, r0
 800b93e:	d004      	beq.n	800b94a <__swbuf_r+0x62>
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	07db      	lsls	r3, r3, #31
 800b944:	d506      	bpl.n	800b954 <__swbuf_r+0x6c>
 800b946:	2e0a      	cmp	r6, #10
 800b948:	d104      	bne.n	800b954 <__swbuf_r+0x6c>
 800b94a:	4621      	mov	r1, r4
 800b94c:	4628      	mov	r0, r5
 800b94e:	f7fe fb81 	bl	800a054 <_fflush_r>
 800b952:	b988      	cbnz	r0, 800b978 <__swbuf_r+0x90>
 800b954:	4638      	mov	r0, r7
 800b956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b958:	4b0a      	ldr	r3, [pc, #40]	; (800b984 <__swbuf_r+0x9c>)
 800b95a:	429c      	cmp	r4, r3
 800b95c:	d101      	bne.n	800b962 <__swbuf_r+0x7a>
 800b95e:	68ac      	ldr	r4, [r5, #8]
 800b960:	e7cf      	b.n	800b902 <__swbuf_r+0x1a>
 800b962:	4b09      	ldr	r3, [pc, #36]	; (800b988 <__swbuf_r+0xa0>)
 800b964:	429c      	cmp	r4, r3
 800b966:	bf08      	it	eq
 800b968:	68ec      	ldreq	r4, [r5, #12]
 800b96a:	e7ca      	b.n	800b902 <__swbuf_r+0x1a>
 800b96c:	4621      	mov	r1, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 f80c 	bl	800b98c <__swsetup_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	d0cb      	beq.n	800b910 <__swbuf_r+0x28>
 800b978:	f04f 37ff 	mov.w	r7, #4294967295
 800b97c:	e7ea      	b.n	800b954 <__swbuf_r+0x6c>
 800b97e:	bf00      	nop
 800b980:	0800bdac 	.word	0x0800bdac
 800b984:	0800bdcc 	.word	0x0800bdcc
 800b988:	0800bd8c 	.word	0x0800bd8c

0800b98c <__swsetup_r>:
 800b98c:	4b32      	ldr	r3, [pc, #200]	; (800ba58 <__swsetup_r+0xcc>)
 800b98e:	b570      	push	{r4, r5, r6, lr}
 800b990:	681d      	ldr	r5, [r3, #0]
 800b992:	4606      	mov	r6, r0
 800b994:	460c      	mov	r4, r1
 800b996:	b125      	cbz	r5, 800b9a2 <__swsetup_r+0x16>
 800b998:	69ab      	ldr	r3, [r5, #24]
 800b99a:	b913      	cbnz	r3, 800b9a2 <__swsetup_r+0x16>
 800b99c:	4628      	mov	r0, r5
 800b99e:	f7fd fa93 	bl	8008ec8 <__sinit>
 800b9a2:	4b2e      	ldr	r3, [pc, #184]	; (800ba5c <__swsetup_r+0xd0>)
 800b9a4:	429c      	cmp	r4, r3
 800b9a6:	d10f      	bne.n	800b9c8 <__swsetup_r+0x3c>
 800b9a8:	686c      	ldr	r4, [r5, #4]
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9b0:	0719      	lsls	r1, r3, #28
 800b9b2:	d42c      	bmi.n	800ba0e <__swsetup_r+0x82>
 800b9b4:	06dd      	lsls	r5, r3, #27
 800b9b6:	d411      	bmi.n	800b9dc <__swsetup_r+0x50>
 800b9b8:	2309      	movs	r3, #9
 800b9ba:	6033      	str	r3, [r6, #0]
 800b9bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9c0:	81a3      	strh	r3, [r4, #12]
 800b9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c6:	e03e      	b.n	800ba46 <__swsetup_r+0xba>
 800b9c8:	4b25      	ldr	r3, [pc, #148]	; (800ba60 <__swsetup_r+0xd4>)
 800b9ca:	429c      	cmp	r4, r3
 800b9cc:	d101      	bne.n	800b9d2 <__swsetup_r+0x46>
 800b9ce:	68ac      	ldr	r4, [r5, #8]
 800b9d0:	e7eb      	b.n	800b9aa <__swsetup_r+0x1e>
 800b9d2:	4b24      	ldr	r3, [pc, #144]	; (800ba64 <__swsetup_r+0xd8>)
 800b9d4:	429c      	cmp	r4, r3
 800b9d6:	bf08      	it	eq
 800b9d8:	68ec      	ldreq	r4, [r5, #12]
 800b9da:	e7e6      	b.n	800b9aa <__swsetup_r+0x1e>
 800b9dc:	0758      	lsls	r0, r3, #29
 800b9de:	d512      	bpl.n	800ba06 <__swsetup_r+0x7a>
 800b9e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9e2:	b141      	cbz	r1, 800b9f6 <__swsetup_r+0x6a>
 800b9e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	d002      	beq.n	800b9f2 <__swsetup_r+0x66>
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff fbe1 	bl	800b1b4 <_free_r>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	6363      	str	r3, [r4, #52]	; 0x34
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	6063      	str	r3, [r4, #4]
 800ba02:	6923      	ldr	r3, [r4, #16]
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	f043 0308 	orr.w	r3, r3, #8
 800ba0c:	81a3      	strh	r3, [r4, #12]
 800ba0e:	6923      	ldr	r3, [r4, #16]
 800ba10:	b94b      	cbnz	r3, 800ba26 <__swsetup_r+0x9a>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba1c:	d003      	beq.n	800ba26 <__swsetup_r+0x9a>
 800ba1e:	4621      	mov	r1, r4
 800ba20:	4630      	mov	r0, r6
 800ba22:	f000 f84d 	bl	800bac0 <__smakebuf_r>
 800ba26:	89a0      	ldrh	r0, [r4, #12]
 800ba28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba2c:	f010 0301 	ands.w	r3, r0, #1
 800ba30:	d00a      	beq.n	800ba48 <__swsetup_r+0xbc>
 800ba32:	2300      	movs	r3, #0
 800ba34:	60a3      	str	r3, [r4, #8]
 800ba36:	6963      	ldr	r3, [r4, #20]
 800ba38:	425b      	negs	r3, r3
 800ba3a:	61a3      	str	r3, [r4, #24]
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	b943      	cbnz	r3, 800ba52 <__swsetup_r+0xc6>
 800ba40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba44:	d1ba      	bne.n	800b9bc <__swsetup_r+0x30>
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	0781      	lsls	r1, r0, #30
 800ba4a:	bf58      	it	pl
 800ba4c:	6963      	ldrpl	r3, [r4, #20]
 800ba4e:	60a3      	str	r3, [r4, #8]
 800ba50:	e7f4      	b.n	800ba3c <__swsetup_r+0xb0>
 800ba52:	2000      	movs	r0, #0
 800ba54:	e7f7      	b.n	800ba46 <__swsetup_r+0xba>
 800ba56:	bf00      	nop
 800ba58:	20000010 	.word	0x20000010
 800ba5c:	0800bdac 	.word	0x0800bdac
 800ba60:	0800bdcc 	.word	0x0800bdcc
 800ba64:	0800bd8c 	.word	0x0800bd8c

0800ba68 <abort>:
 800ba68:	b508      	push	{r3, lr}
 800ba6a:	2006      	movs	r0, #6
 800ba6c:	f000 f890 	bl	800bb90 <raise>
 800ba70:	2001      	movs	r0, #1
 800ba72:	f7f6 f8a1 	bl	8001bb8 <_exit>

0800ba76 <__swhatbuf_r>:
 800ba76:	b570      	push	{r4, r5, r6, lr}
 800ba78:	460e      	mov	r6, r1
 800ba7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7e:	2900      	cmp	r1, #0
 800ba80:	b096      	sub	sp, #88	; 0x58
 800ba82:	4614      	mov	r4, r2
 800ba84:	461d      	mov	r5, r3
 800ba86:	da08      	bge.n	800ba9a <__swhatbuf_r+0x24>
 800ba88:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	602a      	str	r2, [r5, #0]
 800ba90:	061a      	lsls	r2, r3, #24
 800ba92:	d410      	bmi.n	800bab6 <__swhatbuf_r+0x40>
 800ba94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba98:	e00e      	b.n	800bab8 <__swhatbuf_r+0x42>
 800ba9a:	466a      	mov	r2, sp
 800ba9c:	f000 f894 	bl	800bbc8 <_fstat_r>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	dbf1      	blt.n	800ba88 <__swhatbuf_r+0x12>
 800baa4:	9a01      	ldr	r2, [sp, #4]
 800baa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800baae:	425a      	negs	r2, r3
 800bab0:	415a      	adcs	r2, r3
 800bab2:	602a      	str	r2, [r5, #0]
 800bab4:	e7ee      	b.n	800ba94 <__swhatbuf_r+0x1e>
 800bab6:	2340      	movs	r3, #64	; 0x40
 800bab8:	2000      	movs	r0, #0
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	b016      	add	sp, #88	; 0x58
 800babe:	bd70      	pop	{r4, r5, r6, pc}

0800bac0 <__smakebuf_r>:
 800bac0:	898b      	ldrh	r3, [r1, #12]
 800bac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bac4:	079d      	lsls	r5, r3, #30
 800bac6:	4606      	mov	r6, r0
 800bac8:	460c      	mov	r4, r1
 800baca:	d507      	bpl.n	800badc <__smakebuf_r+0x1c>
 800bacc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	6123      	str	r3, [r4, #16]
 800bad4:	2301      	movs	r3, #1
 800bad6:	6163      	str	r3, [r4, #20]
 800bad8:	b002      	add	sp, #8
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	ab01      	add	r3, sp, #4
 800bade:	466a      	mov	r2, sp
 800bae0:	f7ff ffc9 	bl	800ba76 <__swhatbuf_r>
 800bae4:	9900      	ldr	r1, [sp, #0]
 800bae6:	4605      	mov	r5, r0
 800bae8:	4630      	mov	r0, r6
 800baea:	f7fd fae9 	bl	80090c0 <_malloc_r>
 800baee:	b948      	cbnz	r0, 800bb04 <__smakebuf_r+0x44>
 800baf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf4:	059a      	lsls	r2, r3, #22
 800baf6:	d4ef      	bmi.n	800bad8 <__smakebuf_r+0x18>
 800baf8:	f023 0303 	bic.w	r3, r3, #3
 800bafc:	f043 0302 	orr.w	r3, r3, #2
 800bb00:	81a3      	strh	r3, [r4, #12]
 800bb02:	e7e3      	b.n	800bacc <__smakebuf_r+0xc>
 800bb04:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <__smakebuf_r+0x7c>)
 800bb06:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	6020      	str	r0, [r4, #0]
 800bb0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb10:	81a3      	strh	r3, [r4, #12]
 800bb12:	9b00      	ldr	r3, [sp, #0]
 800bb14:	6163      	str	r3, [r4, #20]
 800bb16:	9b01      	ldr	r3, [sp, #4]
 800bb18:	6120      	str	r0, [r4, #16]
 800bb1a:	b15b      	cbz	r3, 800bb34 <__smakebuf_r+0x74>
 800bb1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb20:	4630      	mov	r0, r6
 800bb22:	f000 f863 	bl	800bbec <_isatty_r>
 800bb26:	b128      	cbz	r0, 800bb34 <__smakebuf_r+0x74>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	f023 0303 	bic.w	r3, r3, #3
 800bb2e:	f043 0301 	orr.w	r3, r3, #1
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	89a0      	ldrh	r0, [r4, #12]
 800bb36:	4305      	orrs	r5, r0
 800bb38:	81a5      	strh	r5, [r4, #12]
 800bb3a:	e7cd      	b.n	800bad8 <__smakebuf_r+0x18>
 800bb3c:	08008e61 	.word	0x08008e61

0800bb40 <_raise_r>:
 800bb40:	291f      	cmp	r1, #31
 800bb42:	b538      	push	{r3, r4, r5, lr}
 800bb44:	4604      	mov	r4, r0
 800bb46:	460d      	mov	r5, r1
 800bb48:	d904      	bls.n	800bb54 <_raise_r+0x14>
 800bb4a:	2316      	movs	r3, #22
 800bb4c:	6003      	str	r3, [r0, #0]
 800bb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb52:	bd38      	pop	{r3, r4, r5, pc}
 800bb54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb56:	b112      	cbz	r2, 800bb5e <_raise_r+0x1e>
 800bb58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb5c:	b94b      	cbnz	r3, 800bb72 <_raise_r+0x32>
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f000 f830 	bl	800bbc4 <_getpid_r>
 800bb64:	462a      	mov	r2, r5
 800bb66:	4601      	mov	r1, r0
 800bb68:	4620      	mov	r0, r4
 800bb6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb6e:	f000 b817 	b.w	800bba0 <_kill_r>
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d00a      	beq.n	800bb8c <_raise_r+0x4c>
 800bb76:	1c59      	adds	r1, r3, #1
 800bb78:	d103      	bne.n	800bb82 <_raise_r+0x42>
 800bb7a:	2316      	movs	r3, #22
 800bb7c:	6003      	str	r3, [r0, #0]
 800bb7e:	2001      	movs	r0, #1
 800bb80:	e7e7      	b.n	800bb52 <_raise_r+0x12>
 800bb82:	2400      	movs	r4, #0
 800bb84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb88:	4628      	mov	r0, r5
 800bb8a:	4798      	blx	r3
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	e7e0      	b.n	800bb52 <_raise_r+0x12>

0800bb90 <raise>:
 800bb90:	4b02      	ldr	r3, [pc, #8]	; (800bb9c <raise+0xc>)
 800bb92:	4601      	mov	r1, r0
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	f7ff bfd3 	b.w	800bb40 <_raise_r>
 800bb9a:	bf00      	nop
 800bb9c:	20000010 	.word	0x20000010

0800bba0 <_kill_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	4d07      	ldr	r5, [pc, #28]	; (800bbc0 <_kill_r+0x20>)
 800bba4:	2300      	movs	r3, #0
 800bba6:	4604      	mov	r4, r0
 800bba8:	4608      	mov	r0, r1
 800bbaa:	4611      	mov	r1, r2
 800bbac:	602b      	str	r3, [r5, #0]
 800bbae:	f7f5 fff3 	bl	8001b98 <_kill>
 800bbb2:	1c43      	adds	r3, r0, #1
 800bbb4:	d102      	bne.n	800bbbc <_kill_r+0x1c>
 800bbb6:	682b      	ldr	r3, [r5, #0]
 800bbb8:	b103      	cbz	r3, 800bbbc <_kill_r+0x1c>
 800bbba:	6023      	str	r3, [r4, #0]
 800bbbc:	bd38      	pop	{r3, r4, r5, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20005658 	.word	0x20005658

0800bbc4 <_getpid_r>:
 800bbc4:	f7f5 bfe0 	b.w	8001b88 <_getpid>

0800bbc8 <_fstat_r>:
 800bbc8:	b538      	push	{r3, r4, r5, lr}
 800bbca:	4d07      	ldr	r5, [pc, #28]	; (800bbe8 <_fstat_r+0x20>)
 800bbcc:	2300      	movs	r3, #0
 800bbce:	4604      	mov	r4, r0
 800bbd0:	4608      	mov	r0, r1
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	602b      	str	r3, [r5, #0]
 800bbd6:	f7f6 f83e 	bl	8001c56 <_fstat>
 800bbda:	1c43      	adds	r3, r0, #1
 800bbdc:	d102      	bne.n	800bbe4 <_fstat_r+0x1c>
 800bbde:	682b      	ldr	r3, [r5, #0]
 800bbe0:	b103      	cbz	r3, 800bbe4 <_fstat_r+0x1c>
 800bbe2:	6023      	str	r3, [r4, #0]
 800bbe4:	bd38      	pop	{r3, r4, r5, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20005658 	.word	0x20005658

0800bbec <_isatty_r>:
 800bbec:	b538      	push	{r3, r4, r5, lr}
 800bbee:	4d06      	ldr	r5, [pc, #24]	; (800bc08 <_isatty_r+0x1c>)
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	4608      	mov	r0, r1
 800bbf6:	602b      	str	r3, [r5, #0]
 800bbf8:	f7f6 f83d 	bl	8001c76 <_isatty>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	d102      	bne.n	800bc06 <_isatty_r+0x1a>
 800bc00:	682b      	ldr	r3, [r5, #0]
 800bc02:	b103      	cbz	r3, 800bc06 <_isatty_r+0x1a>
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	bd38      	pop	{r3, r4, r5, pc}
 800bc08:	20005658 	.word	0x20005658

0800bc0c <_init>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	bf00      	nop
 800bc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc12:	bc08      	pop	{r3}
 800bc14:	469e      	mov	lr, r3
 800bc16:	4770      	bx	lr

0800bc18 <_fini>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	bf00      	nop
 800bc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1e:	bc08      	pop	{r3}
 800bc20:	469e      	mov	lr, r3
 800bc22:	4770      	bx	lr
