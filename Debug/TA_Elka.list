
TA_Elka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b934  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800bb38  0800bb38  0001bb38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0cc  0800c0cc  00020324  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0cc  0800c0cc  0001c0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0d4  0800c0d4  00020324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0d4  0800c0d4  0001c0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0d8  0800c0d8  0001c0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c0dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e4  0800c2c0  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000284  0800c360  00020284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000529c  20000328  0800c400  00020328  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  200055c4  0800c400  000255c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002055a  00000000  00000000  00020352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000045e1  00000000  00000000  000408ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001670  00000000  00000000  00044e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014a8  00000000  00000000  00046500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cd87  00000000  00000000  000479a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001caff  00000000  00000000  0007472f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010754e  00000000  00000000  0009122e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0019877c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006c44  00000000  00000000  001987cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000328 	.word	0x20000328
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bb1c 	.word	0x0800bb1c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000032c 	.word	0x2000032c
 800023c:	0800bb1c 	.word	0x0800bb1c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_ETH_Init+0x84>)
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <MX_ETH_Init+0x88>)
 80009e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009f4:	22e1      	movs	r2, #225	; 0xe1
 80009f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a16:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a1c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <MX_ETH_Init+0x94>)
 8000a22:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a2a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a2e:	f001 fd8f 	bl	8002550 <HAL_ETH_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a38:	f001 f852 	bl	8001ae0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a3c:	2238      	movs	r2, #56	; 0x38
 8000a3e:	2100      	movs	r1, #0
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a42:	f008 fa9c 	bl	8008f7e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a48:	2221      	movs	r2, #33	; 0x21
 8000a4a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a4e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a52:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000037c 	.word	0x2000037c
 8000a64:	40028000 	.word	0x40028000
 8000a68:	2000042c 	.word	0x2000042c
 8000a6c:	20000284 	.word	0x20000284
 8000a70:	200001e4 	.word	0x200001e4
 8000a74:	20000344 	.word	0x20000344

08000a78 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a4e      	ldr	r2, [pc, #312]	; (8000bd0 <HAL_ETH_MspInit+0x158>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 8096 	bne.w	8000bc8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a4c      	ldr	r2, [pc, #304]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab0:	623b      	str	r3, [r7, #32]
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a46      	ldr	r2, [pc, #280]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a3a      	ldr	r2, [pc, #232]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b44:	2332      	movs	r3, #50	; 0x32
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <HAL_ETH_MspInit+0x160>)
 8000b60:	f002 f81c 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b64:	2386      	movs	r3, #134	; 0x86
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b74:	230b      	movs	r3, #11
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <HAL_ETH_MspInit+0x164>)
 8000b80:	f002 f80c 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b96:	230b      	movs	r3, #11
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <HAL_ETH_MspInit+0x168>)
 8000ba2:	f001 fffb 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <HAL_ETH_MspInit+0x16c>)
 8000bc4:	f001 ffea 	bl	8002b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40028000 	.word	0x40028000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021800 	.word	0x40021800

08000be8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 8000bec:	4817      	ldr	r0, [pc, #92]	; (8000c4c <MX_FREERTOS_Init+0x64>)
 8000bee:	f005 fab7 	bl	8006160 <osMutexNew>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <MX_FREERTOS_Init+0x68>)
 8000bf6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000bf8:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <MX_FREERTOS_Init+0x6c>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4816      	ldr	r0, [pc, #88]	; (8000c58 <MX_FREERTOS_Init+0x70>)
 8000bfe:	f005 f9db 	bl	8005fb8 <osThreadNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a15      	ldr	r2, [pc, #84]	; (8000c5c <MX_FREERTOS_Init+0x74>)
 8000c06:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000c08:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_FREERTOS_Init+0x78>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4815      	ldr	r0, [pc, #84]	; (8000c64 <MX_FREERTOS_Init+0x7c>)
 8000c0e:	f005 f9d3 	bl	8005fb8 <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <MX_FREERTOS_Init+0x80>)
 8000c16:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <MX_FREERTOS_Init+0x84>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4814      	ldr	r0, [pc, #80]	; (8000c70 <MX_FREERTOS_Init+0x88>)
 8000c1e:	f005 f9cb 	bl	8005fb8 <osThreadNew>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <MX_FREERTOS_Init+0x8c>)
 8000c26:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_FREERTOS_Init+0x90>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4813      	ldr	r0, [pc, #76]	; (8000c7c <MX_FREERTOS_Init+0x94>)
 8000c2e:	f005 f9c3 	bl	8005fb8 <osThreadNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_FREERTOS_Init+0x98>)
 8000c36:	6013      	str	r3, [r2, #0]

  /* creation of Task05 */
  Task05Handle = osThreadNew(StartTask05, NULL, &Task05_attributes);
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_FREERTOS_Init+0x9c>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_FREERTOS_Init+0xa0>)
 8000c3e:	f005 f9bb 	bl	8005fb8 <osThreadNew>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <MX_FREERTOS_Init+0xa4>)
 8000c46:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	0800bc74 	.word	0x0800bc74
 8000c50:	20000448 	.word	0x20000448
 8000c54:	0800bbc0 	.word	0x0800bbc0
 8000c58:	08000c91 	.word	0x08000c91
 8000c5c:	20000434 	.word	0x20000434
 8000c60:	0800bbe4 	.word	0x0800bbe4
 8000c64:	08000ccd 	.word	0x08000ccd
 8000c68:	20000438 	.word	0x20000438
 8000c6c:	0800bc08 	.word	0x0800bc08
 8000c70:	08000d01 	.word	0x08000d01
 8000c74:	2000043c 	.word	0x2000043c
 8000c78:	0800bc2c 	.word	0x0800bc2c
 8000c7c:	08000d39 	.word	0x08000d39
 8000c80:	20000440 	.word	0x20000440
 8000c84:	0800bc50 	.word	0x0800bc50
 8000c88:	08000d49 	.word	0x08000d49
 8000c8c:	20000444 	.word	0x20000444

08000c90 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  {
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
//    osDelay(5);
//    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
//    osDelay(5);
	  latitude_gps = gps.latitude;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <StartTask01+0x30>)
 8000c9a:	ed93 7b00 	vldr	d7, [r3]
 8000c9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <StartTask01+0x34>)
 8000ca4:	edc3 7a00 	vstr	s15, [r3]
	  longitude_gps = gps.longitude;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <StartTask01+0x30>)
 8000caa:	ed93 7b02 	vldr	d7, [r3, #8]
 8000cae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <StartTask01+0x38>)
 8000cb4:	edc3 7a00 	vstr	s15, [r3]
    osDelay(1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f005 fa23 	bl	8006104 <osDelay>
	  latitude_gps = gps.latitude;
 8000cbe:	e7eb      	b.n	8000c98 <StartTask01+0x8>
 8000cc0:	20000450 	.word	0x20000450
 8000cc4:	20000584 	.word	0x20000584
 8000cc8:	20000588 	.word	0x20000588

08000ccc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <StartTask02+0x30>)
 8000cda:	f002 f90b 	bl	8002ef4 <HAL_GPIO_WritePin>
	      osDelay(20);
 8000cde:	2014      	movs	r0, #20
 8000ce0:	f005 fa10 	bl	8006104 <osDelay>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <StartTask02+0x30>)
 8000cea:	f002 f903 	bl	8002ef4 <HAL_GPIO_WritePin>
	      osDelay(20);
 8000cee:	2014      	movs	r0, #20
 8000cf0:	f005 fa08 	bl	8006104 <osDelay>
    osDelay(1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f005 fa05 	bl	8006104 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cfa:	e7eb      	b.n	8000cd4 <StartTask02+0x8>
 8000cfc:	40020400 	.word	0x40020400

08000d00 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <StartTask03+0x34>)
 8000d10:	f002 f8f0 	bl	8002ef4 <HAL_GPIO_WritePin>
	      osDelay(140);
 8000d14:	208c      	movs	r0, #140	; 0x8c
 8000d16:	f005 f9f5 	bl	8006104 <osDelay>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <StartTask03+0x34>)
 8000d22:	f002 f8e7 	bl	8002ef4 <HAL_GPIO_WritePin>
	      osDelay(140);
 8000d26:	208c      	movs	r0, #140	; 0x8c
 8000d28:	f005 f9ec 	bl	8006104 <osDelay>
    osDelay(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f005 f9e9 	bl	8006104 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000d32:	e7e9      	b.n	8000d08 <StartTask03+0x8>
 8000d34:	40020400 	.word	0x40020400

08000d38 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f005 f9df 	bl	8006104 <osDelay>
 8000d46:	e7fb      	b.n	8000d40 <StartTask04+0x8>

08000d48 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f005 f9d7 	bl	8006104 <osDelay>
 8000d56:	e7fb      	b.n	8000d50 <StartTask05+0x8>

08000d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a40      	ldr	r2, [pc, #256]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a3a      	ldr	r2, [pc, #232]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a34      	ldr	r2, [pc, #208]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a28      	ldr	r2, [pc, #160]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <MX_GPIO_Init+0x134>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e04:	4822      	ldr	r0, [pc, #136]	; (8000e90 <MX_GPIO_Init+0x138>)
 8000e06:	f002 f875 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	4821      	ldr	r0, [pc, #132]	; (8000e94 <MX_GPIO_Init+0x13c>)
 8000e10:	f002 f870 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481b      	ldr	r0, [pc, #108]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000e2c:	f001 feb6 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e30:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	4811      	ldr	r0, [pc, #68]	; (8000e90 <MX_GPIO_Init+0x138>)
 8000e4a:	f001 fea7 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e4e:	2340      	movs	r3, #64	; 0x40
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <MX_GPIO_Init+0x13c>)
 8000e66:	f001 fe99 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_GPIO_Init+0x13c>)
 8000e7e:	f001 fe8d 	bl	8002b9c <HAL_GPIO_Init>

}
 8000e82:	bf00      	nop
 8000e84:	3730      	adds	r7, #48	; 0x30
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40020800 	.word	0x40020800

08000e9c <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d106      	bne.n	8000ebe <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3371      	adds	r3, #113	; 0x71
 8000eb4:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000eb6:	e002      	b.n	8000ebe <prv_parse_number+0x22>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <prv_parse_number+0x30>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b20      	cmp	r3, #32
 8000eca:	d0f5      	beq.n	8000eb8 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b2d      	cmp	r3, #45	; 0x2d
 8000ed2:	d104      	bne.n	8000ede <prv_parse_number+0x42>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <prv_parse_number+0x44>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000ee2:	e00d      	b.n	8000f00 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	461a      	mov	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3b30      	subs	r3, #48	; 0x30
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <prv_parse_number+0x7a>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f0c:	d903      	bls.n	8000f16 <prv_parse_number+0x7a>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b39      	cmp	r3, #57	; 0x39
 8000f14:	d9e6      	bls.n	8000ee4 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000f16:	7afb      	ldrb	r3, [r7, #11]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <prv_parse_number+0x86>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	425b      	negs	r3, r3
 8000f20:	e000      	b.n	8000f24 <prv_parse_number+0x88>
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d106      	bne.n	8000f4e <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3371      	adds	r3, #113	; 0x71
 8000f44:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000f46:	e002      	b.n	8000f4e <prv_parse_float_number+0x1e>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <prv_parse_float_number+0x2c>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b20      	cmp	r3, #32
 8000f5a:	d0f5      	beq.n	8000f48 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f008 ff4c 	bl	8009dfc <strtod>
 8000f64:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8000f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f6c:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f70:	eeb0 0b47 	vmov.f64	d0, d7
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	0000      	movs	r0, r0
 8000f7c:	0000      	movs	r0, r0
	...

08000f80 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8000f88:	2100      	movs	r1, #0
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffd0 	bl	8000f30 <prv_parse_float_number>
 8000f90:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8000f94:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f98:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f9c:	ee17 1a90 	vmov	r1, s15
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <prv_parse_lat_long+0x90>)
 8000fa2:	fb83 2301 	smull	r2, r3, r3, r1
 8000fa6:	115a      	asrs	r2, r3, #5
 8000fa8:	17cb      	asrs	r3, r1, #31
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fb4:	ed87 7b04 	vstr	d7, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8000fb8:	ed97 7b04 	vldr	d7, [r7, #16]
 8000fbc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001000 <prv_parse_lat_long+0x80>
 8000fc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fc4:	ed97 6b06 	vldr	d6, [r7, #24]
 8000fc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fcc:	ed87 7b02 	vstr	d7, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8000fd0:	ed97 6b02 	vldr	d6, [r7, #8]
 8000fd4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001008 <prv_parse_lat_long+0x88>
 8000fd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fdc:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fe0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fe4:	ed87 7b06 	vstr	d7, [r7, #24]

    return ll;
 8000fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fec:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	00000000 	.word	0x00000000
 8001004:	40590000 	.word	0x40590000
 8001008:	00000000 	.word	0x00000000
 800100c:	404e0000 	.word	0x404e0000
 8001010:	51eb851f 	.word	0x51eb851f

08001014 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001022:	2b00      	cmp	r3, #0
 8001024:	d169      	bne.n	80010fa <prv_parse_term+0xe6>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3371      	adds	r3, #113	; 0x71
 800102a:	2206      	movs	r2, #6
 800102c:	49bf      	ldr	r1, [pc, #764]	; (800132c <prv_parse_term+0x318>)
 800102e:	4618      	mov	r0, r3
 8001030:	f008 f8ff 	bl	8009232 <strncmp>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <prv_parse_term+0x3a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3371      	adds	r3, #113	; 0x71
 800103e:	2206      	movs	r2, #6
 8001040:	49bb      	ldr	r1, [pc, #748]	; (8001330 <prv_parse_term+0x31c>)
 8001042:	4618      	mov	r0, r3
 8001044:	f008 f8f5 	bl	8009232 <strncmp>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d104      	bne.n	8001058 <prv_parse_term+0x44>
            gh->p.stat = STAT_GGA;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001056:	e04e      	b.n	80010f6 <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3371      	adds	r3, #113	; 0x71
 800105c:	2206      	movs	r2, #6
 800105e:	49b5      	ldr	r1, [pc, #724]	; (8001334 <prv_parse_term+0x320>)
 8001060:	4618      	mov	r0, r3
 8001062:	f008 f8e6 	bl	8009232 <strncmp>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d009      	beq.n	8001080 <prv_parse_term+0x6c>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3371      	adds	r3, #113	; 0x71
 8001070:	2206      	movs	r2, #6
 8001072:	49b1      	ldr	r1, [pc, #708]	; (8001338 <prv_parse_term+0x324>)
 8001074:	4618      	mov	r0, r3
 8001076:	f008 f8dc 	bl	8009232 <strncmp>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d104      	bne.n	800108a <prv_parse_term+0x76>
            gh->p.stat = STAT_GSA;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2202      	movs	r2, #2
 8001084:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001088:	e035      	b.n	80010f6 <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3371      	adds	r3, #113	; 0x71
 800108e:	2206      	movs	r2, #6
 8001090:	49aa      	ldr	r1, [pc, #680]	; (800133c <prv_parse_term+0x328>)
 8001092:	4618      	mov	r0, r3
 8001094:	f008 f8cd 	bl	8009232 <strncmp>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d009      	beq.n	80010b2 <prv_parse_term+0x9e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3371      	adds	r3, #113	; 0x71
 80010a2:	2206      	movs	r2, #6
 80010a4:	49a6      	ldr	r1, [pc, #664]	; (8001340 <prv_parse_term+0x32c>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 f8c3 	bl	8009232 <strncmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d104      	bne.n	80010bc <prv_parse_term+0xa8>
            gh->p.stat = STAT_GSV;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2203      	movs	r2, #3
 80010b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80010ba:	e01c      	b.n	80010f6 <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3371      	adds	r3, #113	; 0x71
 80010c0:	2206      	movs	r2, #6
 80010c2:	49a0      	ldr	r1, [pc, #640]	; (8001344 <prv_parse_term+0x330>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 f8b4 	bl	8009232 <strncmp>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <prv_parse_term+0xd0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3371      	adds	r3, #113	; 0x71
 80010d4:	2206      	movs	r2, #6
 80010d6:	499c      	ldr	r1, [pc, #624]	; (8001348 <prv_parse_term+0x334>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f008 f8aa 	bl	8009232 <strncmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d104      	bne.n	80010ee <prv_parse_term+0xda>
            gh->p.stat = STAT_RMC;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2204      	movs	r2, #4
 80010e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80010ec:	e003      	b.n	80010f6 <prv_parse_term+0xe2>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e21d      	b.n	8001536 <prv_parse_term+0x522>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 8217 	beq.w	8001534 <prv_parse_term+0x520>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800110c:	2b01      	cmp	r3, #1
 800110e:	f040 80c0 	bne.w	8001292 <prv_parse_term+0x27e>
        switch (gh->p.term_num) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001118:	3b01      	subs	r3, #1
 800111a:	2b0a      	cmp	r3, #10
 800111c:	f200 81fd 	bhi.w	800151a <prv_parse_term+0x506>
 8001120:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <prv_parse_term+0x114>)
 8001122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001126:	bf00      	nop
 8001128:	08001155 	.word	0x08001155
 800112c:	080011cf 	.word	0x080011cf
 8001130:	080011e1 	.word	0x080011e1
 8001134:	08001209 	.word	0x08001209
 8001138:	0800121b 	.word	0x0800121b
 800113c:	08001243 	.word	0x08001243
 8001140:	08001257 	.word	0x08001257
 8001144:	0800151b 	.word	0x0800151b
 8001148:	0800126b 	.word	0x0800126b
 800114c:	0800151b 	.word	0x0800151b
 8001150:	0800127f 	.word	0x0800127f
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800115a:	3b30      	subs	r3, #48	; 0x30
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b2da      	uxtb	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800116e:	4413      	add	r3, r2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3b30      	subs	r3, #48	; 0x30
 8001174:	b2da      	uxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001182:	3b30      	subs	r3, #48	; 0x30
 8001184:	b2db      	uxtb	r3, r3
 8001186:	461a      	mov	r2, r3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4413      	add	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001196:	4413      	add	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3b30      	subs	r3, #48	; 0x30
 800119c:	b2da      	uxtb	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80011aa:	3b30      	subs	r3, #48	; 0x30
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80011be:	4413      	add	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	3b30      	subs	r3, #48	; 0x30
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80011cc:	e1b2      	b.n	8001534 <prv_parse_term+0x520>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fed6 	bl	8000f80 <prv_parse_lat_long>
 80011d4:	eeb0 7b40 	vmov.f64	d7, d0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80011de:	e1a9      	b.n	8001534 <prv_parse_term+0x520>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011e6:	2b53      	cmp	r3, #83	; 0x53
 80011e8:	d005      	beq.n	80011f6 <prv_parse_term+0x1e2>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011f0:	2b73      	cmp	r3, #115	; 0x73
 80011f2:	f040 8194 	bne.w	800151e <prv_parse_term+0x50a>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80011fc:	eeb1 7b47 	vneg.f64	d7, d7
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                }
                break;
 8001206:	e18a      	b.n	800151e <prv_parse_term+0x50a>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff feb9 	bl	8000f80 <prv_parse_lat_long>
 800120e:	eeb0 7b40 	vmov.f64	d7, d0
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001218:	e18c      	b.n	8001534 <prv_parse_term+0x520>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001220:	2b57      	cmp	r3, #87	; 0x57
 8001222:	d005      	beq.n	8001230 <prv_parse_term+0x21c>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800122a:	2b77      	cmp	r3, #119	; 0x77
 800122c:	f040 8179 	bne.w	8001522 <prv_parse_term+0x50e>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8001236:	eeb1 7b47 	vneg.f64	d7, d7
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                }
                break;
 8001240:	e16f      	b.n	8001522 <prv_parse_term+0x50e>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8001242:	2100      	movs	r1, #0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fe29 	bl	8000e9c <prv_parse_number>
 800124a:	4603      	mov	r3, r0
 800124c:	b2da      	uxtb	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8001254:	e16e      	b.n	8001534 <prv_parse_term+0x520>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8001256:	2100      	movs	r1, #0
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fe1f 	bl	8000e9c <prv_parse_number>
 800125e:	4603      	mov	r3, r0
 8001260:	b2da      	uxtb	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001268:	e164      	b.n	8001534 <prv_parse_term+0x520>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800126a:	2100      	movs	r1, #0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fe5f 	bl	8000f30 <prv_parse_float_number>
 8001272:	eeb0 7b40 	vmov.f64	d7, d0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800127c:	e15a      	b.n	8001534 <prv_parse_term+0x520>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800127e:	2100      	movs	r1, #0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fe55 	bl	8000f30 <prv_parse_float_number>
 8001286:	eeb0 7b40 	vmov.f64	d7, d0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001290:	e150      	b.n	8001534 <prv_parse_term+0x520>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001298:	2b02      	cmp	r3, #2
 800129a:	d17d      	bne.n	8001398 <prv_parse_term+0x384>
        switch (gh->p.term_num) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80012a2:	3b02      	subs	r3, #2
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d85b      	bhi.n	8001360 <prv_parse_term+0x34c>
 80012a8:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <prv_parse_term+0x29c>)
 80012aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ae:	bf00      	nop
 80012b0:	080012f1 	.word	0x080012f1
 80012b4:	08001361 	.word	0x08001361
 80012b8:	08001361 	.word	0x08001361
 80012bc:	08001361 	.word	0x08001361
 80012c0:	08001361 	.word	0x08001361
 80012c4:	08001361 	.word	0x08001361
 80012c8:	08001361 	.word	0x08001361
 80012cc:	08001361 	.word	0x08001361
 80012d0:	08001361 	.word	0x08001361
 80012d4:	08001361 	.word	0x08001361
 80012d8:	08001361 	.word	0x08001361
 80012dc:	08001361 	.word	0x08001361
 80012e0:	08001361 	.word	0x08001361
 80012e4:	08001305 	.word	0x08001305
 80012e8:	08001319 	.word	0x08001319
 80012ec:	0800134d 	.word	0x0800134d
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80012f0:	2100      	movs	r1, #0
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fdd2 	bl	8000e9c <prv_parse_number>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8001302:	e117      	b.n	8001534 <prv_parse_term+0x520>
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8001304:	2100      	movs	r1, #0
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fe12 	bl	8000f30 <prv_parse_float_number>
 800130c:	eeb0 7b40 	vmov.f64	d7, d0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001316:	e10d      	b.n	8001534 <prv_parse_term+0x520>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8001318:	2100      	movs	r1, #0
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fe08 	bl	8000f30 <prv_parse_float_number>
 8001320:	eeb0 7b40 	vmov.f64	d7, d0
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800132a:	e103      	b.n	8001534 <prv_parse_term+0x520>
 800132c:	0800bb68 	.word	0x0800bb68
 8001330:	0800bb70 	.word	0x0800bb70
 8001334:	0800bb78 	.word	0x0800bb78
 8001338:	0800bb80 	.word	0x0800bb80
 800133c:	0800bb88 	.word	0x0800bb88
 8001340:	0800bb90 	.word	0x0800bb90
 8001344:	0800bb98 	.word	0x0800bb98
 8001348:	0800bba0 	.word	0x0800bba0
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 800134c:	2100      	movs	r1, #0
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fdee 	bl	8000f30 <prv_parse_float_number>
 8001354:	eeb0 7b40 	vmov.f64	d7, d0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800135e:	e0e9      	b.n	8001534 <prv_parse_term+0x520>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001366:	2b02      	cmp	r3, #2
 8001368:	f240 80dd 	bls.w	8001526 <prv_parse_term+0x512>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001372:	2b0e      	cmp	r3, #14
 8001374:	f200 80d7 	bhi.w	8001526 <prv_parse_term+0x512>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001378:	2100      	movs	r1, #0
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fd8e 	bl	8000e9c <prv_parse_number>
 8001380:	4602      	mov	r2, r0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001388:	3b03      	subs	r3, #3
 800138a:	b2d1      	uxtb	r1, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	460a      	mov	r2, r1
 8001392:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001396:	e0c6      	b.n	8001526 <prv_parse_term+0x512>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d11b      	bne.n	80013da <prv_parse_term+0x3c6>
        switch (gh->p.term_num) {
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d002      	beq.n	80013b2 <prv_parse_term+0x39e>
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d00a      	beq.n	80013c6 <prv_parse_term+0x3b2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80013b0:	e0c0      	b.n	8001534 <prv_parse_term+0x520>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80013b2:	2100      	movs	r1, #0
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fd71 	bl	8000e9c <prv_parse_number>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80013c4:	e0b6      	b.n	8001534 <prv_parse_term+0x520>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80013c6:	2100      	movs	r1, #0
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fd67 	bl	8000e9c <prv_parse_number>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80013d8:	e0ac      	b.n	8001534 <prv_parse_term+0x520>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	f040 80a2 	bne.w	800152a <prv_parse_term+0x516>
        switch (gh->p.term_num) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80013ec:	3b02      	subs	r3, #2
 80013ee:	2b09      	cmp	r3, #9
 80013f0:	f200 809d 	bhi.w	800152e <prv_parse_term+0x51a>
 80013f4:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <prv_parse_term+0x3e8>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	08001425 	.word	0x08001425
 8001400:	0800152f 	.word	0x0800152f
 8001404:	0800152f 	.word	0x0800152f
 8001408:	0800152f 	.word	0x0800152f
 800140c:	0800152f 	.word	0x0800152f
 8001410:	0800143f 	.word	0x0800143f
 8001414:	08001453 	.word	0x08001453
 8001418:	08001467 	.word	0x08001467
 800141c:	080014e1 	.word	0x080014e1
 8001420:	080014f5 	.word	0x080014f5
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800142a:	2b41      	cmp	r3, #65	; 0x41
 800142c:	bf0c      	ite	eq
 800142e:	2301      	moveq	r3, #1
 8001430:	2300      	movne	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 800143c:	e07a      	b.n	8001534 <prv_parse_term+0x520>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800143e:	2100      	movs	r1, #0
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fd75 	bl	8000f30 <prv_parse_float_number>
 8001446:	eeb0 7b40 	vmov.f64	d7, d0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001450:	e070      	b.n	8001534 <prv_parse_term+0x520>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8001452:	2100      	movs	r1, #0
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fd6b 	bl	8000f30 <prv_parse_float_number>
 800145a:	eeb0 7b40 	vmov.f64	d7, d0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001464:	e066      	b.n	8001534 <prv_parse_term+0x520>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800146c:	3b30      	subs	r3, #48	; 0x30
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4413      	add	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001480:	4413      	add	r3, r2
 8001482:	b2db      	uxtb	r3, r3
 8001484:	3b30      	subs	r3, #48	; 0x30
 8001486:	b2da      	uxtb	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001494:	3b30      	subs	r3, #48	; 0x30
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4413      	add	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80014a8:	4413      	add	r3, r2
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	3b30      	subs	r3, #48	; 0x30
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80014bc:	3b30      	subs	r3, #48	; 0x30
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80014d0:	4413      	add	r3, r2
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	3b30      	subs	r3, #48	; 0x30
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80014de:	e029      	b.n	8001534 <prv_parse_term+0x520>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80014e0:	2100      	movs	r1, #0
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fd24 	bl	8000f30 <prv_parse_float_number>
 80014e8:	eeb0 7b40 	vmov.f64	d7, d0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80014f2:	e01f      	b.n	8001534 <prv_parse_term+0x520>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014fa:	2b57      	cmp	r3, #87	; 0x57
 80014fc:	d004      	beq.n	8001508 <prv_parse_term+0x4f4>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001504:	2b77      	cmp	r3, #119	; 0x77
 8001506:	d114      	bne.n	8001532 <prv_parse_term+0x51e>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800150e:	eeb1 7b47 	vneg.f64	d7, d7
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                }
                break;
 8001518:	e00b      	b.n	8001532 <prv_parse_term+0x51e>
                break;
 800151a:	bf00      	nop
 800151c:	e00a      	b.n	8001534 <prv_parse_term+0x520>
                break;
 800151e:	bf00      	nop
 8001520:	e008      	b.n	8001534 <prv_parse_term+0x520>
                break;
 8001522:	bf00      	nop
 8001524:	e006      	b.n	8001534 <prv_parse_term+0x520>
                break;
 8001526:	bf00      	nop
 8001528:	e004      	b.n	8001534 <prv_parse_term+0x520>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 800152a:	bf00      	nop
 800152c:	e002      	b.n	8001534 <prv_parse_term+0x520>
                break;
 800152e:	bf00      	nop
 8001530:	e000      	b.n	8001534 <prv_parse_term+0x520>
                break;
 8001532:	bf00      	nop
    return 1;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop

08001540 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800154e:	2b2f      	cmp	r3, #47	; 0x2f
 8001550:	d90d      	bls.n	800156e <prv_check_crc+0x2e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001558:	2b39      	cmp	r3, #57	; 0x39
 800155a:	d808      	bhi.n	800156e <prv_check_crc+0x2e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001562:	3b30      	subs	r3, #48	; 0x30
 8001564:	b2db      	uxtb	r3, r3
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	b2db      	uxtb	r3, r3
 800156a:	b25a      	sxtb	r2, r3
 800156c:	e026      	b.n	80015bc <prv_check_crc+0x7c>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001574:	2b60      	cmp	r3, #96	; 0x60
 8001576:	d90d      	bls.n	8001594 <prv_check_crc+0x54>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800157e:	2b7a      	cmp	r3, #122	; 0x7a
 8001580:	d808      	bhi.n	8001594 <prv_check_crc+0x54>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001588:	3b57      	subs	r3, #87	; 0x57
 800158a:	b2db      	uxtb	r3, r3
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	b25a      	sxtb	r2, r3
 8001592:	e013      	b.n	80015bc <prv_check_crc+0x7c>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800159a:	2b40      	cmp	r3, #64	; 0x40
 800159c:	d90d      	bls.n	80015ba <prv_check_crc+0x7a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80015a4:	2b5a      	cmp	r3, #90	; 0x5a
 80015a6:	d808      	bhi.n	80015ba <prv_check_crc+0x7a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80015ae:	3b37      	subs	r3, #55	; 0x37
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	b25a      	sxtb	r2, r3
 80015b8:	e000      	b.n	80015bc <prv_check_crc+0x7c>
 80015ba:	2200      	movs	r2, #0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015c2:	2b2f      	cmp	r3, #47	; 0x2f
 80015c4:	d90c      	bls.n	80015e0 <prv_check_crc+0xa0>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015cc:	2b39      	cmp	r3, #57	; 0x39
 80015ce:	d807      	bhi.n	80015e0 <prv_check_crc+0xa0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	e028      	b.n	8001632 <prv_check_crc+0xf2>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015e6:	2b60      	cmp	r3, #96	; 0x60
 80015e8:	d90e      	bls.n	8001608 <prv_check_crc+0xc8>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015f0:	2b7a      	cmp	r3, #122	; 0x7a
 80015f2:	d809      	bhi.n	8001608 <prv_check_crc+0xc8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80015fa:	3b57      	subs	r3, #87	; 0x57
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	b25b      	sxtb	r3, r3
 8001606:	e014      	b.n	8001632 <prv_check_crc+0xf2>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800160e:	2b40      	cmp	r3, #64	; 0x40
 8001610:	d90e      	bls.n	8001630 <prv_check_crc+0xf0>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001618:	2b5a      	cmp	r3, #90	; 0x5a
 800161a:	d809      	bhi.n	8001630 <prv_check_crc+0xf0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001622:	3b37      	subs	r3, #55	; 0x37
 8001624:	b2db      	uxtb	r3, r3
 8001626:	b25b      	sxtb	r3, r3
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	b25b      	sxtb	r3, r3
 800162e:	e000      	b.n	8001632 <prv_check_crc+0xf2>
 8001630:	2300      	movs	r3, #0
 8001632:	4313      	orrs	r3, r2
 8001634:	b25b      	sxtb	r3, r3
 8001636:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	429a      	cmp	r2, r3
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001664:	2b01      	cmp	r3, #1
 8001666:	d136      	bne.n	80016d6 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016d4:	e061      	b.n	800179a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d121      	bne.n	8001724 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	33a1      	adds	r3, #161	; 0xa1
 800171a:	220c      	movs	r2, #12
 800171c:	4619      	mov	r1, r3
 800171e:	f007 fc20 	bl	8008f62 <memcpy>
 8001722:	e03a      	b.n	800179a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800172a:	2b03      	cmp	r3, #3
 800172c:	d106      	bne.n	800173c <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800173a:	e02e      	b.n	800179a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001742:	2b04      	cmp	r3, #4
 8001744:	d129      	bne.n	800179a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80017ac:	22b0      	movs	r2, #176	; 0xb0
 80017ae:	2100      	movs	r1, #0
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f007 fbe4 	bl	8008f7e <memset>
    return 1;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80017d0:	e0ad      	b.n	800192e <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b24      	cmp	r3, #36	; 0x24
 80017d8:	d128      	bne.n	800182c <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3370      	adds	r3, #112	; 0x70
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f007 fbcb 	bl	8008f7e <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80017ee:	2b0b      	cmp	r3, #11
 80017f0:	f200 8097 	bhi.w	8001922 <lwgps_process+0x162>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80017fa:	4619      	mov	r1, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	440b      	add	r3, r1
 8001804:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800180e:	3301      	adds	r3, #1
 8001810:	b2da      	uxtb	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800182a:	e07a      	b.n	8001922 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b2c      	cmp	r3, #44	; 0x2c
 8001832:	d11d      	bne.n	8001870 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff fbed 	bl	8001014 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4053      	eors	r3, r2
 8001846:	b2da      	uxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001864:	3301      	adds	r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800186e:	e058      	b.n	8001922 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b2a      	cmp	r3, #42	; 0x2a
 8001876:	d117      	bne.n	80018a8 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff fbcb 	bl	8001014 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800189c:	3301      	adds	r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80018a6:	e03c      	b.n	8001922 <lwgps_process+0x162>
        } else if (*d == '\r') {
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b0d      	cmp	r3, #13
 80018ae:	d109      	bne.n	80018c4 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff fe45 	bl	8001540 <prv_check_crc>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d032      	beq.n	8001922 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff feca 	bl	8001656 <prv_copy_from_tmp_memory>
 80018c2:	e02e      	b.n	8001922 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4053      	eors	r3, r2
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018e8:	2b0b      	cmp	r3, #11
 80018ea:	d81a      	bhi.n	8001922 <lwgps_process+0x162>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018f2:	4619      	mov	r1, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f47f af4e 	bne.w	80017d2 <lwgps_process+0x12>
        }
    }
    return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	if(huart == &huart5) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_UART_RxCpltCallback+0x68>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d122      	bne.n	8001996 <HAL_UART_RxCpltCallback+0x56>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_UART_RxCpltCallback+0x6c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b0a      	cmp	r3, #10
 8001956:	d010      	beq.n	800197a <HAL_UART_RxCpltCallback+0x3a>
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_UART_RxCpltCallback+0x70>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b25b      	sxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_UART_RxCpltCallback+0x70>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	b2d1      	uxtb	r1, r2
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_UART_RxCpltCallback+0x70>)
 800196c:	7011      	strb	r1, [r2, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_UART_RxCpltCallback+0x6c>)
 8001972:	7819      	ldrb	r1, [r3, #0]
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_UART_RxCpltCallback+0x74>)
 8001976:	5499      	strb	r1, [r3, r2]
 8001978:	e00d      	b.n	8001996 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_UART_RxCpltCallback+0x70>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	461a      	mov	r2, r3
 8001982:	490c      	ldr	r1, [pc, #48]	; (80019b4 <HAL_UART_RxCpltCallback+0x74>)
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <HAL_UART_RxCpltCallback+0x78>)
 8001986:	f7ff ff1b 	bl	80017c0 <lwgps_process>
			rx_index = 0;
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_UART_RxCpltCallback+0x70>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_UART_RxCpltCallback+0x6c>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart5, &rx_data, 1);
 8001996:	2201      	movs	r2, #1
 8001998:	4904      	ldr	r1, [pc, #16]	; (80019ac <HAL_UART_RxCpltCallback+0x6c>)
 800199a:	4803      	ldr	r0, [pc, #12]	; (80019a8 <HAL_UART_RxCpltCallback+0x68>)
 800199c:	f002 fd66 	bl	800446c <HAL_UART_Receive_IT>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000590 	.word	0x20000590
 80019ac:	20000581 	.word	0x20000581
 80019b0:	20000580 	.word	0x20000580
 80019b4:	20000500 	.word	0x20000500
 80019b8:	20000450 	.word	0x20000450

080019bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c0:	f000 fba1 	bl	8002106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f820 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f7ff f9c6 	bl	8000d58 <MX_GPIO_Init>
  MX_ETH_Init();
 80019cc:	f7ff f806 	bl	80009dc <MX_ETH_Init>
  MX_UART5_Init();
 80019d0:	f000 f9ba 	bl	8001d48 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80019d4:	f000 f9e8 	bl	8001da8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019d8:	f000 fac4 	bl	8001f64 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  lwgps_init(&gps);
 80019dc:	4807      	ldr	r0, [pc, #28]	; (80019fc <main+0x40>)
 80019de:	f7ff fee1 	bl	80017a4 <lwgps_init>
  HAL_UART_Receive_IT(&huart5, &rx_data, 1);
 80019e2:	2201      	movs	r2, #1
 80019e4:	4906      	ldr	r1, [pc, #24]	; (8001a00 <main+0x44>)
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <main+0x48>)
 80019e8:	f002 fd40 	bl	800446c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80019ec:	f004 fa7a 	bl	8005ee4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80019f0:	f7ff f8fa 	bl	8000be8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019f4:	f004 faaa 	bl	8005f4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <main+0x3c>
 80019fa:	bf00      	nop
 80019fc:	20000450 	.word	0x20000450
 8001a00:	20000581 	.word	0x20000581
 8001a04:	20000590 	.word	0x20000590

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	; 0x50
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	2234      	movs	r2, #52	; 0x34
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f007 fab1 	bl	8008f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a2c:	f001 fbc4 	bl	80031b8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	4b24      	ldr	r3, [pc, #144]	; (8001adc <SystemClock_Config+0xd4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a50:	4a22      	ldr	r2, [pc, #136]	; (8001adc <SystemClock_Config+0xd4>)
 8001a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <SystemClock_Config+0xd4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a7c:	23a8      	movs	r3, #168	; 0xa8
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a84:	2307      	movs	r3, #7
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fba1 	bl	80031d8 <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a9c:	f000 f820 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ab0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	2105      	movs	r1, #5
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 fe38 	bl	8003734 <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aca:	f000 f809 	bl	8001ae0 <Error_Handler>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3750      	adds	r7, #80	; 0x50
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>
	...

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_MspInit+0x4c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_MspInit+0x4c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	210f      	movs	r1, #15
 8001b26:	f06f 0001 	mvn.w	r0, #1
 8001b2a:	f000 fc48 	bl	80023be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 fb08 	bl	8002180 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b70:	f006 f878 	bl	8007c64 <xTaskGetSchedulerState>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d001      	beq.n	8001b7e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b7a:	f006 fe55 	bl	8008828 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <UART5_IRQHandler+0x10>)
 8001b8a:	f002 fcb3 	bl	80044f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000590 	.word	0x20000590

08001b98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return 1;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_kill>:

int _kill(int pid, int sig)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bb2:	f007 f8b3 	bl	8008d1c <__errno>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2216      	movs	r2, #22
 8001bba:	601a      	str	r2, [r3, #0]
  return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_exit>:

void _exit (int status)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ffe7 	bl	8001ba8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bda:	e7fe      	b.n	8001bda <_exit+0x12>

08001bdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e00a      	b.n	8001c04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bee:	f3af 8000 	nop.w
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	b2ca      	uxtb	r2, r1
 8001bfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dbf0      	blt.n	8001bee <_read+0x12>
  }

  return len;
 8001c0c:	687b      	ldr	r3, [r7, #4]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e009      	b.n	8001c3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	60ba      	str	r2, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf1      	blt.n	8001c28 <_write+0x12>
  }
  return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_close>:

int _close(int file)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c76:	605a      	str	r2, [r3, #4]
  return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_isatty>:

int _isatty(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce8:	f007 f818 	bl	8008d1c <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	220c      	movs	r2, #12
 8001cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <_sbrk+0x64>)
 8001d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20080000 	.word	0x20080000
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	2000058c 	.word	0x2000058c
 8001d20:	200055c8 	.word	0x200055c8

08001d24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <SystemInit+0x20>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <SystemInit+0x20>)
 8001d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d4e:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <MX_UART5_Init+0x5c>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_UART5_Init+0x58>)
 8001d8c:	f002 fb20 	bl	80043d0 <HAL_UART_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d96:	f7ff fea3 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000590 	.word	0x20000590
 8001da4:	40005000 	.word	0x40005000

08001da8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <MX_USART3_UART_Init+0x5c>)
 8001db0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_USART3_UART_Init+0x58>)
 8001dec:	f002 faf0 	bl	80043d0 <HAL_UART_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001df6:	f7ff fe73 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000618 	.word	0x20000618
 8001e04:	40004800 	.word	0x40004800

08001e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0b0      	sub	sp, #192	; 0xc0
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	2290      	movs	r2, #144	; 0x90
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f007 f8a8 	bl	8008f7e <memset>
  if(uartHandle->Instance==UART5)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a47      	ldr	r2, [pc, #284]	; (8001f50 <HAL_UART_MspInit+0x148>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d145      	bne.n	8001ec4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 fe9a 	bl	8003b80 <HAL_RCCEx_PeriphCLKConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e52:	f7ff fe45 	bl	8001ae0 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e56:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a3e      	ldr	r2, [pc, #248]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a38      	ldr	r2, [pc, #224]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eaa:	4619      	mov	r1, r3
 8001eac:	482a      	ldr	r0, [pc, #168]	; (8001f58 <HAL_UART_MspInit+0x150>)
 8001eae:	f000 fe75 	bl	8002b9c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	2035      	movs	r0, #53	; 0x35
 8001eb8:	f000 fa81 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ebc:	2035      	movs	r0, #53	; 0x35
 8001ebe:	f000 fa9a 	bl	80023f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ec2:	e041      	b.n	8001f48 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <HAL_UART_MspInit+0x154>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d13c      	bne.n	8001f48 <HAL_UART_MspInit+0x140>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 fe4f 	bl	8003b80 <HAL_RCCEx_PeriphCLKConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001ee8:	f7ff fdfa 	bl	8001ae0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_UART_MspInit+0x14c>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f36:	2307      	movs	r3, #7
 8001f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f40:	4619      	mov	r1, r3
 8001f42:	4807      	ldr	r0, [pc, #28]	; (8001f60 <HAL_UART_MspInit+0x158>)
 8001f44:	f000 fe2a 	bl	8002b9c <HAL_GPIO_Init>
}
 8001f48:	bf00      	nop
 8001f4a:	37c0      	adds	r7, #192	; 0xc0
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40005000 	.word	0x40005000
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40004800 	.word	0x40004800
 8001f60:	40020c00 	.word	0x40020c00

08001f64 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f72:	2206      	movs	r2, #6
 8001f74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f84:	2202      	movs	r2, #2
 8001f86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa8:	f000 ffbd 	bl	8002f26 <HAL_PCD_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001fb2:	f7ff fd95 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200006a0 	.word	0x200006a0

08001fc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0ae      	sub	sp, #184	; 0xb8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2290      	movs	r2, #144	; 0x90
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f006 ffcc 	bl	8008f7e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fee:	d159      	bne.n	80020a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ff4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4618      	mov	r0, r3
 8002002:	f001 fdbd 	bl	8003b80 <HAL_RCCEx_PeriphCLKConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800200c:	f7ff fd68 	bl	8001ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6313      	str	r3, [r2, #48]	; 0x30
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_PCD_MspInit+0xec>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002028:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800202c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002042:	230a      	movs	r3, #10
 8002044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800204c:	4619      	mov	r1, r3
 800204e:	4818      	ldr	r0, [pc, #96]	; (80020b0 <HAL_PCD_MspInit+0xf0>)
 8002050:	f000 fda4 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800206c:	4619      	mov	r1, r3
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <HAL_PCD_MspInit+0xf0>)
 8002070:	f000 fd94 	bl	8002b9c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <HAL_PCD_MspInit+0xec>)
 800207a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207e:	6353      	str	r3, [r2, #52]	; 0x34
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <HAL_PCD_MspInit+0xec>)
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002096:	6453      	str	r3, [r2, #68]	; 0x44
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <HAL_PCD_MspInit+0xec>)
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80020a4:	bf00      	nop
 80020a6:	37b8      	adds	r7, #184	; 0xb8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020000 	.word	0x40020000

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b8:	480d      	ldr	r0, [pc, #52]	; (80020f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ba:	490e      	ldr	r1, [pc, #56]	; (80020f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020bc:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d0:	4c0b      	ldr	r4, [pc, #44]	; (8002100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020de:	f7ff fe21 	bl	8001d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f006 ff17 	bl	8008f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff fc69 	bl	80019bc <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020ec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80020f8:	0800c0dc 	.word	0x0800c0dc
  ldr r2, =_sbss
 80020fc:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8002100:	200055c4 	.word	0x200055c4

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>

08002106 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210a:	2003      	movs	r0, #3
 800210c:	f000 f94c 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002110:	200f      	movs	r0, #15
 8002112:	f000 f805 	bl	8002120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002116:	f7ff fce9 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_InitTick+0x54>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_InitTick+0x58>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002136:	fbb3 f3f1 	udiv	r3, r3, r1
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f967 	bl	8002412 <HAL_SYSTICK_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e00e      	b.n	800216c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d80a      	bhi.n	800216a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f000 f92f 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <HAL_InitTick+0x5c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000000 	.word	0x20000000
 8002178:	20000008 	.word	0x20000008
 800217c:	20000004 	.word	0x20000004

08002180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x20>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x24>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_IncTick+0x24>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000008 	.word	0x20000008
 80021a4:	20000ba8 	.word	0x20000ba8

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000ba8 	.word	0x20000ba8

080021c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff ffee 	bl	80021a8 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d005      	beq.n	80021e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_Delay+0x44>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021e6:	bf00      	nop
 80021e8:	f7ff ffde 	bl	80021a8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d8f7      	bhi.n	80021e8 <HAL_Delay+0x28>
  {
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <__NVIC_SetPriorityGrouping+0x40>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	4313      	orrs	r3, r2
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x40>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00
 800224c:	05fa0000 	.word	0x05fa0000

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff29 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff3e 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5d 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff31 	bl	800226c <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff feb6 	bl	80021a8 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d008      	beq.n	800245c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e052      	b.n	8002502 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0216 	bic.w	r2, r2, #22
 800246a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <HAL_DMA_Abort+0x62>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0208 	bic.w	r2, r2, #8
 800249a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ac:	e013      	b.n	80024d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ae:	f7ff fe7b 	bl	80021a8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d90c      	bls.n	80024d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e015      	b.n	8002502 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1e4      	bne.n	80024ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	223f      	movs	r2, #63	; 0x3f
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d004      	beq.n	8002528 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e00c      	b.n	8002542 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2205      	movs	r2, #5
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06a      	b.n	8002638 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2223      	movs	r2, #35	; 0x23
 8002570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe fa7f 	bl	8000a78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_ETH_Init+0xf0>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a30      	ldr	r2, [pc, #192]	; (8002640 <HAL_ETH_Init+0xf0>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_ETH_Init+0xf0>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_ETH_Init+0xf4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <HAL_ETH_Init+0xf4>)
 8002598:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800259c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_ETH_Init+0xf4>)
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4927      	ldr	r1, [pc, #156]	; (8002644 <HAL_ETH_Init+0xf4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_ETH_Init+0xf4>)
 80025ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c8:	f7ff fdee 	bl	80021a8 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025ce:	e011      	b.n	80025f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025d0:	f7ff fdea 	bl	80021a8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025de:	d909      	bls.n	80025f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2204      	movs	r2, #4
 80025e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	22e0      	movs	r2, #224	; 0xe0
 80025ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e021      	b.n	8002638 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e4      	bne.n	80025d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f958 	bl	80028bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f9ff 	bl	8002a10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa55 	bl	8002ac2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	461a      	mov	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f9bd 	bl	80029a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2210      	movs	r2, #16
 8002632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800

08002648 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <ETH_SetMACConfig+0x15c>)
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	7c1b      	ldrb	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <ETH_SetMACConfig+0x28>
 800266a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800266e:	e000      	b.n	8002672 <ETH_SetMACConfig+0x2a>
 8002670:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	7c5b      	ldrb	r3, [r3, #17]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <ETH_SetMACConfig+0x38>
 800267a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800267e:	e000      	b.n	8002682 <ETH_SetMACConfig+0x3a>
 8002680:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002682:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002688:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	7fdb      	ldrb	r3, [r3, #31]
 800268e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002690:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002696:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	7f92      	ldrb	r2, [r2, #30]
 800269c:	2a00      	cmp	r2, #0
 800269e:	d102      	bne.n	80026a6 <ETH_SetMACConfig+0x5e>
 80026a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026a4:	e000      	b.n	80026a8 <ETH_SetMACConfig+0x60>
 80026a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80026a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	7f1b      	ldrb	r3, [r3, #28]
 80026ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	791b      	ldrb	r3, [r3, #4]
 80026bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	d102      	bne.n	80026d0 <ETH_SetMACConfig+0x88>
 80026ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ce:	e000      	b.n	80026d2 <ETH_SetMACConfig+0x8a>
 80026d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7bdb      	ldrb	r3, [r3, #15]
 80026d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026ea:	4313      	orrs	r3, r2
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002702:	2001      	movs	r0, #1
 8002704:	f7ff fd5c 	bl	80021c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800271e:	4013      	ands	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002726:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800272e:	2a00      	cmp	r2, #0
 8002730:	d101      	bne.n	8002736 <ETH_SetMACConfig+0xee>
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	e000      	b.n	8002738 <ETH_SetMACConfig+0xf0>
 8002736:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002738:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800273e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002746:	2a01      	cmp	r2, #1
 8002748:	d101      	bne.n	800274e <ETH_SetMACConfig+0x106>
 800274a:	2208      	movs	r2, #8
 800274c:	e000      	b.n	8002750 <ETH_SetMACConfig+0x108>
 800274e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002750:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002758:	2a01      	cmp	r2, #1
 800275a:	d101      	bne.n	8002760 <ETH_SetMACConfig+0x118>
 800275c:	2204      	movs	r2, #4
 800275e:	e000      	b.n	8002762 <ETH_SetMACConfig+0x11a>
 8002760:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002762:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800276a:	2a01      	cmp	r2, #1
 800276c:	d101      	bne.n	8002772 <ETH_SetMACConfig+0x12a>
 800276e:	2202      	movs	r2, #2
 8002770:	e000      	b.n	8002774 <ETH_SetMACConfig+0x12c>
 8002772:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002774:	4313      	orrs	r3, r2
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff fd17 	bl	80021c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	ff20810f 	.word	0xff20810f

080027a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <ETH_SetDMAConfig+0x110>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	7b1b      	ldrb	r3, [r3, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <ETH_SetDMAConfig+0x2c>
 80027ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027d2:	e000      	b.n	80027d6 <ETH_SetDMAConfig+0x2e>
 80027d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	7b5b      	ldrb	r3, [r3, #13]
 80027da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	7f52      	ldrb	r2, [r2, #29]
 80027e2:	2a00      	cmp	r2, #0
 80027e4:	d102      	bne.n	80027ec <ETH_SetDMAConfig+0x44>
 80027e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ea:	e000      	b.n	80027ee <ETH_SetDMAConfig+0x46>
 80027ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	7b9b      	ldrb	r3, [r3, #14]
 80027f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	7f1b      	ldrb	r3, [r3, #28]
 8002802:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002804:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	7f9b      	ldrb	r3, [r3, #30]
 800280a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800280c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002812:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800281a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800281c:	4313      	orrs	r3, r2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282c:	461a      	mov	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff fcbe 	bl	80021c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800284c:	461a      	mov	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	791b      	ldrb	r3, [r3, #4]
 8002856:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800285c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002862:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002868:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002870:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002872:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800287a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002880:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800288a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800288e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800289c:	2001      	movs	r0, #1
 800289e:	f7ff fc8f 	bl	80021c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	f8de3f23 	.word	0xf8de3f23

080028bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b0a6      	sub	sp, #152	; 0x98
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028f8:	2300      	movs	r3, #0
 80028fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002902:	2300      	movs	r3, #0
 8002904:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800291e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002928:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002930:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002934:	4619      	mov	r1, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe86 	bl	8002648 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800293c:	2301      	movs	r3, #1
 800293e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002940:	2301      	movs	r3, #1
 8002942:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800294a:	2301      	movs	r3, #1
 800294c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002968:	2301      	movs	r3, #1
 800296a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800296c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002970:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002976:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800297c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002984:	2300      	movs	r3, #0
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800298c:	f107 0308 	add.w	r3, r7, #8
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff08 	bl	80027a8 <ETH_SetDMAConfig>
}
 8002998:	bf00      	nop
 800299a:	3798      	adds	r7, #152	; 0x98
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3305      	adds	r3, #5
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	3204      	adds	r2, #4
 80029b8:	7812      	ldrb	r2, [r2, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <ETH_MACAddressConfig+0x68>)
 80029c2:	4413      	add	r3, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3303      	adds	r3, #3
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	061a      	lsls	r2, r3, #24
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3302      	adds	r3, #2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3301      	adds	r3, #1
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	4313      	orrs	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	7812      	ldrb	r2, [r2, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <ETH_MACAddressConfig+0x6c>)
 80029f2:	4413      	add	r3, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	6013      	str	r3, [r2, #0]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40028040 	.word	0x40028040
 8002a0c:	40028044 	.word	0x40028044

08002a10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e03e      	b.n	8002a9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68d9      	ldr	r1, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2200      	movs	r2, #0
 8002a46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	3206      	adds	r2, #6
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d80c      	bhi.n	8002a80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68d9      	ldr	r1, [r3, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	e004      	b.n	8002a8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d9bd      	bls.n	8002a1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab4:	611a      	str	r2, [r3, #16]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e046      	b.n	8002b5e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6919      	ldr	r1, [r3, #16]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2200      	movs	r2, #0
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002b14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	3212      	adds	r2, #18
 8002b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d80c      	bhi.n	8002b4e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6919      	ldr	r1, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
 8002b4c:	e004      	b.n	8002b58 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d9b5      	bls.n	8002ad0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b8e:	60da      	str	r2, [r3, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e175      	b.n	8002ea8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 8164 	bne.w	8002ea2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d005      	beq.n	8002bf2 <HAL_GPIO_Init+0x56>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d130      	bne.n	8002c54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0201 	and.w	r2, r3, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d017      	beq.n	8002c90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d123      	bne.n	8002ce4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80be 	beq.w	8002ea2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d30:	6453      	str	r3, [r2, #68]	; 0x44
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d3e:	4a61      	ldr	r2, [pc, #388]	; (8002ec4 <HAL_GPIO_Init+0x328>)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a58      	ldr	r2, [pc, #352]	; (8002ec8 <HAL_GPIO_Init+0x32c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d037      	beq.n	8002dda <HAL_GPIO_Init+0x23e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a57      	ldr	r2, [pc, #348]	; (8002ecc <HAL_GPIO_Init+0x330>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_GPIO_Init+0x23a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a56      	ldr	r2, [pc, #344]	; (8002ed0 <HAL_GPIO_Init+0x334>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02b      	beq.n	8002dd2 <HAL_GPIO_Init+0x236>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <HAL_GPIO_Init+0x338>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d025      	beq.n	8002dce <HAL_GPIO_Init+0x232>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a54      	ldr	r2, [pc, #336]	; (8002ed8 <HAL_GPIO_Init+0x33c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <HAL_GPIO_Init+0x22e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a53      	ldr	r2, [pc, #332]	; (8002edc <HAL_GPIO_Init+0x340>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d019      	beq.n	8002dc6 <HAL_GPIO_Init+0x22a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	; (8002ee0 <HAL_GPIO_Init+0x344>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0x226>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a51      	ldr	r2, [pc, #324]	; (8002ee4 <HAL_GPIO_Init+0x348>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_Init+0x222>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a50      	ldr	r2, [pc, #320]	; (8002ee8 <HAL_GPIO_Init+0x34c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0x21e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4f      	ldr	r2, [pc, #316]	; (8002eec <HAL_GPIO_Init+0x350>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_Init+0x21a>
 8002db2:	2309      	movs	r3, #9
 8002db4:	e012      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002db6:	230a      	movs	r3, #10
 8002db8:	e010      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	e00e      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e00c      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	e00a      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	e008      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e006      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e004      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	f002 0203 	and.w	r2, r2, #3
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	4093      	lsls	r3, r2
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dec:	4935      	ldr	r1, [pc, #212]	; (8002ec4 <HAL_GPIO_Init+0x328>)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e1e:	4a34      	ldr	r2, [pc, #208]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e24:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e48:	4a29      	ldr	r2, [pc, #164]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e72:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	f67f ae86 	bls.w	8002bbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	40020c00 	.word	0x40020c00
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40021400 	.word	0x40021400
 8002ee0:	40021800 	.word	0x40021800
 8002ee4:	40021c00 	.word	0x40021c00
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40022400 	.word	0x40022400
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
 8002f00:	4613      	mov	r3, r2
 8002f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f04:	787b      	ldrb	r3, [r7, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f10:	e003      	b.n	8002f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	041a      	lsls	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f28:	b08f      	sub	sp, #60	; 0x3c
 8002f2a:	af0a      	add	r7, sp, #40	; 0x28
 8002f2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e116      	b.n	8003166 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff f834 	bl	8001fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 fd10 	bl	800599c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	687e      	ldr	r6, [r7, #4]
 8002f84:	466d      	mov	r5, sp
 8002f86:	f106 0410 	add.w	r4, r6, #16
 8002f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f96:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f9a:	1d33      	adds	r3, r6, #4
 8002f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f9e:	6838      	ldr	r0, [r7, #0]
 8002fa0:	f002 fca4 	bl	80058ec <USB_CoreInit>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0d7      	b.n	8003166 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f002 fcfe 	bl	80059be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e04a      	b.n	800305e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	333d      	adds	r3, #61	; 0x3d
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	333c      	adds	r3, #60	; 0x3c
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	b298      	uxth	r0, r3
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	3344      	adds	r3, #68	; 0x44
 8003004:	4602      	mov	r2, r0
 8003006:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3340      	adds	r3, #64	; 0x40
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3348      	adds	r3, #72	; 0x48
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	334c      	adds	r3, #76	; 0x4c
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3354      	adds	r3, #84	; 0x54
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	3301      	adds	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d3af      	bcc.n	8002fc8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	e044      	b.n	80030f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003096:	7bfa      	ldrb	r2, [r7, #15]
 8003098:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3301      	adds	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3b5      	bcc.n	800306e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	687e      	ldr	r6, [r7, #4]
 800310a:	466d      	mov	r5, sp
 800310c:	f106 0410 	add.w	r4, r6, #16
 8003110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003118:	e894 0003 	ldmia.w	r4, {r0, r1}
 800311c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003120:	1d33      	adds	r3, r6, #4
 8003122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003124:	6838      	ldr	r0, [r7, #0]
 8003126:	f002 fc97 	bl	8005a58 <USB_DevInit>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e014      	b.n	8003166 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	2b01      	cmp	r3, #1
 8003152:	d102      	bne.n	800315a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f80b 	bl	8003170 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f002 fe55 	bl	8005e0e <USB_DevDisconnect>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003170 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	10000003 	.word	0x10000003

080031b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40007000 	.word	0x40007000

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e29b      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8087 	beq.w	800330a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	4b96      	ldr	r3, [pc, #600]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b04      	cmp	r3, #4
 8003206:	d00c      	beq.n	8003222 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003208:	4b93      	ldr	r3, [pc, #588]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d112      	bne.n	800323a <HAL_RCC_OscConfig+0x62>
 8003214:	4b90      	ldr	r3, [pc, #576]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003220:	d10b      	bne.n	800323a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003222:	4b8d      	ldr	r3, [pc, #564]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d06c      	beq.n	8003308 <HAL_RCC_OscConfig+0x130>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d168      	bne.n	8003308 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e275      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x7a>
 8003244:	4b84      	ldr	r3, [pc, #528]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a83      	ldr	r2, [pc, #524]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e02e      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x9c>
 800325a:	4b7f      	ldr	r3, [pc, #508]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7e      	ldr	r2, [pc, #504]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7b      	ldr	r2, [pc, #492]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800326c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0xc0>
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a75      	ldr	r2, [pc, #468]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b73      	ldr	r3, [pc, #460]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a72      	ldr	r2, [pc, #456]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xd8>
 8003298:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6b      	ldr	r2, [pc, #428]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe ff76 	bl	80021a8 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe ff72 	bl	80021a8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e229      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe8>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe ff62 	bl	80021a8 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe ff5e 	bl	80021a8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e215      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x110>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d069      	beq.n	80033ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003316:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003322:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x190>
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x17a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1e9      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	493d      	ldr	r1, [pc, #244]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	e040      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d023      	beq.n	80033b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003370:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a38      	ldr	r2, [pc, #224]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe ff14 	bl	80021a8 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003384:	f7fe ff10 	bl	80021a8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1c7      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4929      	ldr	r1, [pc, #164]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
 80033b6:	e018      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a26      	ldr	r2, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fef0 	bl	80021a8 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fe feec 	bl	80021a8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1a3      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d038      	beq.n	8003468 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe fecd 	bl	80021a8 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003412:	f7fe fec9 	bl	80021a8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e180      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x23a>
 8003430:	e01a      	b.n	8003468 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <HAL_RCC_OscConfig+0x280>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe feb3 	bl	80021a8 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe feaf 	bl	80021a8 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d903      	bls.n	800345c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e166      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
 8003458:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a4 	beq.w	80035be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b8c      	ldr	r3, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a88      	ldr	r2, [pc, #544]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b86      	ldr	r3, [pc, #536]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349e:	4b83      	ldr	r3, [pc, #524]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034aa:	4b80      	ldr	r3, [pc, #512]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7f      	ldr	r2, [pc, #508]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fe fe77 	bl	80021a8 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fe fe73 	bl	80021a8 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	; 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e12a      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d0:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x4d4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x31a>
 80034e4:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a6f      	ldr	r2, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e02d      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x33c>
 80034fa:	4b6b      	ldr	r3, [pc, #428]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a67      	ldr	r2, [pc, #412]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	e01c      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d10c      	bne.n	8003536 <HAL_RCC_OscConfig+0x35e>
 800351c:	4b62      	ldr	r3, [pc, #392]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a61      	ldr	r2, [pc, #388]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	4b5f      	ldr	r3, [pc, #380]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a5e      	ldr	r2, [pc, #376]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x376>
 8003536:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a5b      	ldr	r2, [pc, #364]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003556:	f7fe fe27 	bl	80021a8 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe fe23 	bl	80021a8 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0d8      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCC_OscConfig+0x386>
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fe fe11 	bl	80021a8 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe fe0d 	bl	80021a8 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0c2      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ee      	bne.n	800358a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80ae 	beq.w	8003724 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d06d      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d14b      	bne.n	8003674 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fdde 	bl	80021a8 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe fdda 	bl	80021a8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e091      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	3b01      	subs	r3, #1
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	071b      	lsls	r3, r3, #28
 800363a:	491b      	ldr	r1, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe fdac 	bl	80021a8 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe fda8 	bl	80021a8 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e05f      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x47c>
 8003672:	e057      	b.n	8003724 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800367a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fd92 	bl	80021a8 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe fd8e 	bl	80021a8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e045      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_OscConfig+0x4d0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x4b0>
 80036a6:	e03d      	b.n	8003724 <HAL_RCC_OscConfig+0x54c>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCC_OscConfig+0x558>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d030      	beq.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d129      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d122      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d119      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d10f      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d0      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 020f 	bic.w	r2, r3, #15
 8003762:	4965      	ldr	r1, [pc, #404]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a58      	ldr	r2, [pc, #352]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 800379a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800379e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d040      	beq.n	8003858 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e073      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fe fcbe 	bl	80021a8 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe fcba 	bl	80021a8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e053      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d210      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 020f 	bic.w	r2, r3, #15
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f821 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x1cc>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1d0>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fc1a 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023c00 	.word	0x40023c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	0800bc84 	.word	0x0800bc84
 8003904:	20000000 	.word	0x20000000
 8003908:	20000004 	.word	0x20000004

0800390c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003910:	b094      	sub	sp, #80	; 0x50
 8003912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	647b      	str	r3, [r7, #68]	; 0x44
 8003918:	2300      	movs	r3, #0
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	2300      	movs	r3, #0
 800391e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003924:	4b79      	ldr	r3, [pc, #484]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b08      	cmp	r3, #8
 800392e:	d00d      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x40>
 8003930:	2b08      	cmp	r3, #8
 8003932:	f200 80e1 	bhi.w	8003af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x34>
 800393a:	2b04      	cmp	r3, #4
 800393c:	d003      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0x3a>
 800393e:	e0db      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b73      	ldr	r3, [pc, #460]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003942:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003944:	e0db      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003946:	4b73      	ldr	r3, [pc, #460]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800394a:	e0d8      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800394c:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003954:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003956:	4b6d      	ldr	r3, [pc, #436]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d063      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003962:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	2200      	movs	r2, #0
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
 800396c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003974:	633b      	str	r3, [r7, #48]	; 0x30
 8003976:	2300      	movs	r3, #0
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
 800397a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800397e:	4622      	mov	r2, r4
 8003980:	462b      	mov	r3, r5
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f04f 0100 	mov.w	r1, #0
 800398a:	0159      	lsls	r1, r3, #5
 800398c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003990:	0150      	lsls	r0, r2, #5
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4621      	mov	r1, r4
 8003998:	1a51      	subs	r1, r2, r1
 800399a:	6139      	str	r1, [r7, #16]
 800399c:	4629      	mov	r1, r5
 800399e:	eb63 0301 	sbc.w	r3, r3, r1
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039b0:	4659      	mov	r1, fp
 80039b2:	018b      	lsls	r3, r1, #6
 80039b4:	4651      	mov	r1, sl
 80039b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ba:	4651      	mov	r1, sl
 80039bc:	018a      	lsls	r2, r1, #6
 80039be:	4651      	mov	r1, sl
 80039c0:	ebb2 0801 	subs.w	r8, r2, r1
 80039c4:	4659      	mov	r1, fp
 80039c6:	eb63 0901 	sbc.w	r9, r3, r1
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039de:	4690      	mov	r8, r2
 80039e0:	4699      	mov	r9, r3
 80039e2:	4623      	mov	r3, r4
 80039e4:	eb18 0303 	adds.w	r3, r8, r3
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	462b      	mov	r3, r5
 80039ec:	eb49 0303 	adc.w	r3, r9, r3
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039fe:	4629      	mov	r1, r5
 8003a00:	024b      	lsls	r3, r1, #9
 8003a02:	4621      	mov	r1, r4
 8003a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a08:	4621      	mov	r1, r4
 8003a0a:	024a      	lsls	r2, r1, #9
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a12:	2200      	movs	r2, #0
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a1c:	f7fc fe24 	bl	8000668 <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4613      	mov	r3, r2
 8003a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a28:	e058      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	2200      	movs	r2, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	4611      	mov	r1, r2
 8003a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a44:	4642      	mov	r2, r8
 8003a46:	464b      	mov	r3, r9
 8003a48:	f04f 0000 	mov.w	r0, #0
 8003a4c:	f04f 0100 	mov.w	r1, #0
 8003a50:	0159      	lsls	r1, r3, #5
 8003a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a56:	0150      	lsls	r0, r2, #5
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a62:	4649      	mov	r1, r9
 8003a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a80:	eb63 050b 	sbc.w	r5, r3, fp
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	00eb      	lsls	r3, r5, #3
 8003a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a92:	00e2      	lsls	r2, r4, #3
 8003a94:	4614      	mov	r4, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	18e3      	adds	r3, r4, r3
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	eb45 0303 	adc.w	r3, r5, r3
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	028b      	lsls	r3, r1, #10
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003abc:	4621      	mov	r1, r4
 8003abe:	028a      	lsls	r2, r1, #10
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	61fa      	str	r2, [r7, #28]
 8003acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad0:	f7fc fdca 	bl	8000668 <__aeabi_uldivmod>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003af6:	e002      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003afa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3750      	adds	r7, #80	; 0x50
 8003b04:	46bd      	mov	sp, r7
 8003b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	00f42400 	.word	0x00f42400
 8003b14:	007a1200 	.word	0x007a1200

08003b18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000000 	.word	0x20000000

08003b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b34:	f7ff fff0 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	0a9b      	lsrs	r3, r3, #10
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	0800bc94 	.word	0x0800bc94

08003b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b5c:	f7ff ffdc 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0b5b      	lsrs	r3, r3, #13
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4903      	ldr	r1, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800bc94 	.word	0x0800bc94

08003b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d012      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ba8:	4b69      	ldr	r3, [pc, #420]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a68      	ldr	r2, [pc, #416]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bb2:	6093      	str	r3, [r2, #8]
 8003bb4:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	4964      	ldr	r1, [pc, #400]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d017      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bda:	4b5d      	ldr	r3, [pc, #372]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	4959      	ldr	r1, [pc, #356]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d017      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c16:	4b4e      	ldr	r3, [pc, #312]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	494a      	ldr	r1, [pc, #296]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c34:	d101      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 808b 	beq.w	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	4a39      	ldr	r2, [pc, #228]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c70:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a34      	ldr	r2, [pc, #208]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c88:	f7fe fa8e 	bl	80021a8 <HAL_GetTick>
 8003c8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c90:	f7fe fa8a 	bl	80021a8 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e38f      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ca2:	4b2c      	ldr	r3, [pc, #176]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cae:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d035      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d02e      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ccc:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cee:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d114      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fe fa52 	bl	80021a8 <HAL_GetTick>
 8003d04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fe fa4e 	bl	80021a8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e351      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ee      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d36:	d111      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d46:	400b      	ands	r3, r1
 8003d48:	4901      	ldr	r1, [pc, #4]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40007000 	.word	0x40007000
 8003d58:	0ffffcff 	.word	0x0ffffcff
 8003d5c:	4bac      	ldr	r3, [pc, #688]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4aab      	ldr	r2, [pc, #684]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d66:	6093      	str	r3, [r2, #8]
 8003d68:	4ba9      	ldr	r3, [pc, #676]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d74:	49a6      	ldr	r1, [pc, #664]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d010      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d86:	4ba2      	ldr	r3, [pc, #648]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d8c:	4aa0      	ldr	r2, [pc, #640]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d96:	4b9e      	ldr	r3, [pc, #632]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	499b      	ldr	r1, [pc, #620]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db4:	4b96      	ldr	r3, [pc, #600]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc2:	4993      	ldr	r1, [pc, #588]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dd6:	4b8e      	ldr	r3, [pc, #568]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de4:	498a      	ldr	r1, [pc, #552]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003df8:	4b85      	ldr	r3, [pc, #532]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e06:	4982      	ldr	r1, [pc, #520]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e1a:	4b7d      	ldr	r3, [pc, #500]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	4979      	ldr	r1, [pc, #484]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e3c:	4b74      	ldr	r3, [pc, #464]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f023 0203 	bic.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	4971      	ldr	r1, [pc, #452]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e5e:	4b6c      	ldr	r3, [pc, #432]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f023 020c 	bic.w	r2, r3, #12
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6c:	4968      	ldr	r1, [pc, #416]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e80:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	4960      	ldr	r1, [pc, #384]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	4957      	ldr	r1, [pc, #348]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ec4:	4b52      	ldr	r3, [pc, #328]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	494f      	ldr	r1, [pc, #316]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ee6:	4b4a      	ldr	r3, [pc, #296]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	4946      	ldr	r1, [pc, #280]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f08:	4b41      	ldr	r3, [pc, #260]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	493e      	ldr	r1, [pc, #248]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f2a:	4b39      	ldr	r3, [pc, #228]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f38:	4935      	ldr	r1, [pc, #212]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f4c:	4b30      	ldr	r3, [pc, #192]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5a:	492d      	ldr	r1, [pc, #180]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d011      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7c:	4924      	ldr	r1, [pc, #144]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fae:	4b18      	ldr	r3, [pc, #96]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fbc:	4914      	ldr	r1, [pc, #80]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe0:	490b      	ldr	r1, [pc, #44]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00f      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004004:	4902      	ldr	r1, [pc, #8]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800400c:	e002      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004020:	4b8a      	ldr	r3, [pc, #552]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004026:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	4986      	ldr	r1, [pc, #536]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004044:	4b81      	ldr	r3, [pc, #516]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004054:	497d      	ldr	r1, [pc, #500]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d006      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80d6 	beq.w	800421c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004070:	4b76      	ldr	r3, [pc, #472]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a75      	ldr	r2, [pc, #468]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004076:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800407a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407c:	f7fe f894 	bl	80021a8 <HAL_GetTick>
 8004080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004084:	f7fe f890 	bl	80021a8 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	; 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e195      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004096:	4b6d      	ldr	r3, [pc, #436]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d021      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11d      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040b6:	4b65      	ldr	r3, [pc, #404]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040c4:	4b61      	ldr	r3, [pc, #388]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ca:	0e1b      	lsrs	r3, r3, #24
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	019a      	lsls	r2, r3, #6
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	071b      	lsls	r3, r3, #28
 80040ea:	4958      	ldr	r1, [pc, #352]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d004      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02e      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411c:	d129      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800411e:	4b4b      	ldr	r3, [pc, #300]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800412c:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004132:	0f1b      	lsrs	r3, r3, #28
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	019a      	lsls	r2, r3, #6
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	431a      	orrs	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	071b      	lsls	r3, r3, #28
 8004152:	493e      	ldr	r1, [pc, #248]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800415a:	4b3c      	ldr	r3, [pc, #240]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004160:	f023 021f 	bic.w	r2, r3, #31
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	3b01      	subs	r3, #1
 800416a:	4938      	ldr	r1, [pc, #224]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01d      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800417e:	4b33      	ldr	r3, [pc, #204]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004184:	0e1b      	lsrs	r3, r3, #24
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800418c:	4b2f      	ldr	r3, [pc, #188]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004192:	0f1b      	lsrs	r3, r3, #28
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	019a      	lsls	r2, r3, #6
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	431a      	orrs	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	061b      	lsls	r3, r3, #24
 80041ac:	431a      	orrs	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	071b      	lsls	r3, r3, #28
 80041b2:	4926      	ldr	r1, [pc, #152]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d011      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	019a      	lsls	r2, r3, #6
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	071b      	lsls	r3, r3, #28
 80041e2:	491a      	ldr	r1, [pc, #104]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041ea:	4b18      	ldr	r3, [pc, #96]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f6:	f7fd ffd7 	bl	80021a8 <HAL_GetTick>
 80041fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041fe:	f7fd ffd3 	bl	80021a8 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b64      	cmp	r3, #100	; 0x64
 800420a:	d901      	bls.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e0d8      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004210:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b01      	cmp	r3, #1
 8004220:	f040 80ce 	bne.w	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a08      	ldr	r2, [pc, #32]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800422e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004230:	f7fd ffba 	bl	80021a8 <HAL_GetTick>
 8004234:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004236:	e00b      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004238:	f7fd ffb6 	bl	80021a8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d904      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0bb      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004250:	4b5e      	ldr	r3, [pc, #376]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800425c:	d0ec      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800427a:	2b00      	cmp	r3, #0
 800427c:	d02e      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d12a      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004286:	4b51      	ldr	r3, [pc, #324]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004294:	4b4d      	ldr	r3, [pc, #308]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	0f1b      	lsrs	r3, r3, #28
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	019a      	lsls	r2, r3, #6
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	071b      	lsls	r3, r3, #28
 80042ba:	4944      	ldr	r1, [pc, #272]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042c2:	4b42      	ldr	r3, [pc, #264]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	3b01      	subs	r3, #1
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	493d      	ldr	r1, [pc, #244]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d022      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f0:	d11d      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042f2:	4b36      	ldr	r3, [pc, #216]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	0e1b      	lsrs	r3, r3, #24
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004300:	4b32      	ldr	r3, [pc, #200]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	0f1b      	lsrs	r3, r3, #28
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	019a      	lsls	r2, r3, #6
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	041b      	lsls	r3, r3, #16
 800431a:	431a      	orrs	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	061b      	lsls	r3, r3, #24
 8004320:	431a      	orrs	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	071b      	lsls	r3, r3, #28
 8004326:	4929      	ldr	r1, [pc, #164]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d028      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	0e1b      	lsrs	r3, r3, #24
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004348:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	019a      	lsls	r2, r3, #6
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	431a      	orrs	r2, r3
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	071b      	lsls	r3, r3, #28
 800436e:	4917      	ldr	r1, [pc, #92]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4911      	ldr	r1, [pc, #68]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004398:	f7fd ff06 	bl	80021a8 <HAL_GetTick>
 800439c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043a0:	f7fd ff02 	bl	80021a8 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e007      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043be:	d1ef      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800

080043d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e040      	b.n	8004464 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fd08 	bl	8001e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	; 0x24
 80043fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fb82 	bl	8004b18 <UART_SetConfig>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e022      	b.n	8004464 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fdda 	bl	8004fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fe61 	bl	8005124 <UART_CheckIdleState>
 8004462:	4603      	mov	r3, r0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004480:	2b20      	cmp	r3, #32
 8004482:	d132      	bne.n	80044ea <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_UART_Receive_IT+0x24>
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e02b      	b.n	80044ec <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d018      	beq.n	80044da <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	613b      	str	r3, [r7, #16]
   return(result);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	69f9      	ldr	r1, [r7, #28]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e6      	bne.n	80044a8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	461a      	mov	r2, r3
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 ff33 	bl	800534c <UART_Start_Receive_IT>
 80044e6:	4603      	mov	r3, r0
 80044e8:	e000      	b.n	80044ec <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b0ba      	sub	sp, #232	; 0xe8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800451a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800451e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004522:	4013      	ands	r3, r2
 8004524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d115      	bne.n	800455c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00f      	beq.n	800455c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800453c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 82ac 	beq.w	8004aaa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
      }
      return;
 800455a:	e2a6      	b.n	8004aaa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800455c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8117 	beq.w	8004794 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004576:	4b85      	ldr	r3, [pc, #532]	; (800478c <HAL_UART_IRQHandler+0x298>)
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 810a 	beq.w	8004794 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d011      	beq.n	80045b0 <HAL_UART_IRQHandler+0xbc>
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2201      	movs	r2, #1
 800459e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d011      	beq.n	80045e0 <HAL_UART_IRQHandler+0xec>
 80045bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00b      	beq.n	80045e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2202      	movs	r2, #2
 80045ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d011      	beq.n	8004610 <HAL_UART_IRQHandler+0x11c>
 80045ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2204      	movs	r2, #4
 80045fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004606:	f043 0202 	orr.w	r2, r3, #2
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d017      	beq.n	800464c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800461c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d105      	bne.n	8004634 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800462c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00b      	beq.n	800464c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2208      	movs	r2, #8
 800463a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004642:	f043 0208 	orr.w	r2, r3, #8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800464c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <HAL_UART_IRQHandler+0x18a>
 8004658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00c      	beq.n	800467e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800466c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004674:	f043 0220 	orr.w	r2, r3, #32
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8212 	beq.w	8004aae <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d04f      	beq.n	8004776 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fefe 	bl	80054d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d141      	bne.n	800476e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3308      	adds	r3, #8
 80046f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3308      	adds	r3, #8
 8004712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004716:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800471a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800472e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1d9      	bne.n	80046ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473a:	2b00      	cmp	r3, #0
 800473c:	d013      	beq.n	8004766 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004742:	4a13      	ldr	r2, [pc, #76]	; (8004790 <HAL_UART_IRQHandler+0x29c>)
 8004744:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd fedd 	bl	800250a <HAL_DMA_Abort_IT>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d017      	beq.n	8004786 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004760:	4610      	mov	r0, r2
 8004762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004764:	e00f      	b.n	8004786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f9b6 	bl	8004ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	e00b      	b.n	8004786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9b2 	bl	8004ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e007      	b.n	8004786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f9ae 	bl	8004ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004784:	e193      	b.n	8004aae <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004786:	bf00      	nop
    return;
 8004788:	e191      	b.n	8004aae <HAL_UART_IRQHandler+0x5ba>
 800478a:	bf00      	nop
 800478c:	04000120 	.word	0x04000120
 8004790:	080055a1 	.word	0x080055a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	2b01      	cmp	r3, #1
 800479a:	f040 814c 	bne.w	8004a36 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 8145 	beq.w	8004a36 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 813e 	beq.w	8004a36 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2210      	movs	r2, #16
 80047c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	f040 80b6 	bne.w	800493e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8165 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047f2:	429a      	cmp	r2, r3
 80047f4:	f080 815d 	bcs.w	8004ab2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480c:	f000 8086 	beq.w	800491c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800482c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800483a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800483e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004846:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1da      	bne.n	8004810 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800486a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3308      	adds	r3, #8
 800487a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800487e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004882:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004886:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e1      	bne.n	800485a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3308      	adds	r3, #8
 800489c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e3      	bne.n	8004896 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ec:	f023 0310 	bic.w	r3, r3, #16
 80048f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800490c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e4      	bne.n	80048dc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004916:	4618      	mov	r0, r3
 8004918:	f7fd fd87 	bl	800242a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800492e:	b29b      	uxth	r3, r3
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	b29b      	uxth	r3, r3
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f8d8 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800493c:	e0b9      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800494a:	b29b      	uxth	r3, r3
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80ab 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80a6 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800497e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800498c:	647b      	str	r3, [r7, #68]	; 0x44
 800498e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800499a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e4      	bne.n	800496a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3308      	adds	r3, #8
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	623b      	str	r3, [r7, #32]
   return(result);
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3308      	adds	r3, #8
 80049c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049c4:	633a      	str	r2, [r7, #48]	; 0x30
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e3      	bne.n	80049a0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f023 0310 	bic.w	r3, r3, #16
 8004a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e4      	bne.n	80049ec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2202      	movs	r2, #2
 8004a26:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f85c 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a34:	e03f      	b.n	8004ab6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00e      	beq.n	8004a60 <HAL_UART_IRQHandler+0x56c>
 8004a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d008      	beq.n	8004a60 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f853 	bl	8004b04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a5e:	e02d      	b.n	8004abc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00e      	beq.n	8004a8a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01c      	beq.n	8004aba <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	4798      	blx	r3
    }
    return;
 8004a88:	e017      	b.n	8004aba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d012      	beq.n	8004abc <HAL_UART_IRQHandler+0x5c8>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00c      	beq.n	8004abc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fd92 	bl	80055cc <UART_EndTransmit_IT>
    return;
 8004aa8:	e008      	b.n	8004abc <HAL_UART_IRQHandler+0x5c8>
      return;
 8004aaa:	bf00      	nop
 8004aac:	e006      	b.n	8004abc <HAL_UART_IRQHandler+0x5c8>
    return;
 8004aae:	bf00      	nop
 8004ab0:	e004      	b.n	8004abc <HAL_UART_IRQHandler+0x5c8>
      return;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <HAL_UART_IRQHandler+0x5c8>
      return;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <HAL_UART_IRQHandler+0x5c8>
    return;
 8004aba:	bf00      	nop
  }

}
 8004abc:	37e8      	adds	r7, #232	; 0xe8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop

08004ac4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4ba6      	ldr	r3, [pc, #664]	; (8004ddc <UART_SetConfig+0x2c4>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	6979      	ldr	r1, [r7, #20]
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a94      	ldr	r2, [pc, #592]	; (8004de0 <UART_SetConfig+0x2c8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d120      	bne.n	8004bd6 <UART_SetConfig+0xbe>
 8004b94:	4b93      	ldr	r3, [pc, #588]	; (8004de4 <UART_SetConfig+0x2cc>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d816      	bhi.n	8004bd0 <UART_SetConfig+0xb8>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x90>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc5 	.word	0x08004bc5
 8004bb0:	08004bbf 	.word	0x08004bbf
 8004bb4:	08004bcb 	.word	0x08004bcb
 8004bb8:	2301      	movs	r3, #1
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e150      	b.n	8004e60 <UART_SetConfig+0x348>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	77fb      	strb	r3, [r7, #31]
 8004bc2:	e14d      	b.n	8004e60 <UART_SetConfig+0x348>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e14a      	b.n	8004e60 <UART_SetConfig+0x348>
 8004bca:	2308      	movs	r3, #8
 8004bcc:	77fb      	strb	r3, [r7, #31]
 8004bce:	e147      	b.n	8004e60 <UART_SetConfig+0x348>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	e144      	b.n	8004e60 <UART_SetConfig+0x348>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a83      	ldr	r2, [pc, #524]	; (8004de8 <UART_SetConfig+0x2d0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d132      	bne.n	8004c46 <UART_SetConfig+0x12e>
 8004be0:	4b80      	ldr	r3, [pc, #512]	; (8004de4 <UART_SetConfig+0x2cc>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d828      	bhi.n	8004c40 <UART_SetConfig+0x128>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <UART_SetConfig+0xdc>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004c41 	.word	0x08004c41
 8004bfc:	08004c41 	.word	0x08004c41
 8004c00:	08004c41 	.word	0x08004c41
 8004c04:	08004c35 	.word	0x08004c35
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c41 	.word	0x08004c41
 8004c14:	08004c2f 	.word	0x08004c2f
 8004c18:	08004c41 	.word	0x08004c41
 8004c1c:	08004c41 	.word	0x08004c41
 8004c20:	08004c41 	.word	0x08004c41
 8004c24:	08004c3b 	.word	0x08004c3b
 8004c28:	2300      	movs	r3, #0
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e118      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e115      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c34:	2304      	movs	r3, #4
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e112      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e10f      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c40:	2310      	movs	r3, #16
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e10c      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a68      	ldr	r2, [pc, #416]	; (8004dec <UART_SetConfig+0x2d4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d120      	bne.n	8004c92 <UART_SetConfig+0x17a>
 8004c50:	4b64      	ldr	r3, [pc, #400]	; (8004de4 <UART_SetConfig+0x2cc>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c5a:	2b30      	cmp	r3, #48	; 0x30
 8004c5c:	d013      	beq.n	8004c86 <UART_SetConfig+0x16e>
 8004c5e:	2b30      	cmp	r3, #48	; 0x30
 8004c60:	d814      	bhi.n	8004c8c <UART_SetConfig+0x174>
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d009      	beq.n	8004c7a <UART_SetConfig+0x162>
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d810      	bhi.n	8004c8c <UART_SetConfig+0x174>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <UART_SetConfig+0x15c>
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d006      	beq.n	8004c80 <UART_SetConfig+0x168>
 8004c72:	e00b      	b.n	8004c8c <UART_SetConfig+0x174>
 8004c74:	2300      	movs	r3, #0
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e0f2      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e0ef      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c80:	2304      	movs	r3, #4
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e0ec      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c86:	2308      	movs	r3, #8
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e0e9      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e0e6      	b.n	8004e60 <UART_SetConfig+0x348>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a56      	ldr	r2, [pc, #344]	; (8004df0 <UART_SetConfig+0x2d8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d120      	bne.n	8004cde <UART_SetConfig+0x1c6>
 8004c9c:	4b51      	ldr	r3, [pc, #324]	; (8004de4 <UART_SetConfig+0x2cc>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ca8:	d013      	beq.n	8004cd2 <UART_SetConfig+0x1ba>
 8004caa:	2bc0      	cmp	r3, #192	; 0xc0
 8004cac:	d814      	bhi.n	8004cd8 <UART_SetConfig+0x1c0>
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d009      	beq.n	8004cc6 <UART_SetConfig+0x1ae>
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	d810      	bhi.n	8004cd8 <UART_SetConfig+0x1c0>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <UART_SetConfig+0x1a8>
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d006      	beq.n	8004ccc <UART_SetConfig+0x1b4>
 8004cbe:	e00b      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e0cc      	b.n	8004e60 <UART_SetConfig+0x348>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	77fb      	strb	r3, [r7, #31]
 8004cca:	e0c9      	b.n	8004e60 <UART_SetConfig+0x348>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e0c6      	b.n	8004e60 <UART_SetConfig+0x348>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e0c3      	b.n	8004e60 <UART_SetConfig+0x348>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e0c0      	b.n	8004e60 <UART_SetConfig+0x348>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a44      	ldr	r2, [pc, #272]	; (8004df4 <UART_SetConfig+0x2dc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d125      	bne.n	8004d34 <UART_SetConfig+0x21c>
 8004ce8:	4b3e      	ldr	r3, [pc, #248]	; (8004de4 <UART_SetConfig+0x2cc>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf6:	d017      	beq.n	8004d28 <UART_SetConfig+0x210>
 8004cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfc:	d817      	bhi.n	8004d2e <UART_SetConfig+0x216>
 8004cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d02:	d00b      	beq.n	8004d1c <UART_SetConfig+0x204>
 8004d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d08:	d811      	bhi.n	8004d2e <UART_SetConfig+0x216>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <UART_SetConfig+0x1fe>
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	d006      	beq.n	8004d22 <UART_SetConfig+0x20a>
 8004d14:	e00b      	b.n	8004d2e <UART_SetConfig+0x216>
 8004d16:	2300      	movs	r3, #0
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e0a1      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e09e      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d22:	2304      	movs	r3, #4
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e09b      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e098      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d2e:	2310      	movs	r3, #16
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e095      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2f      	ldr	r2, [pc, #188]	; (8004df8 <UART_SetConfig+0x2e0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d125      	bne.n	8004d8a <UART_SetConfig+0x272>
 8004d3e:	4b29      	ldr	r3, [pc, #164]	; (8004de4 <UART_SetConfig+0x2cc>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d4c:	d017      	beq.n	8004d7e <UART_SetConfig+0x266>
 8004d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d52:	d817      	bhi.n	8004d84 <UART_SetConfig+0x26c>
 8004d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d58:	d00b      	beq.n	8004d72 <UART_SetConfig+0x25a>
 8004d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5e:	d811      	bhi.n	8004d84 <UART_SetConfig+0x26c>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <UART_SetConfig+0x254>
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d68:	d006      	beq.n	8004d78 <UART_SetConfig+0x260>
 8004d6a:	e00b      	b.n	8004d84 <UART_SetConfig+0x26c>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e076      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d72:	2302      	movs	r3, #2
 8004d74:	77fb      	strb	r3, [r7, #31]
 8004d76:	e073      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	77fb      	strb	r3, [r7, #31]
 8004d7c:	e070      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d7e:	2308      	movs	r3, #8
 8004d80:	77fb      	strb	r3, [r7, #31]
 8004d82:	e06d      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d84:	2310      	movs	r3, #16
 8004d86:	77fb      	strb	r3, [r7, #31]
 8004d88:	e06a      	b.n	8004e60 <UART_SetConfig+0x348>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1b      	ldr	r2, [pc, #108]	; (8004dfc <UART_SetConfig+0x2e4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d138      	bne.n	8004e06 <UART_SetConfig+0x2ee>
 8004d94:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <UART_SetConfig+0x2cc>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004da2:	d017      	beq.n	8004dd4 <UART_SetConfig+0x2bc>
 8004da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004da8:	d82a      	bhi.n	8004e00 <UART_SetConfig+0x2e8>
 8004daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dae:	d00b      	beq.n	8004dc8 <UART_SetConfig+0x2b0>
 8004db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db4:	d824      	bhi.n	8004e00 <UART_SetConfig+0x2e8>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <UART_SetConfig+0x2aa>
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbe:	d006      	beq.n	8004dce <UART_SetConfig+0x2b6>
 8004dc0:	e01e      	b.n	8004e00 <UART_SetConfig+0x2e8>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e04b      	b.n	8004e60 <UART_SetConfig+0x348>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e048      	b.n	8004e60 <UART_SetConfig+0x348>
 8004dce:	2304      	movs	r3, #4
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	e045      	b.n	8004e60 <UART_SetConfig+0x348>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e042      	b.n	8004e60 <UART_SetConfig+0x348>
 8004dda:	bf00      	nop
 8004ddc:	efff69f3 	.word	0xefff69f3
 8004de0:	40011000 	.word	0x40011000
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40004400 	.word	0x40004400
 8004dec:	40004800 	.word	0x40004800
 8004df0:	40004c00 	.word	0x40004c00
 8004df4:	40005000 	.word	0x40005000
 8004df8:	40011400 	.word	0x40011400
 8004dfc:	40007800 	.word	0x40007800
 8004e00:	2310      	movs	r3, #16
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e02c      	b.n	8004e60 <UART_SetConfig+0x348>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a72      	ldr	r2, [pc, #456]	; (8004fd4 <UART_SetConfig+0x4bc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d125      	bne.n	8004e5c <UART_SetConfig+0x344>
 8004e10:	4b71      	ldr	r3, [pc, #452]	; (8004fd8 <UART_SetConfig+0x4c0>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e1e:	d017      	beq.n	8004e50 <UART_SetConfig+0x338>
 8004e20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e24:	d817      	bhi.n	8004e56 <UART_SetConfig+0x33e>
 8004e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2a:	d00b      	beq.n	8004e44 <UART_SetConfig+0x32c>
 8004e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e30:	d811      	bhi.n	8004e56 <UART_SetConfig+0x33e>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <UART_SetConfig+0x326>
 8004e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e3a:	d006      	beq.n	8004e4a <UART_SetConfig+0x332>
 8004e3c:	e00b      	b.n	8004e56 <UART_SetConfig+0x33e>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e00d      	b.n	8004e60 <UART_SetConfig+0x348>
 8004e44:	2302      	movs	r3, #2
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e00a      	b.n	8004e60 <UART_SetConfig+0x348>
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e007      	b.n	8004e60 <UART_SetConfig+0x348>
 8004e50:	2308      	movs	r3, #8
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e004      	b.n	8004e60 <UART_SetConfig+0x348>
 8004e56:	2310      	movs	r3, #16
 8004e58:	77fb      	strb	r3, [r7, #31]
 8004e5a:	e001      	b.n	8004e60 <UART_SetConfig+0x348>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e68:	d15b      	bne.n	8004f22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e6a:	7ffb      	ldrb	r3, [r7, #31]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d828      	bhi.n	8004ec2 <UART_SetConfig+0x3aa>
 8004e70:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <UART_SetConfig+0x360>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004ead 	.word	0x08004ead
 8004e84:	08004ec3 	.word	0x08004ec3
 8004e88:	08004eb3 	.word	0x08004eb3
 8004e8c:	08004ec3 	.word	0x08004ec3
 8004e90:	08004ec3 	.word	0x08004ec3
 8004e94:	08004ec3 	.word	0x08004ec3
 8004e98:	08004ebb 	.word	0x08004ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9c:	f7fe fe48 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8004ea0:	61b8      	str	r0, [r7, #24]
        break;
 8004ea2:	e013      	b.n	8004ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7fe fe58 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	61b8      	str	r0, [r7, #24]
        break;
 8004eaa:	e00f      	b.n	8004ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eac:	4b4b      	ldr	r3, [pc, #300]	; (8004fdc <UART_SetConfig+0x4c4>)
 8004eae:	61bb      	str	r3, [r7, #24]
        break;
 8004eb0:	e00c      	b.n	8004ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb2:	f7fe fd2b 	bl	800390c <HAL_RCC_GetSysClockFreq>
 8004eb6:	61b8      	str	r0, [r7, #24]
        break;
 8004eb8:	e008      	b.n	8004ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ebe:	61bb      	str	r3, [r7, #24]
        break;
 8004ec0:	e004      	b.n	8004ecc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8004eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d074      	beq.n	8004fbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	005a      	lsls	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	441a      	add	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b0f      	cmp	r3, #15
 8004eec:	d916      	bls.n	8004f1c <UART_SetConfig+0x404>
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef4:	d212      	bcs.n	8004f1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f023 030f 	bic.w	r3, r3, #15
 8004efe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	89fa      	ldrh	r2, [r7, #14]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e04f      	b.n	8004fbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	77bb      	strb	r3, [r7, #30]
 8004f20:	e04c      	b.n	8004fbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d828      	bhi.n	8004f7a <UART_SetConfig+0x462>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0x418>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f65 	.word	0x08004f65
 8004f3c:	08004f7b 	.word	0x08004f7b
 8004f40:	08004f6b 	.word	0x08004f6b
 8004f44:	08004f7b 	.word	0x08004f7b
 8004f48:	08004f7b 	.word	0x08004f7b
 8004f4c:	08004f7b 	.word	0x08004f7b
 8004f50:	08004f73 	.word	0x08004f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f54:	f7fe fdec 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8004f58:	61b8      	str	r0, [r7, #24]
        break;
 8004f5a:	e013      	b.n	8004f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f5c:	f7fe fdfc 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 8004f60:	61b8      	str	r0, [r7, #24]
        break;
 8004f62:	e00f      	b.n	8004f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f64:	4b1d      	ldr	r3, [pc, #116]	; (8004fdc <UART_SetConfig+0x4c4>)
 8004f66:	61bb      	str	r3, [r7, #24]
        break;
 8004f68:	e00c      	b.n	8004f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6a:	f7fe fccf 	bl	800390c <HAL_RCC_GetSysClockFreq>
 8004f6e:	61b8      	str	r0, [r7, #24]
        break;
 8004f70:	e008      	b.n	8004f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f76:	61bb      	str	r3, [r7, #24]
        break;
 8004f78:	e004      	b.n	8004f84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	77bb      	strb	r3, [r7, #30]
        break;
 8004f82:	bf00      	nop
    }

    if (pclk != 0U)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d018      	beq.n	8004fbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	085a      	lsrs	r2, r3, #1
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	441a      	add	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b0f      	cmp	r3, #15
 8004fa2:	d909      	bls.n	8004fb8 <UART_SetConfig+0x4a0>
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004faa:	d205      	bcs.n	8004fb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60da      	str	r2, [r3, #12]
 8004fb6:	e001      	b.n	8004fbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40007c00 	.word	0x40007c00
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	00f42400 	.word	0x00f42400

08004fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01a      	beq.n	80050f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050de:	d10a      	bne.n	80050f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	605a      	str	r2, [r3, #4]
  }
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af02      	add	r7, sp, #8
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005134:	f7fd f838 	bl	80021a8 <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b08      	cmp	r3, #8
 8005146:	d10e      	bne.n	8005166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f831 	bl	80051be <UART_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e027      	b.n	80051b6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d10e      	bne.n	8005192 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f81b 	bl	80051be <UART_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e011      	b.n	80051b6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b09c      	sub	sp, #112	; 0x70
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ce:	e0a7      	b.n	8005320 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d6:	f000 80a3 	beq.w	8005320 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fc ffe5 	bl	80021a8 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80051ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d13f      	bne.n	8005270 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005204:	667b      	str	r3, [r7, #100]	; 0x64
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005210:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800521c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e6      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	663b      	str	r3, [r7, #96]	; 0x60
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005242:	64ba      	str	r2, [r7, #72]	; 0x48
 8005244:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e5      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e068      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d050      	beq.n	8005320 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528c:	d148      	bne.n	8005320 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005296:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
 80052b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e6      	bne.n	8005298 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3308      	adds	r3, #8
 80052d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	613b      	str	r3, [r7, #16]
   return(result);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3308      	adds	r3, #8
 80052e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052ea:	623a      	str	r2, [r7, #32]
 80052ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	69f9      	ldr	r1, [r7, #28]
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e010      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4013      	ands	r3, r2
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	429a      	cmp	r2, r3
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	429a      	cmp	r2, r3
 800533c:	f43f af48 	beq.w	80051d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3770      	adds	r7, #112	; 0x70
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800534c:	b480      	push	{r7}
 800534e:	b097      	sub	sp, #92	; 0x5c
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	4613      	mov	r3, r2
 8005358:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537e:	d10e      	bne.n	800539e <UART_Start_Receive_IT+0x52>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d105      	bne.n	8005394 <UART_Start_Receive_IT+0x48>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800538e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005392:	e02d      	b.n	80053f0 <UART_Start_Receive_IT+0xa4>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	22ff      	movs	r2, #255	; 0xff
 8005398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800539c:	e028      	b.n	80053f0 <UART_Start_Receive_IT+0xa4>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <UART_Start_Receive_IT+0x76>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <UART_Start_Receive_IT+0x6c>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	22ff      	movs	r2, #255	; 0xff
 80053b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053b6:	e01b      	b.n	80053f0 <UART_Start_Receive_IT+0xa4>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	227f      	movs	r2, #127	; 0x7f
 80053bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053c0:	e016      	b.n	80053f0 <UART_Start_Receive_IT+0xa4>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ca:	d10d      	bne.n	80053e8 <UART_Start_Receive_IT+0x9c>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <UART_Start_Receive_IT+0x92>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	227f      	movs	r2, #127	; 0x7f
 80053d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053dc:	e008      	b.n	80053f0 <UART_Start_Receive_IT+0xa4>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	223f      	movs	r2, #63	; 0x3f
 80053e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053e6:	e003      	b.n	80053f0 <UART_Start_Receive_IT+0xa4>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2222      	movs	r2, #34	; 0x22
 80053fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3308      	adds	r3, #8
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	657b      	str	r3, [r7, #84]	; 0x54
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005420:	64ba      	str	r2, [r7, #72]	; 0x48
 8005422:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800542e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e5      	bne.n	8005400 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543c:	d107      	bne.n	800544e <UART_Start_Receive_IT+0x102>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <UART_Start_Receive_IT+0x184>)
 800544a:	669a      	str	r2, [r3, #104]	; 0x68
 800544c:	e002      	b.n	8005454 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a20      	ldr	r2, [pc, #128]	; (80054d4 <UART_Start_Receive_IT+0x188>)
 8005452:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d019      	beq.n	8005490 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
 800547c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e6      	bne.n	800545c <UART_Start_Receive_IT+0x110>
 800548e:	e018      	b.n	80054c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	613b      	str	r3, [r7, #16]
   return(result);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f043 0320 	orr.w	r3, r3, #32
 80054a4:	653b      	str	r3, [r7, #80]	; 0x50
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ae:	623b      	str	r3, [r7, #32]
 80054b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	69f9      	ldr	r1, [r7, #28]
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e6      	bne.n	8005490 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	375c      	adds	r7, #92	; 0x5c
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	08005787 	.word	0x08005787
 80054d4:	08005621 	.word	0x08005621

080054d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b095      	sub	sp, #84	; 0x54
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005500:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e6      	bne.n	80054e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3308      	adds	r3, #8
 8005518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	61fb      	str	r3, [r7, #28]
   return(result);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	64bb      	str	r3, [r7, #72]	; 0x48
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3308      	adds	r3, #8
 8005530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554a:	2b01      	cmp	r3, #1
 800554c:	d118      	bne.n	8005580 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	e853 3f00 	ldrex	r3, [r3]
 800555a:	60bb      	str	r3, [r7, #8]
   return(result);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f023 0310 	bic.w	r3, r3, #16
 8005562:	647b      	str	r3, [r7, #68]	; 0x44
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6979      	ldr	r1, [r7, #20]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	613b      	str	r3, [r7, #16]
   return(result);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e6      	bne.n	800554e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005594:	bf00      	nop
 8005596:	3754      	adds	r7, #84	; 0x54
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff fa8a 	bl	8004ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6979      	ldr	r1, [r7, #20]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fa56 	bl	8004ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005618:	bf00      	nop
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b096      	sub	sp, #88	; 0x58
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800562e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005638:	2b22      	cmp	r3, #34	; 0x22
 800563a:	f040 8098 	bne.w	800576e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005648:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800564c:	b2d9      	uxtb	r1, r3
 800564e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005652:	b2da      	uxtb	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005658:	400a      	ands	r2, r1
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d17b      	bne.n	800577e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800569a:	653b      	str	r3, [r7, #80]	; 0x50
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a4:	647b      	str	r3, [r7, #68]	; 0x44
 80056a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e6      	bne.n	8005686 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3308      	adds	r3, #8
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	623b      	str	r3, [r7, #32]
   return(result);
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056d8:	633a      	str	r2, [r7, #48]	; 0x30
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e5      	bne.n	80056b8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005704:	2b01      	cmp	r3, #1
 8005706:	d12e      	bne.n	8005766 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	60fb      	str	r3, [r7, #12]
   return(result);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0310 	bic.w	r3, r3, #16
 8005722:	64bb      	str	r3, [r7, #72]	; 0x48
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	617b      	str	r3, [r7, #20]
   return(result);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e6      	bne.n	800570e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b10      	cmp	r3, #16
 800574c:	d103      	bne.n	8005756 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2210      	movs	r2, #16
 8005754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff f9c4 	bl	8004aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005764:	e00b      	b.n	800577e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fc f8ea 	bl	8001940 <HAL_UART_RxCpltCallback>
}
 800576c:	e007      	b.n	800577e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0208 	orr.w	r2, r2, #8
 800577c:	619a      	str	r2, [r3, #24]
}
 800577e:	bf00      	nop
 8005780:	3758      	adds	r7, #88	; 0x58
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b096      	sub	sp, #88	; 0x58
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005794:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579e:	2b22      	cmp	r3, #34	; 0x22
 80057a0:	f040 8098 	bne.w	80058d4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80057b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80057b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057bc:	4013      	ands	r3, r2
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	1c9a      	adds	r2, r3, #2
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d17b      	bne.n	80058e4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005800:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580a:	643b      	str	r3, [r7, #64]	; 0x40
 800580c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e6      	bne.n	80057ec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3308      	adds	r3, #8
 8005824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	61fb      	str	r3, [r7, #28]
   return(result);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	64bb      	str	r3, [r7, #72]	; 0x48
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3308      	adds	r3, #8
 800583c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800583e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e5      	bne.n	800581e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586a:	2b01      	cmp	r3, #1
 800586c:	d12e      	bne.n	80058cc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	60bb      	str	r3, [r7, #8]
   return(result);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f023 0310 	bic.w	r3, r3, #16
 8005888:	647b      	str	r3, [r7, #68]	; 0x44
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6979      	ldr	r1, [r7, #20]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	613b      	str	r3, [r7, #16]
   return(result);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e6      	bne.n	8005874 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d103      	bne.n	80058bc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2210      	movs	r2, #16
 80058ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff f911 	bl	8004aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ca:	e00b      	b.n	80058e4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fc f837 	bl	8001940 <HAL_UART_RxCpltCallback>
}
 80058d2:	e007      	b.n	80058e4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0208 	orr.w	r2, r2, #8
 80058e2:	619a      	str	r2, [r3, #24]
}
 80058e4:	bf00      	nop
 80058e6:	3758      	adds	r7, #88	; 0x58
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058ec:	b084      	sub	sp, #16
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	f107 001c 	add.w	r0, r7, #28
 80058fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2b01      	cmp	r3, #1
 8005902:	d120      	bne.n	8005946 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	4b20      	ldr	r3, [pc, #128]	; (8005998 <USB_CoreInit+0xac>)
 8005916:	4013      	ands	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d105      	bne.n	800593a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa96 	bl	8005e6c <USB_CoreReset>
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]
 8005944:	e010      	b.n	8005968 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa8a 	bl	8005e6c <USB_CoreReset>
 8005958:	4603      	mov	r3, r0
 800595a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	2b01      	cmp	r3, #1
 800596c:	d10b      	bne.n	8005986 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f043 0206 	orr.w	r2, r3, #6
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f043 0220 	orr.w	r2, r3, #32
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005992:	b004      	add	sp, #16
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	ffbdffbf 	.word	0xffbdffbf

0800599c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f023 0201 	bic.w	r2, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	460b      	mov	r3, r1
 80059c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d115      	bne.n	8005a0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059ec:	2001      	movs	r0, #1
 80059ee:	f7fc fbe7 	bl	80021c0 <HAL_Delay>
      ms++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fa29 	bl	8005e50 <USB_GetMode>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d01e      	beq.n	8005a42 <USB_SetCurrentMode+0x84>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b31      	cmp	r3, #49	; 0x31
 8005a08:	d9f0      	bls.n	80059ec <USB_SetCurrentMode+0x2e>
 8005a0a:	e01a      	b.n	8005a42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d115      	bne.n	8005a3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f7fc fbce 	bl	80021c0 <HAL_Delay>
      ms++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa10 	bl	8005e50 <USB_GetMode>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <USB_SetCurrentMode+0x84>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b31      	cmp	r3, #49	; 0x31
 8005a3a:	d9f0      	bls.n	8005a1e <USB_SetCurrentMode+0x60>
 8005a3c:	e001      	b.n	8005a42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e005      	b.n	8005a4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b32      	cmp	r3, #50	; 0x32
 8005a46:	d101      	bne.n	8005a4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a58:	b084      	sub	sp, #16
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b086      	sub	sp, #24
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	e009      	b.n	8005a8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	3340      	adds	r3, #64	; 0x40
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	2200      	movs	r2, #0
 8005a84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b0e      	cmp	r3, #14
 8005a90:	d9f2      	bls.n	8005a78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d11c      	bne.n	8005ad2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aa6:	f043 0302 	orr.w	r3, r3, #2
 8005aaa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	e005      	b.n	8005ade <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af0:	4619      	mov	r1, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af8:	461a      	mov	r2, r3
 8005afa:	680b      	ldr	r3, [r1, #0]
 8005afc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d10c      	bne.n	8005b1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f965 	bl	8005ddc <USB_SetDevSpeed>
 8005b12:	e008      	b.n	8005b26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b14:	2101      	movs	r1, #1
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f960 	bl	8005ddc <USB_SetDevSpeed>
 8005b1c:	e003      	b.n	8005b26 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b1e:	2103      	movs	r1, #3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f95b 	bl	8005ddc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b26:	2110      	movs	r1, #16
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f8f3 	bl	8005d14 <USB_FlushTxFifo>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f91f 	bl	8005d7c <USB_FlushRxFifo>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	461a      	mov	r2, r3
 8005b50:	2300      	movs	r3, #0
 8005b52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	461a      	mov	r2, r3
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	e043      	b.n	8005bfa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b88:	d118      	bne.n	8005bbc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	e013      	b.n	8005bce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e008      	b.n	8005bce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	461a      	mov	r2, r3
 8005bdc:	2300      	movs	r3, #0
 8005bde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	461a      	mov	r2, r3
 8005bee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d3b7      	bcc.n	8005b72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	e043      	b.n	8005c90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c1e:	d118      	bne.n	8005c52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	461a      	mov	r2, r3
 8005c34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	e013      	b.n	8005c64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	e008      	b.n	8005c64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5e:	461a      	mov	r2, r3
 8005c60:	2300      	movs	r3, #0
 8005c62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c70:	461a      	mov	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	461a      	mov	r2, r3
 8005c84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d3b7      	bcc.n	8005c08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005caa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005cb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f043 0210 	orr.w	r2, r3, #16
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <USB_DevInit+0x2b4>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f043 0208 	orr.w	r2, r3, #8
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d105      	bne.n	8005cfc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <USB_DevInit+0x2b8>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d08:	b004      	add	sp, #16
 8005d0a:	4770      	bx	lr
 8005d0c:	803c3800 	.word	0x803c3800
 8005d10:	40000004 	.word	0x40000004

08005d14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <USB_FlushTxFifo+0x64>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d901      	bls.n	8005d34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e01b      	b.n	8005d6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	daf2      	bge.n	8005d22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	019b      	lsls	r3, r3, #6
 8005d44:	f043 0220 	orr.w	r2, r3, #32
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <USB_FlushTxFifo+0x64>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e006      	b.n	8005d6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d0f0      	beq.n	8005d4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	00030d40 	.word	0x00030d40

08005d7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <USB_FlushRxFifo+0x5c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d901      	bls.n	8005d9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e018      	b.n	8005dcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	daf2      	bge.n	8005d88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2210      	movs	r2, #16
 8005daa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3301      	adds	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a08      	ldr	r2, [pc, #32]	; (8005dd8 <USB_FlushRxFifo+0x5c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e006      	b.n	8005dcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d0f0      	beq.n	8005dac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	00030d40 	.word	0x00030d40

08005ddc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e28:	f023 0303 	bic.w	r3, r3, #3
 8005e2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e3c:	f043 0302 	orr.w	r3, r3, #2
 8005e40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <USB_CoreReset+0x64>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e01b      	b.n	8005ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	daf2      	bge.n	8005e78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f043 0201 	orr.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <USB_CoreReset+0x64>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d901      	bls.n	8005eb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e006      	b.n	8005ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d0f0      	beq.n	8005ea2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	00030d40 	.word	0x00030d40

08005ed4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005ed8:	bf00      	nop
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eea:	f3ef 8305 	mrs	r3, IPSR
 8005eee:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10f      	bne.n	8005f16 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8005efa:	607b      	str	r3, [r7, #4]
  return(result);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d105      	bne.n	8005f0e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f02:	f3ef 8311 	mrs	r3, BASEPRI
 8005f06:	603b      	str	r3, [r7, #0]
  return(result);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <osKernelInitialize+0x3a>
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <osKernelInitialize+0x64>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d103      	bne.n	8005f1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005f16:	f06f 0305 	mvn.w	r3, #5
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e00c      	b.n	8005f38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <osKernelInitialize+0x64>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d105      	bne.n	8005f32 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f26:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <osKernelInitialize+0x64>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e002      	b.n	8005f38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005f38:	68fb      	ldr	r3, [r7, #12]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000bac 	.word	0x20000bac

08005f4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f52:	f3ef 8305 	mrs	r3, IPSR
 8005f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10f      	bne.n	8005f7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f62:	607b      	str	r3, [r7, #4]
  return(result);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f6e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <osKernelStart+0x3a>
 8005f76:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <osKernelStart+0x68>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d103      	bne.n	8005f86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005f7e:	f06f 0305 	mvn.w	r3, #5
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e010      	b.n	8005fa8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <osKernelStart+0x68>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d109      	bne.n	8005fa2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f8e:	f7ff ffa1 	bl	8005ed4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <osKernelStart+0x68>)
 8005f94:	2202      	movs	r2, #2
 8005f96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f98:	f001 f9f2 	bl	8007380 <vTaskStartScheduler>
      stat = osOK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e002      	b.n	8005fa8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000bac 	.word	0x20000bac

08005fb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b090      	sub	sp, #64	; 0x40
 8005fbc:	af04      	add	r7, sp, #16
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fc8:	f3ef 8305 	mrs	r3, IPSR
 8005fcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fce:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 808f 	bne.w	80060f4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fda:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d105      	bne.n	8005fee <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe6:	617b      	str	r3, [r7, #20]
  return(result);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <osThreadNew+0x3e>
 8005fee:	4b44      	ldr	r3, [pc, #272]	; (8006100 <osThreadNew+0x148>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d07e      	beq.n	80060f4 <osThreadNew+0x13c>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d07b      	beq.n	80060f4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005ffc:	2380      	movs	r3, #128	; 0x80
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006000:	2318      	movs	r3, #24
 8006002:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006004:	2300      	movs	r3, #0
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006008:	f04f 33ff 	mov.w	r3, #4294967295
 800600c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d045      	beq.n	80060a0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <osThreadNew+0x6a>
        name = attr->name;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <osThreadNew+0x90>
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	2b38      	cmp	r3, #56	; 0x38
 800603a:	d805      	bhi.n	8006048 <osThreadNew+0x90>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <osThreadNew+0x94>
        return (NULL);
 8006048:	2300      	movs	r3, #0
 800604a:	e054      	b.n	80060f6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	089b      	lsrs	r3, r3, #2
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00e      	beq.n	8006082 <osThreadNew+0xca>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2bbb      	cmp	r3, #187	; 0xbb
 800606a:	d90a      	bls.n	8006082 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006070:	2b00      	cmp	r3, #0
 8006072:	d006      	beq.n	8006082 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <osThreadNew+0xca>
        mem = 1;
 800607c:	2301      	movs	r3, #1
 800607e:	623b      	str	r3, [r7, #32]
 8006080:	e010      	b.n	80060a4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10c      	bne.n	80060a4 <osThreadNew+0xec>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d108      	bne.n	80060a4 <osThreadNew+0xec>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d104      	bne.n	80060a4 <osThreadNew+0xec>
          mem = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	e001      	b.n	80060a4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d110      	bne.n	80060cc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060b2:	9202      	str	r2, [sp, #8]
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 ff67 	bl	8006f94 <xTaskCreateStatic>
 80060c6:	4603      	mov	r3, r0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	e013      	b.n	80060f4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d110      	bne.n	80060f4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	f107 0310 	add.w	r3, r7, #16
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 ffb8 	bl	800705a <xTaskCreate>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d001      	beq.n	80060f4 <osThreadNew+0x13c>
          hTask = NULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060f4:	693b      	ldr	r3, [r7, #16]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3730      	adds	r7, #48	; 0x30
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000bac 	.word	0x20000bac

08006104 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610c:	f3ef 8305 	mrs	r3, IPSR
 8006110:	613b      	str	r3, [r7, #16]
  return(result);
 8006112:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006118:	f3ef 8310 	mrs	r3, PRIMASK
 800611c:	60fb      	str	r3, [r7, #12]
  return(result);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006124:	f3ef 8311 	mrs	r3, BASEPRI
 8006128:	60bb      	str	r3, [r7, #8]
  return(result);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d007      	beq.n	8006140 <osDelay+0x3c>
 8006130:	4b0a      	ldr	r3, [pc, #40]	; (800615c <osDelay+0x58>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d103      	bne.n	8006140 <osDelay+0x3c>
    stat = osErrorISR;
 8006138:	f06f 0305 	mvn.w	r3, #5
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	e007      	b.n	8006150 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <osDelay+0x4c>
      vTaskDelay(ticks);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 f8e2 	bl	8007314 <vTaskDelay>
    }
  }

  return (stat);
 8006150:	697b      	ldr	r3, [r7, #20]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000bac 	.word	0x20000bac

08006160 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006168:	2300      	movs	r3, #0
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800616c:	f3ef 8305 	mrs	r3, IPSR
 8006170:	613b      	str	r3, [r7, #16]
  return(result);
 8006172:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 8085 	bne.w	8006284 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617a:	f3ef 8310 	mrs	r3, PRIMASK
 800617e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d105      	bne.n	8006192 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006186:	f3ef 8311 	mrs	r3, BASEPRI
 800618a:	60bb      	str	r3, [r7, #8]
  return(result);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <osMutexNew+0x3a>
 8006192:	4b3f      	ldr	r3, [pc, #252]	; (8006290 <osMutexNew+0x130>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d074      	beq.n	8006284 <osMutexNew+0x124>
    if (attr != NULL) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <osMutexNew+0x48>
      type = attr->attr_bits;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	623b      	str	r3, [r7, #32]
 80061a6:	e001      	b.n	80061ac <osMutexNew+0x4c>
    } else {
      type = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <osMutexNew+0x5c>
      rmtx = 1U;
 80061b6:	2301      	movs	r3, #1
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	e001      	b.n	80061c0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d15c      	bne.n	8006284 <osMutexNew+0x124>
      mem = -1;
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295
 80061ce:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d015      	beq.n	8006202 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d006      	beq.n	80061ec <osMutexNew+0x8c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b4f      	cmp	r3, #79	; 0x4f
 80061e4:	d902      	bls.n	80061ec <osMutexNew+0x8c>
          mem = 1;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e00c      	b.n	8006206 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d108      	bne.n	8006206 <osMutexNew+0xa6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d104      	bne.n	8006206 <osMutexNew+0xa6>
            mem = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	e001      	b.n	8006206 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d112      	bne.n	8006232 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	4619      	mov	r1, r3
 8006218:	2004      	movs	r0, #4
 800621a:	f000 faa6 	bl	800676a <xQueueCreateMutexStatic>
 800621e:	6278      	str	r0, [r7, #36]	; 0x24
 8006220:	e016      	b.n	8006250 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	4619      	mov	r1, r3
 8006228:	2001      	movs	r0, #1
 800622a:	f000 fa9e 	bl	800676a <xQueueCreateMutexStatic>
 800622e:	6278      	str	r0, [r7, #36]	; 0x24
 8006230:	e00e      	b.n	8006250 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10b      	bne.n	8006250 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800623e:	2004      	movs	r0, #4
 8006240:	f000 fa7b 	bl	800673a <xQueueCreateMutex>
 8006244:	6278      	str	r0, [r7, #36]	; 0x24
 8006246:	e003      	b.n	8006250 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006248:	2001      	movs	r0, #1
 800624a:	f000 fa76 	bl	800673a <xQueueCreateMutex>
 800624e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <osMutexNew+0x110>
        if (attr != NULL) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <osMutexNew+0x104>
          name = attr->name;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e001      	b.n	8006268 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006268:	6979      	ldr	r1, [r7, #20]
 800626a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800626c:	f000 fe34 	bl	8006ed8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	d006      	beq.n	8006284 <osMutexNew+0x124>
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006286:	4618      	mov	r0, r3
 8006288:	3728      	adds	r7, #40	; 0x28
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000bac 	.word	0x20000bac

08006294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a07      	ldr	r2, [pc, #28]	; (80062c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80062a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4a06      	ldr	r2, [pc, #24]	; (80062c4 <vApplicationGetIdleTaskMemory+0x30>)
 80062aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2280      	movs	r2, #128	; 0x80
 80062b0:	601a      	str	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000bb0 	.word	0x20000bb0
 80062c4:	20000c6c 	.word	0x20000c6c

080062c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4a07      	ldr	r2, [pc, #28]	; (80062f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80062d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4a06      	ldr	r2, [pc, #24]	; (80062f8 <vApplicationGetTimerTaskMemory+0x30>)
 80062de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062e6:	601a      	str	r2, [r3, #0]
}
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	20000e6c 	.word	0x20000e6c
 80062f8:	20000f28 	.word	0x20000f28

080062fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f103 0208 	add.w	r2, r3, #8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f04f 32ff 	mov.w	r2, #4294967295
 8006314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f103 0208 	add.w	r2, r3, #8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f103 0208 	add.w	r2, r3, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
}
 8006392:	bf00      	nop
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d103      	bne.n	80063be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e00c      	b.n	80063d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3308      	adds	r3, #8
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e002      	b.n	80063cc <vListInsert+0x2e>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d2f6      	bcs.n	80063c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6892      	ldr	r2, [r2, #8]
 8006426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6852      	ldr	r2, [r2, #4]
 8006430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	429a      	cmp	r2, r3
 800643a:	d103      	bne.n	8006444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	1e5a      	subs	r2, r3, #1
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10c      	bne.n	8006492 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	b672      	cpsid	i
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	b662      	cpsie	i
 800648c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006492:	f002 f933 	bl	80086fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	441a      	add	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c2:	3b01      	subs	r3, #1
 80064c4:	68f9      	ldr	r1, [r7, #12]
 80064c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	441a      	add	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	22ff      	movs	r2, #255	; 0xff
 80064de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d114      	bne.n	8006512 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01a      	beq.n	8006526 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3310      	adds	r3, #16
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 f9eb 	bl	80078d0 <xTaskRemoveFromEventList>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d012      	beq.n	8006526 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <xQueueGenericReset+0xd0>)
 8006502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	e009      	b.n	8006526 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3310      	adds	r3, #16
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fef0 	bl	80062fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff feeb 	bl	80062fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006526:	f002 f91d 	bl	8008764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800652a:	2301      	movs	r3, #1
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08e      	sub	sp, #56	; 0x38
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10c      	bne.n	8006566 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	b672      	cpsid	i
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	b662      	cpsie	i
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10c      	bne.n	8006586 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	b672      	cpsid	i
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	b662      	cpsie	i
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <xQueueGenericCreateStatic+0x5a>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <xQueueGenericCreateStatic+0x5e>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <xQueueGenericCreateStatic+0x60>
 8006596:	2300      	movs	r3, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10c      	bne.n	80065b6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	b672      	cpsid	i
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	b662      	cpsie	i
 80065b0:	623b      	str	r3, [r7, #32]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <xQueueGenericCreateStatic+0x8a>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <xQueueGenericCreateStatic+0x8e>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueGenericCreateStatic+0x90>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10c      	bne.n	80065e6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	b672      	cpsid	i
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	b662      	cpsie	i
 80065e0:	61fb      	str	r3, [r7, #28]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065e6:	2350      	movs	r3, #80	; 0x50
 80065e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b50      	cmp	r3, #80	; 0x50
 80065ee:	d00c      	beq.n	800660a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	b672      	cpsid	i
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	b662      	cpsie	i
 8006604:	61bb      	str	r3, [r7, #24]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800660a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800661e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	4613      	mov	r3, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f847 	bl	80066c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006634:	4618      	mov	r0, r3
 8006636:	3730      	adds	r7, #48	; 0x30
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10c      	bne.n	800666a <xQueueGenericCreate+0x2e>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	b672      	cpsid	i
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	b662      	cpsie	i
 8006664:	613b      	str	r3, [r7, #16]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006670:	2300      	movs	r3, #0
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e004      	b.n	8006680 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	3350      	adds	r3, #80	; 0x50
 8006684:	4618      	mov	r0, r3
 8006686:	f002 f965 	bl	8008954 <pvPortMalloc>
 800668a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d011      	beq.n	80066b6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	3350      	adds	r3, #80	; 0x50
 800669a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066a4:	79fa      	ldrb	r2, [r7, #7]
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	4613      	mov	r3, r2
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f805 	bl	80066c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066b6:	69bb      	ldr	r3, [r7, #24]
	}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3720      	adds	r7, #32
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d103      	bne.n	80066dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	e002      	b.n	80066e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066ee:	2101      	movs	r1, #1
 80066f0:	69b8      	ldr	r0, [r7, #24]
 80066f2:	f7ff feb7 	bl	8006464 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00e      	beq.n	8006732 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006726:	2300      	movs	r3, #0
 8006728:	2200      	movs	r2, #0
 800672a:	2100      	movs	r1, #0
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f837 	bl	80067a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006732:	bf00      	nop
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800673a:	b580      	push	{r7, lr}
 800673c:	b086      	sub	sp, #24
 800673e:	af00      	add	r7, sp, #0
 8006740:	4603      	mov	r3, r0
 8006742:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006744:	2301      	movs	r3, #1
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	2300      	movs	r3, #0
 800674a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	461a      	mov	r2, r3
 8006750:	6939      	ldr	r1, [r7, #16]
 8006752:	6978      	ldr	r0, [r7, #20]
 8006754:	f7ff ff72 	bl	800663c <xQueueGenericCreate>
 8006758:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff ffd3 	bl	8006706 <prvInitialiseMutex>

		return xNewQueue;
 8006760:	68fb      	ldr	r3, [r7, #12]
	}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af02      	add	r7, sp, #8
 8006770:	4603      	mov	r3, r0
 8006772:	6039      	str	r1, [r7, #0]
 8006774:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006776:	2301      	movs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	2300      	movs	r3, #0
 800677c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2200      	movs	r2, #0
 8006786:	6939      	ldr	r1, [r7, #16]
 8006788:	6978      	ldr	r0, [r7, #20]
 800678a:	f7ff fed5 	bl	8006538 <xQueueGenericCreateStatic>
 800678e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff ffb8 	bl	8006706 <prvInitialiseMutex>

		return xNewQueue;
 8006796:	68fb      	ldr	r3, [r7, #12]
	}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08e      	sub	sp, #56	; 0x38
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067ae:	2300      	movs	r3, #0
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10c      	bne.n	80067d6 <xQueueGenericSend+0x36>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	b672      	cpsid	i
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	b662      	cpsie	i
 80067d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d103      	bne.n	80067e4 <xQueueGenericSend+0x44>
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <xQueueGenericSend+0x48>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <xQueueGenericSend+0x4a>
 80067e8:	2300      	movs	r3, #0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10c      	bne.n	8006808 <xQueueGenericSend+0x68>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	b672      	cpsid	i
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	b662      	cpsie	i
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d103      	bne.n	8006816 <xQueueGenericSend+0x76>
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	2b01      	cmp	r3, #1
 8006814:	d101      	bne.n	800681a <xQueueGenericSend+0x7a>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <xQueueGenericSend+0x7c>
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10c      	bne.n	800683a <xQueueGenericSend+0x9a>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	b672      	cpsid	i
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	b662      	cpsie	i
 8006834:	623b      	str	r3, [r7, #32]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800683a:	f001 fa13 	bl	8007c64 <xTaskGetSchedulerState>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d102      	bne.n	800684a <xQueueGenericSend+0xaa>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <xQueueGenericSend+0xae>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <xQueueGenericSend+0xb0>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10c      	bne.n	800686e <xQueueGenericSend+0xce>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	b672      	cpsid	i
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	b662      	cpsie	i
 8006868:	61fb      	str	r3, [r7, #28]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800686e:	f001 ff45 	bl	80086fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <xQueueGenericSend+0xe4>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d129      	bne.n	80068d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	68b9      	ldr	r1, [r7, #8]
 8006888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800688a:	f000 fa15 	bl	8006cb8 <prvCopyDataToQueue>
 800688e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	2b00      	cmp	r3, #0
 8006896:	d010      	beq.n	80068ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	3324      	adds	r3, #36	; 0x24
 800689c:	4618      	mov	r0, r3
 800689e:	f001 f817 	bl	80078d0 <xTaskRemoveFromEventList>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d013      	beq.n	80068d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068a8:	4b3f      	ldr	r3, [pc, #252]	; (80069a8 <xQueueGenericSend+0x208>)
 80068aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	e00a      	b.n	80068d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068c0:	4b39      	ldr	r3, [pc, #228]	; (80069a8 <xQueueGenericSend+0x208>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068d0:	f001 ff48 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e063      	b.n	80069a0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d103      	bne.n	80068e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068de:	f001 ff41 	bl	8008764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e05c      	b.n	80069a0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068ec:	f107 0314 	add.w	r3, r7, #20
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 f853 	bl	800799c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068f6:	2301      	movs	r3, #1
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068fa:	f001 ff33 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068fe:	f000 fdb3 	bl	8007468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006902:	f001 fefb 	bl	80086fc <vPortEnterCritical>
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800690c:	b25b      	sxtb	r3, r3
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d103      	bne.n	800691c <xQueueGenericSend+0x17c>
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006922:	b25b      	sxtb	r3, r3
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d103      	bne.n	8006932 <xQueueGenericSend+0x192>
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006932:	f001 ff17 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006936:	1d3a      	adds	r2, r7, #4
 8006938:	f107 0314 	add.w	r3, r7, #20
 800693c:	4611      	mov	r1, r2
 800693e:	4618      	mov	r0, r3
 8006940:	f001 f842 	bl	80079c8 <xTaskCheckForTimeOut>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d124      	bne.n	8006994 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800694a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800694c:	f000 faac 	bl	8006ea8 <prvIsQueueFull>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d018      	beq.n	8006988 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	3310      	adds	r3, #16
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4611      	mov	r1, r2
 800695e:	4618      	mov	r0, r3
 8006960:	f000 ff62 	bl	8007828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006966:	f000 fa37 	bl	8006dd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800696a:	f000 fd8b 	bl	8007484 <xTaskResumeAll>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	f47f af7c 	bne.w	800686e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <xQueueGenericSend+0x208>)
 8006978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	e772      	b.n	800686e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800698a:	f000 fa25 	bl	8006dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800698e:	f000 fd79 	bl	8007484 <xTaskResumeAll>
 8006992:	e76c      	b.n	800686e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006996:	f000 fa1f 	bl	8006dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800699a:	f000 fd73 	bl	8007484 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800699e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3738      	adds	r7, #56	; 0x38
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08e      	sub	sp, #56	; 0x38
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10c      	bne.n	80069de <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	b672      	cpsid	i
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	b662      	cpsie	i
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d103      	bne.n	80069ec <xQueueGenericSendFromISR+0x40>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <xQueueGenericSendFromISR+0x44>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <xQueueGenericSendFromISR+0x46>
 80069f0:	2300      	movs	r3, #0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10c      	bne.n	8006a10 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	b672      	cpsid	i
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	b662      	cpsie	i
 8006a0a:	623b      	str	r3, [r7, #32]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d103      	bne.n	8006a1e <xQueueGenericSendFromISR+0x72>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <xQueueGenericSendFromISR+0x76>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <xQueueGenericSendFromISR+0x78>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10c      	bne.n	8006a42 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	b672      	cpsid	i
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	b662      	cpsie	i
 8006a3c:	61fb      	str	r3, [r7, #28]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a42:	f001 ff43 	bl	80088cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a46:	f3ef 8211 	mrs	r2, BASEPRI
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	b672      	cpsid	i
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	b662      	cpsie	i
 8006a5e:	61ba      	str	r2, [r7, #24]
 8006a60:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a62:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d302      	bcc.n	8006a78 <xQueueGenericSendFromISR+0xcc>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d12c      	bne.n	8006ad2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a88:	f000 f916 	bl	8006cb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d112      	bne.n	8006abc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d016      	beq.n	8006acc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	3324      	adds	r3, #36	; 0x24
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 ff14 	bl	80078d0 <xTaskRemoveFromEventList>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e007      	b.n	8006acc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006abc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	b25a      	sxtb	r2, r3
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ad0:	e001      	b.n	8006ad6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ae0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3738      	adds	r7, #56	; 0x38
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006af8:	2300      	movs	r3, #0
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10c      	bne.n	8006b20 <xQueueReceive+0x34>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	b672      	cpsid	i
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	b662      	cpsie	i
 8006b1a:	623b      	str	r3, [r7, #32]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <xQueueReceive+0x42>
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <xQueueReceive+0x46>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <xQueueReceive+0x48>
 8006b32:	2300      	movs	r3, #0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10c      	bne.n	8006b52 <xQueueReceive+0x66>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	b672      	cpsid	i
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	b662      	cpsie	i
 8006b4c:	61fb      	str	r3, [r7, #28]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b52:	f001 f887 	bl	8007c64 <xTaskGetSchedulerState>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <xQueueReceive+0x76>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <xQueueReceive+0x7a>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <xQueueReceive+0x7c>
 8006b66:	2300      	movs	r3, #0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10c      	bne.n	8006b86 <xQueueReceive+0x9a>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	b672      	cpsid	i
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	b662      	cpsie	i
 8006b80:	61bb      	str	r3, [r7, #24]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b86:	f001 fdb9 	bl	80086fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01f      	beq.n	8006bd6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b9a:	f000 f8f7 	bl	8006d8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	1e5a      	subs	r2, r3, #1
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00f      	beq.n	8006bce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	3310      	adds	r3, #16
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fe8c 	bl	80078d0 <xTaskRemoveFromEventList>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bbe:	4b3d      	ldr	r3, [pc, #244]	; (8006cb4 <xQueueReceive+0x1c8>)
 8006bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bce:	f001 fdc9 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e069      	b.n	8006caa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d103      	bne.n	8006be4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bdc:	f001 fdc2 	bl	8008764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006be0:	2300      	movs	r3, #0
 8006be2:	e062      	b.n	8006caa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bea:	f107 0310 	add.w	r3, r7, #16
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fed4 	bl	800799c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bf8:	f001 fdb4 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bfc:	f000 fc34 	bl	8007468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c00:	f001 fd7c 	bl	80086fc <vPortEnterCritical>
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c0a:	b25b      	sxtb	r3, r3
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d103      	bne.n	8006c1a <xQueueReceive+0x12e>
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c20:	b25b      	sxtb	r3, r3
 8006c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c26:	d103      	bne.n	8006c30 <xQueueReceive+0x144>
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c30:	f001 fd98 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c34:	1d3a      	adds	r2, r7, #4
 8006c36:	f107 0310 	add.w	r3, r7, #16
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fec3 	bl	80079c8 <xTaskCheckForTimeOut>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d123      	bne.n	8006c90 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c4a:	f000 f917 	bl	8006e7c <prvIsQueueEmpty>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d017      	beq.n	8006c84 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	3324      	adds	r3, #36	; 0x24
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fde3 	bl	8007828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c64:	f000 f8b8 	bl	8006dd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c68:	f000 fc0c 	bl	8007484 <xTaskResumeAll>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d189      	bne.n	8006b86 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <xQueueReceive+0x1c8>)
 8006c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	e780      	b.n	8006b86 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c86:	f000 f8a7 	bl	8006dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c8a:	f000 fbfb 	bl	8007484 <xTaskResumeAll>
 8006c8e:	e77a      	b.n	8006b86 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c92:	f000 f8a1 	bl	8006dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c96:	f000 fbf5 	bl	8007484 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9c:	f000 f8ee 	bl	8006e7c <prvIsQueueEmpty>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f43f af6f 	beq.w	8006b86 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ca8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3730      	adds	r7, #48	; 0x30
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	e000ed04 	.word	0xe000ed04

08006cb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10d      	bne.n	8006cf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d14d      	bne.n	8006d7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 ffdc 	bl	8007ca0 <xTaskPriorityDisinherit>
 8006ce8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	e043      	b.n	8006d7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d119      	bne.n	8006d2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6858      	ldr	r0, [r3, #4]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	461a      	mov	r2, r3
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	f002 f92d 	bl	8008f62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	441a      	add	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d32b      	bcc.n	8006d7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	605a      	str	r2, [r3, #4]
 8006d2a:	e026      	b.n	8006d7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68d8      	ldr	r0, [r3, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	461a      	mov	r2, r3
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	f002 f913 	bl	8008f62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	425b      	negs	r3, r3
 8006d46:	441a      	add	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d207      	bcs.n	8006d68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	425b      	negs	r3, r3
 8006d62:	441a      	add	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d105      	bne.n	8006d7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d82:	697b      	ldr	r3, [r7, #20]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d018      	beq.n	8006dd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	441a      	add	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d303      	bcc.n	8006dc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68d9      	ldr	r1, [r3, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6838      	ldr	r0, [r7, #0]
 8006dcc:	f002 f8c9 	bl	8008f62 <memcpy>
	}
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006de0:	f001 fc8c 	bl	80086fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dec:	e011      	b.n	8006e12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d012      	beq.n	8006e1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3324      	adds	r3, #36	; 0x24
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fd68 	bl	80078d0 <xTaskRemoveFromEventList>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e06:	f000 fe45 	bl	8007a94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	dce9      	bgt.n	8006dee <prvUnlockQueue+0x16>
 8006e1a:	e000      	b.n	8006e1e <prvUnlockQueue+0x46>
					break;
 8006e1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	22ff      	movs	r2, #255	; 0xff
 8006e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e26:	f001 fc9d 	bl	8008764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e2a:	f001 fc67 	bl	80086fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e36:	e011      	b.n	8006e5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d012      	beq.n	8006e66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3310      	adds	r3, #16
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fd43 	bl	80078d0 <xTaskRemoveFromEventList>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e50:	f000 fe20 	bl	8007a94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dce9      	bgt.n	8006e38 <prvUnlockQueue+0x60>
 8006e64:	e000      	b.n	8006e68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	22ff      	movs	r2, #255	; 0xff
 8006e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e70:	f001 fc78 	bl	8008764 <vPortExitCritical>
}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e84:	f001 fc3a 	bl	80086fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	e001      	b.n	8006e9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e9a:	f001 fc63 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eb0:	f001 fc24 	bl	80086fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d102      	bne.n	8006ec6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e001      	b.n	8006eca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eca:	f001 fc4b 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	e014      	b.n	8006f12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ee8:	4a0f      	ldr	r2, [pc, #60]	; (8006f28 <vQueueAddToRegistry+0x50>)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10b      	bne.n	8006f0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ef4:	490c      	ldr	r1, [pc, #48]	; (8006f28 <vQueueAddToRegistry+0x50>)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006efe:	4a0a      	ldr	r2, [pc, #40]	; (8006f28 <vQueueAddToRegistry+0x50>)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	4413      	add	r3, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f0a:	e006      	b.n	8006f1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b07      	cmp	r3, #7
 8006f16:	d9e7      	bls.n	8006ee8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	20001328 	.word	0x20001328

08006f2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f3c:	f001 fbde 	bl	80086fc <vPortEnterCritical>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f46:	b25b      	sxtb	r3, r3
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d103      	bne.n	8006f56 <vQueueWaitForMessageRestricted+0x2a>
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f5c:	b25b      	sxtb	r3, r3
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f62:	d103      	bne.n	8006f6c <vQueueWaitForMessageRestricted+0x40>
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f6c:	f001 fbfa 	bl	8008764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	3324      	adds	r3, #36	; 0x24
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fc77 	bl	8007874 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f86:	6978      	ldr	r0, [r7, #20]
 8006f88:	f7ff ff26 	bl	8006dd8 <prvUnlockQueue>
	}
 8006f8c:	bf00      	nop
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08e      	sub	sp, #56	; 0x38
 8006f98:	af04      	add	r7, sp, #16
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10c      	bne.n	8006fc2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	b672      	cpsid	i
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	b662      	cpsie	i
 8006fbc:	623b      	str	r3, [r7, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10c      	bne.n	8006fe2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	b672      	cpsid	i
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	b662      	cpsie	i
 8006fdc:	61fb      	str	r3, [r7, #28]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fe2:	23bc      	movs	r3, #188	; 0xbc
 8006fe4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2bbc      	cmp	r3, #188	; 0xbc
 8006fea:	d00c      	beq.n	8007006 <xTaskCreateStatic+0x72>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	b672      	cpsid	i
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	b662      	cpsie	i
 8007000:	61bb      	str	r3, [r7, #24]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007006:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	2b00      	cmp	r3, #0
 800700c:	d01e      	beq.n	800704c <xTaskCreateStatic+0xb8>
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01b      	beq.n	800704c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800701c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	2202      	movs	r2, #2
 8007022:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007026:	2300      	movs	r3, #0
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	9302      	str	r3, [sp, #8]
 800702e:	f107 0314 	add.w	r3, r7, #20
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f850 	bl	80070e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007046:	f000 f8f5 	bl	8007234 <prvAddNewTaskToReadyList>
 800704a:	e001      	b.n	8007050 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007050:	697b      	ldr	r3, [r7, #20]
	}
 8007052:	4618      	mov	r0, r3
 8007054:	3728      	adds	r7, #40	; 0x28
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800705a:	b580      	push	{r7, lr}
 800705c:	b08c      	sub	sp, #48	; 0x30
 800705e:	af04      	add	r7, sp, #16
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	4613      	mov	r3, r2
 8007068:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800706a:	88fb      	ldrh	r3, [r7, #6]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4618      	mov	r0, r3
 8007070:	f001 fc70 	bl	8008954 <pvPortMalloc>
 8007074:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00e      	beq.n	800709a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800707c:	20bc      	movs	r0, #188	; 0xbc
 800707e:	f001 fc69 	bl	8008954 <pvPortMalloc>
 8007082:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
 8007090:	e005      	b.n	800709e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007092:	6978      	ldr	r0, [r7, #20]
 8007094:	f001 fd28 	bl	8008ae8 <vPortFree>
 8007098:	e001      	b.n	800709e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d017      	beq.n	80070d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070ac:	88fa      	ldrh	r2, [r7, #6]
 80070ae:	2300      	movs	r3, #0
 80070b0:	9303      	str	r3, [sp, #12]
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	9302      	str	r3, [sp, #8]
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f80e 	bl	80070e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070c8:	69f8      	ldr	r0, [r7, #28]
 80070ca:	f000 f8b3 	bl	8007234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070ce:	2301      	movs	r3, #1
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	e002      	b.n	80070da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070d4:	f04f 33ff 	mov.w	r3, #4294967295
 80070d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070da:	69bb      	ldr	r3, [r7, #24]
	}
 80070dc:	4618      	mov	r0, r3
 80070de:	3720      	adds	r7, #32
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	461a      	mov	r2, r3
 80070fc:	21a5      	movs	r1, #165	; 0xa5
 80070fe:	f001 ff3e 	bl	8008f7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800710c:	440b      	add	r3, r1
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f023 0307 	bic.w	r3, r3, #7
 800711a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	b672      	cpsid	i
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	b662      	cpsie	i
 800713a:	617b      	str	r3, [r7, #20]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01f      	beq.n	8007186 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007146:	2300      	movs	r3, #0
 8007148:	61fb      	str	r3, [r7, #28]
 800714a:	e012      	b.n	8007172 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4413      	add	r3, r2
 8007152:	7819      	ldrb	r1, [r3, #0]
 8007154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	3334      	adds	r3, #52	; 0x34
 800715c:	460a      	mov	r2, r1
 800715e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	4413      	add	r3, r2
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d006      	beq.n	800717a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3301      	adds	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b0f      	cmp	r3, #15
 8007176:	d9e9      	bls.n	800714c <prvInitialiseNewTask+0x68>
 8007178:	e000      	b.n	800717c <prvInitialiseNewTask+0x98>
			{
				break;
 800717a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007184:	e003      	b.n	800718e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	2b37      	cmp	r3, #55	; 0x37
 8007192:	d901      	bls.n	8007198 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007194:	2337      	movs	r3, #55	; 0x37
 8007196:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800719c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	2200      	movs	r2, #0
 80071a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	3304      	adds	r3, #4
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff f8c4 	bl	800633c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	3318      	adds	r3, #24
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff f8bf 	bl	800633c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	3354      	adds	r3, #84	; 0x54
 80071e8:	2260      	movs	r2, #96	; 0x60
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 fec6 	bl	8008f7e <memset>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	4a0c      	ldr	r2, [pc, #48]	; (8007228 <prvInitialiseNewTask+0x144>)
 80071f6:	659a      	str	r2, [r3, #88]	; 0x58
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	4a0c      	ldr	r2, [pc, #48]	; (800722c <prvInitialiseNewTask+0x148>)
 80071fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	4a0b      	ldr	r2, [pc, #44]	; (8007230 <prvInitialiseNewTask+0x14c>)
 8007202:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	69b8      	ldr	r0, [r7, #24]
 800720a:	f001 f96b 	bl	80084e4 <pxPortInitialiseStack>
 800720e:	4602      	mov	r2, r0
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007220:	bf00      	nop
 8007222:	3720      	adds	r7, #32
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	0800bcbc 	.word	0x0800bcbc
 800722c:	0800bcdc 	.word	0x0800bcdc
 8007230:	0800bc9c 	.word	0x0800bc9c

08007234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800723c:	f001 fa5e 	bl	80086fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007240:	4b2d      	ldr	r3, [pc, #180]	; (80072f8 <prvAddNewTaskToReadyList+0xc4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	4a2c      	ldr	r2, [pc, #176]	; (80072f8 <prvAddNewTaskToReadyList+0xc4>)
 8007248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800724a:	4b2c      	ldr	r3, [pc, #176]	; (80072fc <prvAddNewTaskToReadyList+0xc8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d109      	bne.n	8007266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007252:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <prvAddNewTaskToReadyList+0xc8>)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007258:	4b27      	ldr	r3, [pc, #156]	; (80072f8 <prvAddNewTaskToReadyList+0xc4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d110      	bne.n	8007282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007260:	f000 fc3c 	bl	8007adc <prvInitialiseTaskLists>
 8007264:	e00d      	b.n	8007282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007266:	4b26      	ldr	r3, [pc, #152]	; (8007300 <prvAddNewTaskToReadyList+0xcc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800726e:	4b23      	ldr	r3, [pc, #140]	; (80072fc <prvAddNewTaskToReadyList+0xc8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	429a      	cmp	r2, r3
 800727a:	d802      	bhi.n	8007282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800727c:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <prvAddNewTaskToReadyList+0xc8>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007282:	4b20      	ldr	r3, [pc, #128]	; (8007304 <prvAddNewTaskToReadyList+0xd0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3301      	adds	r3, #1
 8007288:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <prvAddNewTaskToReadyList+0xd0>)
 800728a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800728c:	4b1d      	ldr	r3, [pc, #116]	; (8007304 <prvAddNewTaskToReadyList+0xd0>)
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <prvAddNewTaskToReadyList+0xd4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d903      	bls.n	80072a8 <prvAddNewTaskToReadyList+0x74>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	4a18      	ldr	r2, [pc, #96]	; (8007308 <prvAddNewTaskToReadyList+0xd4>)
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4a15      	ldr	r2, [pc, #84]	; (800730c <prvAddNewTaskToReadyList+0xd8>)
 80072b6:	441a      	add	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f7ff f849 	bl	8006356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072c4:	f001 fa4e 	bl	8008764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072c8:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <prvAddNewTaskToReadyList+0xcc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00e      	beq.n	80072ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <prvAddNewTaskToReadyList+0xc8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	429a      	cmp	r2, r3
 80072dc:	d207      	bcs.n	80072ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072de:	4b0c      	ldr	r3, [pc, #48]	; (8007310 <prvAddNewTaskToReadyList+0xdc>)
 80072e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072ee:	bf00      	nop
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	2000183c 	.word	0x2000183c
 80072fc:	20001368 	.word	0x20001368
 8007300:	20001848 	.word	0x20001848
 8007304:	20001858 	.word	0x20001858
 8007308:	20001844 	.word	0x20001844
 800730c:	2000136c 	.word	0x2000136c
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d019      	beq.n	800735a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007326:	4b14      	ldr	r3, [pc, #80]	; (8007378 <vTaskDelay+0x64>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <vTaskDelay+0x34>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	b672      	cpsid	i
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	b662      	cpsie	i
 8007342:	60bb      	str	r3, [r7, #8]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007348:	f000 f88e 	bl	8007468 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800734c:	2100      	movs	r1, #0
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fd18 	bl	8007d84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007354:	f000 f896 	bl	8007484 <xTaskResumeAll>
 8007358:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d107      	bne.n	8007370 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007360:	4b06      	ldr	r3, [pc, #24]	; (800737c <vTaskDelay+0x68>)
 8007362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007370:	bf00      	nop
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20001864 	.word	0x20001864
 800737c:	e000ed04 	.word	0xe000ed04

08007380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800738e:	463a      	mov	r2, r7
 8007390:	1d39      	adds	r1, r7, #4
 8007392:	f107 0308 	add.w	r3, r7, #8
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe ff7c 	bl	8006294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	9202      	str	r2, [sp, #8]
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	2300      	movs	r3, #0
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	2300      	movs	r3, #0
 80073ac:	460a      	mov	r2, r1
 80073ae:	4926      	ldr	r1, [pc, #152]	; (8007448 <vTaskStartScheduler+0xc8>)
 80073b0:	4826      	ldr	r0, [pc, #152]	; (800744c <vTaskStartScheduler+0xcc>)
 80073b2:	f7ff fdef 	bl	8006f94 <xTaskCreateStatic>
 80073b6:	4603      	mov	r3, r0
 80073b8:	4a25      	ldr	r2, [pc, #148]	; (8007450 <vTaskStartScheduler+0xd0>)
 80073ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073bc:	4b24      	ldr	r3, [pc, #144]	; (8007450 <vTaskStartScheduler+0xd0>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073c4:	2301      	movs	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	e001      	b.n	80073ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d102      	bne.n	80073da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073d4:	f000 fd2a 	bl	8007e2c <xTimerCreateTimerTask>
 80073d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d11d      	bne.n	800741c <vTaskStartScheduler+0x9c>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	b672      	cpsid	i
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	b662      	cpsie	i
 80073f4:	613b      	str	r3, [r7, #16]
}
 80073f6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073f8:	4b16      	ldr	r3, [pc, #88]	; (8007454 <vTaskStartScheduler+0xd4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3354      	adds	r3, #84	; 0x54
 80073fe:	4a16      	ldr	r2, [pc, #88]	; (8007458 <vTaskStartScheduler+0xd8>)
 8007400:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007402:	4b16      	ldr	r3, [pc, #88]	; (800745c <vTaskStartScheduler+0xdc>)
 8007404:	f04f 32ff 	mov.w	r2, #4294967295
 8007408:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800740a:	4b15      	ldr	r3, [pc, #84]	; (8007460 <vTaskStartScheduler+0xe0>)
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007410:	4b14      	ldr	r3, [pc, #80]	; (8007464 <vTaskStartScheduler+0xe4>)
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007416:	f001 f8f3 	bl	8008600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800741a:	e010      	b.n	800743e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d10c      	bne.n	800743e <vTaskStartScheduler+0xbe>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	b672      	cpsid	i
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	b662      	cpsie	i
 8007438:	60fb      	str	r3, [r7, #12]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <vTaskStartScheduler+0xbc>
}
 800743e:	bf00      	nop
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	0800bba8 	.word	0x0800bba8
 800744c:	08007aad 	.word	0x08007aad
 8007450:	20001860 	.word	0x20001860
 8007454:	20001368 	.word	0x20001368
 8007458:	20000010 	.word	0x20000010
 800745c:	2000185c 	.word	0x2000185c
 8007460:	20001848 	.word	0x20001848
 8007464:	20001840 	.word	0x20001840

08007468 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800746c:	4b04      	ldr	r3, [pc, #16]	; (8007480 <vTaskSuspendAll+0x18>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a03      	ldr	r2, [pc, #12]	; (8007480 <vTaskSuspendAll+0x18>)
 8007474:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007476:	bf00      	nop
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	20001864 	.word	0x20001864

08007484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800748e:	2300      	movs	r3, #0
 8007490:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007492:	4b43      	ldr	r3, [pc, #268]	; (80075a0 <xTaskResumeAll+0x11c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10c      	bne.n	80074b4 <xTaskResumeAll+0x30>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	b672      	cpsid	i
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	b662      	cpsie	i
 80074ae:	603b      	str	r3, [r7, #0]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074b4:	f001 f922 	bl	80086fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074b8:	4b39      	ldr	r3, [pc, #228]	; (80075a0 <xTaskResumeAll+0x11c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	4a38      	ldr	r2, [pc, #224]	; (80075a0 <xTaskResumeAll+0x11c>)
 80074c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c2:	4b37      	ldr	r3, [pc, #220]	; (80075a0 <xTaskResumeAll+0x11c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d162      	bne.n	8007590 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074ca:	4b36      	ldr	r3, [pc, #216]	; (80075a4 <xTaskResumeAll+0x120>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d05e      	beq.n	8007590 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074d2:	e02f      	b.n	8007534 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d4:	4b34      	ldr	r3, [pc, #208]	; (80075a8 <xTaskResumeAll+0x124>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3318      	adds	r3, #24
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe ff95 	bl	8006410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3304      	adds	r3, #4
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe ff90 	bl	8006410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <xTaskResumeAll+0x128>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d903      	bls.n	8007504 <xTaskResumeAll+0x80>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <xTaskResumeAll+0x128>)
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4a27      	ldr	r2, [pc, #156]	; (80075b0 <xTaskResumeAll+0x12c>)
 8007512:	441a      	add	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3304      	adds	r3, #4
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f7fe ff1b 	bl	8006356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <xTaskResumeAll+0x130>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752a:	429a      	cmp	r2, r3
 800752c:	d302      	bcc.n	8007534 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800752e:	4b22      	ldr	r3, [pc, #136]	; (80075b8 <xTaskResumeAll+0x134>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007534:	4b1c      	ldr	r3, [pc, #112]	; (80075a8 <xTaskResumeAll+0x124>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1cb      	bne.n	80074d4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007542:	f000 fb6f 	bl	8007c24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007546:	4b1d      	ldr	r3, [pc, #116]	; (80075bc <xTaskResumeAll+0x138>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d010      	beq.n	8007574 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007552:	f000 f847 	bl	80075e4 <xTaskIncrementTick>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800755c:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <xTaskResumeAll+0x134>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3b01      	subs	r3, #1
 8007566:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f1      	bne.n	8007552 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800756e:	4b13      	ldr	r3, [pc, #76]	; (80075bc <xTaskResumeAll+0x138>)
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007574:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <xTaskResumeAll+0x134>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d009      	beq.n	8007590 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007580:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <xTaskResumeAll+0x13c>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007590:	f001 f8e8 	bl	8008764 <vPortExitCritical>

	return xAlreadyYielded;
 8007594:	68bb      	ldr	r3, [r7, #8]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20001864 	.word	0x20001864
 80075a4:	2000183c 	.word	0x2000183c
 80075a8:	200017fc 	.word	0x200017fc
 80075ac:	20001844 	.word	0x20001844
 80075b0:	2000136c 	.word	0x2000136c
 80075b4:	20001368 	.word	0x20001368
 80075b8:	20001850 	.word	0x20001850
 80075bc:	2000184c 	.word	0x2000184c
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <xTaskGetTickCount+0x1c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075d0:	687b      	ldr	r3, [r7, #4]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20001840 	.word	0x20001840

080075e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ee:	4b50      	ldr	r3, [pc, #320]	; (8007730 <xTaskIncrementTick+0x14c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f040 808b 	bne.w	800770e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075f8:	4b4e      	ldr	r3, [pc, #312]	; (8007734 <xTaskIncrementTick+0x150>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007600:	4a4c      	ldr	r2, [pc, #304]	; (8007734 <xTaskIncrementTick+0x150>)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d122      	bne.n	8007652 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800760c:	4b4a      	ldr	r3, [pc, #296]	; (8007738 <xTaskIncrementTick+0x154>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00c      	beq.n	8007630 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	b672      	cpsid	i
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	b662      	cpsie	i
 800762a:	603b      	str	r3, [r7, #0]
}
 800762c:	bf00      	nop
 800762e:	e7fe      	b.n	800762e <xTaskIncrementTick+0x4a>
 8007630:	4b41      	ldr	r3, [pc, #260]	; (8007738 <xTaskIncrementTick+0x154>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	4b41      	ldr	r3, [pc, #260]	; (800773c <xTaskIncrementTick+0x158>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a3f      	ldr	r2, [pc, #252]	; (8007738 <xTaskIncrementTick+0x154>)
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	4a3f      	ldr	r2, [pc, #252]	; (800773c <xTaskIncrementTick+0x158>)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <xTaskIncrementTick+0x15c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3301      	adds	r3, #1
 800764a:	4a3d      	ldr	r2, [pc, #244]	; (8007740 <xTaskIncrementTick+0x15c>)
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	f000 fae9 	bl	8007c24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007652:	4b3c      	ldr	r3, [pc, #240]	; (8007744 <xTaskIncrementTick+0x160>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	429a      	cmp	r2, r3
 800765a:	d349      	bcc.n	80076f0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765c:	4b36      	ldr	r3, [pc, #216]	; (8007738 <xTaskIncrementTick+0x154>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d104      	bne.n	8007670 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007666:	4b37      	ldr	r3, [pc, #220]	; (8007744 <xTaskIncrementTick+0x160>)
 8007668:	f04f 32ff 	mov.w	r2, #4294967295
 800766c:	601a      	str	r2, [r3, #0]
					break;
 800766e:	e03f      	b.n	80076f0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007670:	4b31      	ldr	r3, [pc, #196]	; (8007738 <xTaskIncrementTick+0x154>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	429a      	cmp	r2, r3
 8007686:	d203      	bcs.n	8007690 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007688:	4a2e      	ldr	r2, [pc, #184]	; (8007744 <xTaskIncrementTick+0x160>)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800768e:	e02f      	b.n	80076f0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	3304      	adds	r3, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe febb 	bl	8006410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d004      	beq.n	80076ac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	3318      	adds	r3, #24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe feb2 	bl	8006410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	4b25      	ldr	r3, [pc, #148]	; (8007748 <xTaskIncrementTick+0x164>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d903      	bls.n	80076c0 <xTaskIncrementTick+0xdc>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	4a22      	ldr	r2, [pc, #136]	; (8007748 <xTaskIncrementTick+0x164>)
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4a1f      	ldr	r2, [pc, #124]	; (800774c <xTaskIncrementTick+0x168>)
 80076ce:	441a      	add	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f7fe fe3d 	bl	8006356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e0:	4b1b      	ldr	r3, [pc, #108]	; (8007750 <xTaskIncrementTick+0x16c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d3b8      	bcc.n	800765c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ee:	e7b5      	b.n	800765c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076f0:	4b17      	ldr	r3, [pc, #92]	; (8007750 <xTaskIncrementTick+0x16c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f6:	4915      	ldr	r1, [pc, #84]	; (800774c <xTaskIncrementTick+0x168>)
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d907      	bls.n	8007718 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	e004      	b.n	8007718 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <xTaskIncrementTick+0x170>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	4a0f      	ldr	r2, [pc, #60]	; (8007754 <xTaskIncrementTick+0x170>)
 8007716:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007718:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <xTaskIncrementTick+0x174>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007720:	2301      	movs	r3, #1
 8007722:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007724:	697b      	ldr	r3, [r7, #20]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20001864 	.word	0x20001864
 8007734:	20001840 	.word	0x20001840
 8007738:	200017f4 	.word	0x200017f4
 800773c:	200017f8 	.word	0x200017f8
 8007740:	20001854 	.word	0x20001854
 8007744:	2000185c 	.word	0x2000185c
 8007748:	20001844 	.word	0x20001844
 800774c:	2000136c 	.word	0x2000136c
 8007750:	20001368 	.word	0x20001368
 8007754:	2000184c 	.word	0x2000184c
 8007758:	20001850 	.word	0x20001850

0800775c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007762:	4b2b      	ldr	r3, [pc, #172]	; (8007810 <vTaskSwitchContext+0xb4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800776a:	4b2a      	ldr	r3, [pc, #168]	; (8007814 <vTaskSwitchContext+0xb8>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007770:	e048      	b.n	8007804 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007772:	4b28      	ldr	r3, [pc, #160]	; (8007814 <vTaskSwitchContext+0xb8>)
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007778:	4b27      	ldr	r3, [pc, #156]	; (8007818 <vTaskSwitchContext+0xbc>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	e012      	b.n	80077a6 <vTaskSwitchContext+0x4a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10c      	bne.n	80077a0 <vTaskSwitchContext+0x44>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	b672      	cpsid	i
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	b662      	cpsie	i
 800779a:	607b      	str	r3, [r7, #4]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <vTaskSwitchContext+0x42>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	491d      	ldr	r1, [pc, #116]	; (800781c <vTaskSwitchContext+0xc0>)
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	440b      	add	r3, r1
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0e2      	beq.n	8007780 <vTaskSwitchContext+0x24>
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4613      	mov	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4a15      	ldr	r2, [pc, #84]	; (800781c <vTaskSwitchContext+0xc0>)
 80077c6:	4413      	add	r3, r2
 80077c8:	60bb      	str	r3, [r7, #8]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	3308      	adds	r3, #8
 80077dc:	429a      	cmp	r2, r3
 80077de:	d104      	bne.n	80077ea <vTaskSwitchContext+0x8e>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	605a      	str	r2, [r3, #4]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a0b      	ldr	r2, [pc, #44]	; (8007820 <vTaskSwitchContext+0xc4>)
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	4a08      	ldr	r2, [pc, #32]	; (8007818 <vTaskSwitchContext+0xbc>)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077fa:	4b09      	ldr	r3, [pc, #36]	; (8007820 <vTaskSwitchContext+0xc4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3354      	adds	r3, #84	; 0x54
 8007800:	4a08      	ldr	r2, [pc, #32]	; (8007824 <vTaskSwitchContext+0xc8>)
 8007802:	6013      	str	r3, [r2, #0]
}
 8007804:	bf00      	nop
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	20001864 	.word	0x20001864
 8007814:	20001850 	.word	0x20001850
 8007818:	20001844 	.word	0x20001844
 800781c:	2000136c 	.word	0x2000136c
 8007820:	20001368 	.word	0x20001368
 8007824:	20000010 	.word	0x20000010

08007828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10c      	bne.n	8007852 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	b672      	cpsid	i
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	b662      	cpsie	i
 800784c:	60fb      	str	r3, [r7, #12]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007852:	4b07      	ldr	r3, [pc, #28]	; (8007870 <vTaskPlaceOnEventList+0x48>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3318      	adds	r3, #24
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fe fd9f 	bl	800639e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007860:	2101      	movs	r1, #1
 8007862:	6838      	ldr	r0, [r7, #0]
 8007864:	f000 fa8e 	bl	8007d84 <prvAddCurrentTaskToDelayedList>
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20001368 	.word	0x20001368

08007874 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10c      	bne.n	80078a0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	b672      	cpsid	i
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	b662      	cpsie	i
 800789a:	617b      	str	r3, [r7, #20]
}
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <vTaskPlaceOnEventListRestricted+0x58>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3318      	adds	r3, #24
 80078a6:	4619      	mov	r1, r3
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7fe fd54 	bl	8006356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80078b4:	f04f 33ff 	mov.w	r3, #4294967295
 80078b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	68b8      	ldr	r0, [r7, #8]
 80078be:	f000 fa61 	bl	8007d84 <prvAddCurrentTaskToDelayedList>
	}
 80078c2:	bf00      	nop
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20001368 	.word	0x20001368

080078d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10c      	bne.n	8007900 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	b672      	cpsid	i
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	b662      	cpsie	i
 80078fa:	60fb      	str	r3, [r7, #12]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	3318      	adds	r3, #24
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe fd83 	bl	8006410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800790a:	4b1e      	ldr	r3, [pc, #120]	; (8007984 <xTaskRemoveFromEventList+0xb4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d11d      	bne.n	800794e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	3304      	adds	r3, #4
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe fd7a 	bl	8006410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4b19      	ldr	r3, [pc, #100]	; (8007988 <xTaskRemoveFromEventList+0xb8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d903      	bls.n	8007930 <xTaskRemoveFromEventList+0x60>
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	4a16      	ldr	r2, [pc, #88]	; (8007988 <xTaskRemoveFromEventList+0xb8>)
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4a13      	ldr	r2, [pc, #76]	; (800798c <xTaskRemoveFromEventList+0xbc>)
 800793e:	441a      	add	r2, r3
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f7fe fd05 	bl	8006356 <vListInsertEnd>
 800794c:	e005      	b.n	800795a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	3318      	adds	r3, #24
 8007952:	4619      	mov	r1, r3
 8007954:	480e      	ldr	r0, [pc, #56]	; (8007990 <xTaskRemoveFromEventList+0xc0>)
 8007956:	f7fe fcfe 	bl	8006356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <xTaskRemoveFromEventList+0xc4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	429a      	cmp	r2, r3
 8007966:	d905      	bls.n	8007974 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007968:	2301      	movs	r3, #1
 800796a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800796c:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <xTaskRemoveFromEventList+0xc8>)
 800796e:	2201      	movs	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e001      	b.n	8007978 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007978:	697b      	ldr	r3, [r7, #20]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20001864 	.word	0x20001864
 8007988:	20001844 	.word	0x20001844
 800798c:	2000136c 	.word	0x2000136c
 8007990:	200017fc 	.word	0x200017fc
 8007994:	20001368 	.word	0x20001368
 8007998:	20001850 	.word	0x20001850

0800799c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079a4:	4b06      	ldr	r3, [pc, #24]	; (80079c0 <vTaskInternalSetTimeOutState+0x24>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079ac:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <vTaskInternalSetTimeOutState+0x28>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	20001854 	.word	0x20001854
 80079c4:	20001840 	.word	0x20001840

080079c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10c      	bne.n	80079f2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	b672      	cpsid	i
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	b662      	cpsie	i
 80079ec:	613b      	str	r3, [r7, #16]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10c      	bne.n	8007a12 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	b672      	cpsid	i
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	b662      	cpsie	i
 8007a0c:	60fb      	str	r3, [r7, #12]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007a12:	f000 fe73 	bl	80086fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a16:	4b1d      	ldr	r3, [pc, #116]	; (8007a8c <xTaskCheckForTimeOut+0xc4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d102      	bne.n	8007a36 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	e023      	b.n	8007a7e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <xTaskCheckForTimeOut+0xc8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d007      	beq.n	8007a52 <xTaskCheckForTimeOut+0x8a>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d302      	bcc.n	8007a52 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	61fb      	str	r3, [r7, #28]
 8007a50:	e015      	b.n	8007a7e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d20b      	bcs.n	8007a74 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff ff97 	bl	800799c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61fb      	str	r3, [r7, #28]
 8007a72:	e004      	b.n	8007a7e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a7e:	f000 fe71 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8007a82:	69fb      	ldr	r3, [r7, #28]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3720      	adds	r7, #32
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20001840 	.word	0x20001840
 8007a90:	20001854 	.word	0x20001854

08007a94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a98:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <vTaskMissedYield+0x14>)
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
}
 8007a9e:	bf00      	nop
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	20001850 	.word	0x20001850

08007aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ab4:	f000 f852 	bl	8007b5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ab8:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <prvIdleTask+0x28>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d9f9      	bls.n	8007ab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <prvIdleTask+0x2c>)
 8007ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ad0:	e7f0      	b.n	8007ab4 <prvIdleTask+0x8>
 8007ad2:	bf00      	nop
 8007ad4:	2000136c 	.word	0x2000136c
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	e00c      	b.n	8007b02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4a12      	ldr	r2, [pc, #72]	; (8007b3c <prvInitialiseTaskLists+0x60>)
 8007af4:	4413      	add	r3, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fc00 	bl	80062fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3301      	adds	r3, #1
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b37      	cmp	r3, #55	; 0x37
 8007b06:	d9ef      	bls.n	8007ae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b08:	480d      	ldr	r0, [pc, #52]	; (8007b40 <prvInitialiseTaskLists+0x64>)
 8007b0a:	f7fe fbf7 	bl	80062fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b0e:	480d      	ldr	r0, [pc, #52]	; (8007b44 <prvInitialiseTaskLists+0x68>)
 8007b10:	f7fe fbf4 	bl	80062fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b14:	480c      	ldr	r0, [pc, #48]	; (8007b48 <prvInitialiseTaskLists+0x6c>)
 8007b16:	f7fe fbf1 	bl	80062fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b1a:	480c      	ldr	r0, [pc, #48]	; (8007b4c <prvInitialiseTaskLists+0x70>)
 8007b1c:	f7fe fbee 	bl	80062fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b20:	480b      	ldr	r0, [pc, #44]	; (8007b50 <prvInitialiseTaskLists+0x74>)
 8007b22:	f7fe fbeb 	bl	80062fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <prvInitialiseTaskLists+0x78>)
 8007b28:	4a05      	ldr	r2, [pc, #20]	; (8007b40 <prvInitialiseTaskLists+0x64>)
 8007b2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <prvInitialiseTaskLists+0x7c>)
 8007b2e:	4a05      	ldr	r2, [pc, #20]	; (8007b44 <prvInitialiseTaskLists+0x68>)
 8007b30:	601a      	str	r2, [r3, #0]
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	2000136c 	.word	0x2000136c
 8007b40:	200017cc 	.word	0x200017cc
 8007b44:	200017e0 	.word	0x200017e0
 8007b48:	200017fc 	.word	0x200017fc
 8007b4c:	20001810 	.word	0x20001810
 8007b50:	20001828 	.word	0x20001828
 8007b54:	200017f4 	.word	0x200017f4
 8007b58:	200017f8 	.word	0x200017f8

08007b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b62:	e019      	b.n	8007b98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b64:	f000 fdca 	bl	80086fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b68:	4b10      	ldr	r3, [pc, #64]	; (8007bac <prvCheckTasksWaitingTermination+0x50>)
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe fc4b 	bl	8006410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	; (8007bb0 <prvCheckTasksWaitingTermination+0x54>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	4a0b      	ldr	r2, [pc, #44]	; (8007bb0 <prvCheckTasksWaitingTermination+0x54>)
 8007b82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b84:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <prvCheckTasksWaitingTermination+0x58>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	4a0a      	ldr	r2, [pc, #40]	; (8007bb4 <prvCheckTasksWaitingTermination+0x58>)
 8007b8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b8e:	f000 fde9 	bl	8008764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f810 	bl	8007bb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <prvCheckTasksWaitingTermination+0x58>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e1      	bne.n	8007b64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20001810 	.word	0x20001810
 8007bb0:	2000183c 	.word	0x2000183c
 8007bb4:	20001824 	.word	0x20001824

08007bb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3354      	adds	r3, #84	; 0x54
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 fa85 	bl	80090d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d108      	bne.n	8007be6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 ff85 	bl	8008ae8 <vPortFree>
				vPortFree( pxTCB );
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 ff82 	bl	8008ae8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007be4:	e01a      	b.n	8007c1c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d103      	bne.n	8007bf8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 ff79 	bl	8008ae8 <vPortFree>
	}
 8007bf6:	e011      	b.n	8007c1c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d00c      	beq.n	8007c1c <prvDeleteTCB+0x64>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	b672      	cpsid	i
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	b662      	cpsie	i
 8007c16:	60fb      	str	r3, [r7, #12]
}
 8007c18:	bf00      	nop
 8007c1a:	e7fe      	b.n	8007c1a <prvDeleteTCB+0x62>
	}
 8007c1c:	bf00      	nop
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c2a:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <prvResetNextTaskUnblockTime+0x38>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c34:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <prvResetNextTaskUnblockTime+0x3c>)
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c3c:	e008      	b.n	8007c50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <prvResetNextTaskUnblockTime+0x38>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <prvResetNextTaskUnblockTime+0x3c>)
 8007c4e:	6013      	str	r3, [r2, #0]
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	200017f4 	.word	0x200017f4
 8007c60:	2000185c 	.word	0x2000185c

08007c64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <xTaskGetSchedulerState+0x34>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d102      	bne.n	8007c78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c72:	2301      	movs	r3, #1
 8007c74:	607b      	str	r3, [r7, #4]
 8007c76:	e008      	b.n	8007c8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c78:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <xTaskGetSchedulerState+0x38>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c80:	2302      	movs	r3, #2
 8007c82:	607b      	str	r3, [r7, #4]
 8007c84:	e001      	b.n	8007c8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c86:	2300      	movs	r3, #0
 8007c88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c8a:	687b      	ldr	r3, [r7, #4]
	}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	20001848 	.word	0x20001848
 8007c9c:	20001864 	.word	0x20001864

08007ca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d05a      	beq.n	8007d6c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cb6:	4b30      	ldr	r3, [pc, #192]	; (8007d78 <xTaskPriorityDisinherit+0xd8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d00c      	beq.n	8007cda <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	b672      	cpsid	i
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	b662      	cpsie	i
 8007cd4:	60fb      	str	r3, [r7, #12]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10c      	bne.n	8007cfc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	b672      	cpsid	i
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	b662      	cpsie	i
 8007cf6:	60bb      	str	r3, [r7, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d00:	1e5a      	subs	r2, r3, #1
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d02c      	beq.n	8007d6c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d128      	bne.n	8007d6c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fb76 	bl	8006410 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3c:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <xTaskPriorityDisinherit+0xdc>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d903      	bls.n	8007d4c <xTaskPriorityDisinherit+0xac>
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	4a0c      	ldr	r2, [pc, #48]	; (8007d7c <xTaskPriorityDisinherit+0xdc>)
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4a09      	ldr	r2, [pc, #36]	; (8007d80 <xTaskPriorityDisinherit+0xe0>)
 8007d5a:	441a      	add	r2, r3
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f7fe faf7 	bl	8006356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d6c:	697b      	ldr	r3, [r7, #20]
	}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20001368 	.word	0x20001368
 8007d7c:	20001844 	.word	0x20001844
 8007d80:	2000136c 	.word	0x2000136c

08007d84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d8e:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d94:	4b20      	ldr	r3, [pc, #128]	; (8007e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fb38 	bl	8006410 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d10a      	bne.n	8007dbe <prvAddCurrentTaskToDelayedList+0x3a>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d007      	beq.n	8007dbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dae:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4619      	mov	r1, r3
 8007db6:	4819      	ldr	r0, [pc, #100]	; (8007e1c <prvAddCurrentTaskToDelayedList+0x98>)
 8007db8:	f7fe facd 	bl	8006356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dbc:	e026      	b.n	8007e0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dc6:	4b14      	ldr	r3, [pc, #80]	; (8007e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d209      	bcs.n	8007dea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd6:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f7fe fadb 	bl	800639e <vListInsert>
}
 8007de8:	e010      	b.n	8007e0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dea:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f7fe fad1 	bl	800639e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d202      	bcs.n	8007e0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e06:	4a08      	ldr	r2, [pc, #32]	; (8007e28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	6013      	str	r3, [r2, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20001840 	.word	0x20001840
 8007e18:	20001368 	.word	0x20001368
 8007e1c:	20001828 	.word	0x20001828
 8007e20:	200017f8 	.word	0x200017f8
 8007e24:	200017f4 	.word	0x200017f4
 8007e28:	2000185c 	.word	0x2000185c

08007e2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e36:	f000 fb15 	bl	8008464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e3a:	4b1d      	ldr	r3, [pc, #116]	; (8007eb0 <xTimerCreateTimerTask+0x84>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d021      	beq.n	8007e86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e4a:	1d3a      	adds	r2, r7, #4
 8007e4c:	f107 0108 	add.w	r1, r7, #8
 8007e50:	f107 030c 	add.w	r3, r7, #12
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe fa37 	bl	80062c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	9202      	str	r2, [sp, #8]
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	2302      	movs	r3, #2
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	460a      	mov	r2, r1
 8007e6c:	4911      	ldr	r1, [pc, #68]	; (8007eb4 <xTimerCreateTimerTask+0x88>)
 8007e6e:	4812      	ldr	r0, [pc, #72]	; (8007eb8 <xTimerCreateTimerTask+0x8c>)
 8007e70:	f7ff f890 	bl	8006f94 <xTaskCreateStatic>
 8007e74:	4603      	mov	r3, r0
 8007e76:	4a11      	ldr	r2, [pc, #68]	; (8007ebc <xTimerCreateTimerTask+0x90>)
 8007e78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e7a:	4b10      	ldr	r3, [pc, #64]	; (8007ebc <xTimerCreateTimerTask+0x90>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e82:	2301      	movs	r3, #1
 8007e84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10c      	bne.n	8007ea6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	b672      	cpsid	i
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	b662      	cpsie	i
 8007ea0:	613b      	str	r3, [r7, #16]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007ea6:	697b      	ldr	r3, [r7, #20]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20001898 	.word	0x20001898
 8007eb4:	0800bbb0 	.word	0x0800bbb0
 8007eb8:	08007ffd 	.word	0x08007ffd
 8007ebc:	2000189c 	.word	0x2000189c

08007ec0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10c      	bne.n	8007ef2 <xTimerGenericCommand+0x32>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	b672      	cpsid	i
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	b662      	cpsie	i
 8007eec:	623b      	str	r3, [r7, #32]
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ef2:	4b1a      	ldr	r3, [pc, #104]	; (8007f5c <xTimerGenericCommand+0x9c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d02a      	beq.n	8007f50 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b05      	cmp	r3, #5
 8007f0a:	dc18      	bgt.n	8007f3e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f0c:	f7ff feaa 	bl	8007c64 <xTaskGetSchedulerState>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d109      	bne.n	8007f2a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f16:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <xTimerGenericCommand+0x9c>)
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	f107 0110 	add.w	r1, r7, #16
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f22:	f7fe fc3d 	bl	80067a0 <xQueueGenericSend>
 8007f26:	6278      	str	r0, [r7, #36]	; 0x24
 8007f28:	e012      	b.n	8007f50 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f2a:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <xTimerGenericCommand+0x9c>)
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f107 0110 	add.w	r1, r7, #16
 8007f32:	2300      	movs	r3, #0
 8007f34:	2200      	movs	r2, #0
 8007f36:	f7fe fc33 	bl	80067a0 <xQueueGenericSend>
 8007f3a:	6278      	str	r0, [r7, #36]	; 0x24
 8007f3c:	e008      	b.n	8007f50 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f3e:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <xTimerGenericCommand+0x9c>)
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	f107 0110 	add.w	r1, r7, #16
 8007f46:	2300      	movs	r3, #0
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	f7fe fd2f 	bl	80069ac <xQueueGenericSendFromISR>
 8007f4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3728      	adds	r7, #40	; 0x28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20001898 	.word	0x20001898

08007f60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f6a:	4b23      	ldr	r3, [pc, #140]	; (8007ff8 <prvProcessExpiredTimer+0x98>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	3304      	adds	r3, #4
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe fa49 	bl	8006410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d024      	beq.n	8007fd6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	699a      	ldr	r2, [r3, #24]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	18d1      	adds	r1, r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	6978      	ldr	r0, [r7, #20]
 8007f9a:	f000 f8d3 	bl	8008144 <prvInsertTimerInActiveList>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d021      	beq.n	8007fe8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	2100      	movs	r1, #0
 8007fae:	6978      	ldr	r0, [r7, #20]
 8007fb0:	f7ff ff86 	bl	8007ec0 <xTimerGenericCommand>
 8007fb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d115      	bne.n	8007fe8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	b672      	cpsid	i
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	b662      	cpsie	i
 8007fd0:	60fb      	str	r3, [r7, #12]
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fdc:	f023 0301 	bic.w	r3, r3, #1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	6978      	ldr	r0, [r7, #20]
 8007fee:	4798      	blx	r3
}
 8007ff0:	bf00      	nop
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20001890 	.word	0x20001890

08007ffc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008004:	f107 0308 	add.w	r3, r7, #8
 8008008:	4618      	mov	r0, r3
 800800a:	f000 f857 	bl	80080bc <prvGetNextExpireTime>
 800800e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4619      	mov	r1, r3
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 f803 	bl	8008020 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800801a:	f000 f8d5 	bl	80081c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800801e:	e7f1      	b.n	8008004 <prvTimerTask+0x8>

08008020 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800802a:	f7ff fa1d 	bl	8007468 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800802e:	f107 0308 	add.w	r3, r7, #8
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f866 	bl	8008104 <prvSampleTimeNow>
 8008038:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d130      	bne.n	80080a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <prvProcessTimerOrBlockTask+0x3c>
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	429a      	cmp	r2, r3
 800804c:	d806      	bhi.n	800805c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800804e:	f7ff fa19 	bl	8007484 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008052:	68f9      	ldr	r1, [r7, #12]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff ff83 	bl	8007f60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800805a:	e024      	b.n	80080a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d008      	beq.n	8008074 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <prvProcessTimerOrBlockTask+0x90>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <prvProcessTimerOrBlockTask+0x50>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <prvProcessTimerOrBlockTask+0x52>
 8008070:	2300      	movs	r3, #0
 8008072:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008074:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <prvProcessTimerOrBlockTask+0x94>)
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	4619      	mov	r1, r3
 8008082:	f7fe ff53 	bl	8006f2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008086:	f7ff f9fd 	bl	8007484 <xTaskResumeAll>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008090:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <prvProcessTimerOrBlockTask+0x98>)
 8008092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	f3bf 8f6f 	isb	sy
}
 80080a0:	e001      	b.n	80080a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080a2:	f7ff f9ef 	bl	8007484 <xTaskResumeAll>
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20001894 	.word	0x20001894
 80080b4:	20001898 	.word	0x20001898
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080c4:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <prvGetNextExpireTime+0x44>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <prvGetNextExpireTime+0x16>
 80080ce:	2201      	movs	r2, #1
 80080d0:	e000      	b.n	80080d4 <prvGetNextExpireTime+0x18>
 80080d2:	2200      	movs	r2, #0
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d105      	bne.n	80080ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080e0:	4b07      	ldr	r3, [pc, #28]	; (8008100 <prvGetNextExpireTime+0x44>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e001      	b.n	80080f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080f0:	68fb      	ldr	r3, [r7, #12]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20001890 	.word	0x20001890

08008104 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800810c:	f7ff fa5a 	bl	80075c4 <xTaskGetTickCount>
 8008110:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008112:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <prvSampleTimeNow+0x3c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	429a      	cmp	r2, r3
 800811a:	d205      	bcs.n	8008128 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800811c:	f000 f93c 	bl	8008398 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	e002      	b.n	800812e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800812e:	4a04      	ldr	r2, [pc, #16]	; (8008140 <prvSampleTimeNow+0x3c>)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008134:	68fb      	ldr	r3, [r7, #12]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	200018a0 	.word	0x200018a0

08008144 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008152:	2300      	movs	r3, #0
 8008154:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d812      	bhi.n	8008190 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	1ad2      	subs	r2, r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	d302      	bcc.n	800817e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008178:	2301      	movs	r3, #1
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e01b      	b.n	80081b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800817e:	4b10      	ldr	r3, [pc, #64]	; (80081c0 <prvInsertTimerInActiveList+0x7c>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3304      	adds	r3, #4
 8008186:	4619      	mov	r1, r3
 8008188:	4610      	mov	r0, r2
 800818a:	f7fe f908 	bl	800639e <vListInsert>
 800818e:	e012      	b.n	80081b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d206      	bcs.n	80081a6 <prvInsertTimerInActiveList+0x62>
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	429a      	cmp	r2, r3
 800819e:	d302      	bcc.n	80081a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081a0:	2301      	movs	r3, #1
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	e007      	b.n	80081b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081a6:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <prvInsertTimerInActiveList+0x80>)
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4619      	mov	r1, r3
 80081b0:	4610      	mov	r0, r2
 80081b2:	f7fe f8f4 	bl	800639e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081b6:	697b      	ldr	r3, [r7, #20]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	20001894 	.word	0x20001894
 80081c4:	20001890 	.word	0x20001890

080081c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ce:	e0d0      	b.n	8008372 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	da1a      	bge.n	800820c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081d6:	1d3b      	adds	r3, r7, #4
 80081d8:	3304      	adds	r3, #4
 80081da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10c      	bne.n	80081fc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	b672      	cpsid	i
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	b662      	cpsie	i
 80081f6:	61fb      	str	r3, [r7, #28]
}
 80081f8:	bf00      	nop
 80081fa:	e7fe      	b.n	80081fa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008202:	6850      	ldr	r0, [r2, #4]
 8008204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008206:	6892      	ldr	r2, [r2, #8]
 8008208:	4611      	mov	r1, r2
 800820a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f2c0 80ae 	blt.w	8008370 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	3304      	adds	r3, #4
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe f8f3 	bl	8006410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800822a:	463b      	mov	r3, r7
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff ff69 	bl	8008104 <prvSampleTimeNow>
 8008232:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b09      	cmp	r3, #9
 8008238:	f200 809b 	bhi.w	8008372 <prvProcessReceivedCommands+0x1aa>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <prvProcessReceivedCommands+0x7c>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	0800826d 	.word	0x0800826d
 8008248:	0800826d 	.word	0x0800826d
 800824c:	0800826d 	.word	0x0800826d
 8008250:	080082e5 	.word	0x080082e5
 8008254:	080082f9 	.word	0x080082f9
 8008258:	08008347 	.word	0x08008347
 800825c:	0800826d 	.word	0x0800826d
 8008260:	0800826d 	.word	0x0800826d
 8008264:	080082e5 	.word	0x080082e5
 8008268:	080082f9 	.word	0x080082f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	b2da      	uxtb	r2, r3
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	18d1      	adds	r1, r2, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800828c:	f7ff ff5a 	bl	8008144 <prvInsertTimerInActiveList>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d06d      	beq.n	8008372 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800829c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d062      	beq.n	8008372 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	441a      	add	r2, r3
 80082b4:	2300      	movs	r3, #0
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	2300      	movs	r3, #0
 80082ba:	2100      	movs	r1, #0
 80082bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082be:	f7ff fdff 	bl	8007ec0 <xTimerGenericCommand>
 80082c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d153      	bne.n	8008372 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	b672      	cpsid	i
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	b662      	cpsie	i
 80082de:	61bb      	str	r3, [r7, #24]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ea:	f023 0301 	bic.w	r3, r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80082f6:	e03c      	b.n	8008372 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082fe:	f043 0301 	orr.w	r3, r3, #1
 8008302:	b2da      	uxtb	r2, r3
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10c      	bne.n	8008332 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	b672      	cpsid	i
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	b662      	cpsie	i
 800832c:	617b      	str	r3, [r7, #20]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	18d1      	adds	r1, r2, r3
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008340:	f7ff ff00 	bl	8008144 <prvInsertTimerInActiveList>
					break;
 8008344:	e015      	b.n	8008372 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d103      	bne.n	800835c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008356:	f000 fbc7 	bl	8008ae8 <vPortFree>
 800835a:	e00a      	b.n	8008372 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008362:	f023 0301 	bic.w	r3, r3, #1
 8008366:	b2da      	uxtb	r2, r3
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800836e:	e000      	b.n	8008372 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008370:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008372:	4b08      	ldr	r3, [pc, #32]	; (8008394 <prvProcessReceivedCommands+0x1cc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	1d39      	adds	r1, r7, #4
 8008378:	2200      	movs	r2, #0
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe fbb6 	bl	8006aec <xQueueReceive>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	f47f af24 	bne.w	80081d0 <prvProcessReceivedCommands+0x8>
	}
}
 8008388:	bf00      	nop
 800838a:	bf00      	nop
 800838c:	3730      	adds	r7, #48	; 0x30
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20001898 	.word	0x20001898

08008398 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800839e:	e04a      	b.n	8008436 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083a0:	4b2e      	ldr	r3, [pc, #184]	; (800845c <prvSwitchTimerLists+0xc4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083aa:	4b2c      	ldr	r3, [pc, #176]	; (800845c <prvSwitchTimerLists+0xc4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe f829 	bl	8006410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083cc:	f003 0304 	and.w	r3, r3, #4
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d030      	beq.n	8008436 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4413      	add	r3, r2
 80083dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d90e      	bls.n	8008404 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083f2:	4b1a      	ldr	r3, [pc, #104]	; (800845c <prvSwitchTimerLists+0xc4>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3304      	adds	r3, #4
 80083fa:	4619      	mov	r1, r3
 80083fc:	4610      	mov	r0, r2
 80083fe:	f7fd ffce 	bl	800639e <vListInsert>
 8008402:	e018      	b.n	8008436 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008404:	2300      	movs	r3, #0
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	2300      	movs	r3, #0
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	2100      	movs	r1, #0
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7ff fd56 	bl	8007ec0 <xTimerGenericCommand>
 8008414:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10c      	bne.n	8008436 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	b672      	cpsid	i
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	b662      	cpsie	i
 8008430:	603b      	str	r3, [r7, #0]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <prvSwitchTimerLists+0xc4>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1af      	bne.n	80083a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <prvSwitchTimerLists+0xc4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008446:	4b06      	ldr	r3, [pc, #24]	; (8008460 <prvSwitchTimerLists+0xc8>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a04      	ldr	r2, [pc, #16]	; (800845c <prvSwitchTimerLists+0xc4>)
 800844c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800844e:	4a04      	ldr	r2, [pc, #16]	; (8008460 <prvSwitchTimerLists+0xc8>)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	6013      	str	r3, [r2, #0]
}
 8008454:	bf00      	nop
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20001890 	.word	0x20001890
 8008460:	20001894 	.word	0x20001894

08008464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800846a:	f000 f947 	bl	80086fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d120      	bne.n	80084b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008476:	4814      	ldr	r0, [pc, #80]	; (80084c8 <prvCheckForValidListAndQueue+0x64>)
 8008478:	f7fd ff40 	bl	80062fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800847c:	4813      	ldr	r0, [pc, #76]	; (80084cc <prvCheckForValidListAndQueue+0x68>)
 800847e:	f7fd ff3d 	bl	80062fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008482:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <prvCheckForValidListAndQueue+0x6c>)
 8008484:	4a10      	ldr	r2, [pc, #64]	; (80084c8 <prvCheckForValidListAndQueue+0x64>)
 8008486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008488:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <prvCheckForValidListAndQueue+0x70>)
 800848a:	4a10      	ldr	r2, [pc, #64]	; (80084cc <prvCheckForValidListAndQueue+0x68>)
 800848c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800848e:	2300      	movs	r3, #0
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <prvCheckForValidListAndQueue+0x74>)
 8008494:	4a11      	ldr	r2, [pc, #68]	; (80084dc <prvCheckForValidListAndQueue+0x78>)
 8008496:	2110      	movs	r1, #16
 8008498:	200a      	movs	r0, #10
 800849a:	f7fe f84d 	bl	8006538 <xQueueGenericCreateStatic>
 800849e:	4603      	mov	r3, r0
 80084a0:	4a08      	ldr	r2, [pc, #32]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084ac:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <prvCheckForValidListAndQueue+0x60>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	490b      	ldr	r1, [pc, #44]	; (80084e0 <prvCheckForValidListAndQueue+0x7c>)
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fd10 	bl	8006ed8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084b8:	f000 f954 	bl	8008764 <vPortExitCritical>
}
 80084bc:	bf00      	nop
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20001898 	.word	0x20001898
 80084c8:	20001868 	.word	0x20001868
 80084cc:	2000187c 	.word	0x2000187c
 80084d0:	20001890 	.word	0x20001890
 80084d4:	20001894 	.word	0x20001894
 80084d8:	20001944 	.word	0x20001944
 80084dc:	200018a4 	.word	0x200018a4
 80084e0:	0800bbb8 	.word	0x0800bbb8

080084e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3b04      	subs	r3, #4
 80084f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3b04      	subs	r3, #4
 8008502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f023 0201 	bic.w	r2, r3, #1
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3b04      	subs	r3, #4
 8008512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008514:	4a0c      	ldr	r2, [pc, #48]	; (8008548 <pxPortInitialiseStack+0x64>)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3b14      	subs	r3, #20
 800851e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3b04      	subs	r3, #4
 800852a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f06f 0202 	mvn.w	r2, #2
 8008532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3b20      	subs	r3, #32
 8008538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800853a:	68fb      	ldr	r3, [r7, #12]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	0800854d 	.word	0x0800854d

0800854c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <prvTaskExitError+0x5c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855e:	d00c      	beq.n	800857a <prvTaskExitError+0x2e>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	b672      	cpsid	i
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	b662      	cpsie	i
 8008574:	60fb      	str	r3, [r7, #12]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <prvTaskExitError+0x2c>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	b672      	cpsid	i
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	b662      	cpsie	i
 800858e:	60bb      	str	r3, [r7, #8]
}
 8008590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008592:	bf00      	nop
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0fc      	beq.n	8008594 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	2000000c 	.word	0x2000000c
 80085ac:	00000000 	.word	0x00000000

080085b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085b0:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <pxCurrentTCBConst2>)
 80085b2:	6819      	ldr	r1, [r3, #0]
 80085b4:	6808      	ldr	r0, [r1, #0]
 80085b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ba:	f380 8809 	msr	PSP, r0
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f04f 0000 	mov.w	r0, #0
 80085c6:	f380 8811 	msr	BASEPRI, r0
 80085ca:	4770      	bx	lr
 80085cc:	f3af 8000 	nop.w

080085d0 <pxCurrentTCBConst2>:
 80085d0:	20001368 	.word	0x20001368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop

080085d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085d8:	4808      	ldr	r0, [pc, #32]	; (80085fc <prvPortStartFirstTask+0x24>)
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	6800      	ldr	r0, [r0, #0]
 80085de:	f380 8808 	msr	MSP, r0
 80085e2:	f04f 0000 	mov.w	r0, #0
 80085e6:	f380 8814 	msr	CONTROL, r0
 80085ea:	b662      	cpsie	i
 80085ec:	b661      	cpsie	f
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	df00      	svc	0
 80085f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085fa:	bf00      	nop
 80085fc:	e000ed08 	.word	0xe000ed08

08008600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008606:	4b37      	ldr	r3, [pc, #220]	; (80086e4 <xPortStartScheduler+0xe4>)
 8008608:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008628:	b2da      	uxtb	r2, r3
 800862a:	4b2f      	ldr	r3, [pc, #188]	; (80086e8 <xPortStartScheduler+0xe8>)
 800862c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800862e:	4b2f      	ldr	r3, [pc, #188]	; (80086ec <xPortStartScheduler+0xec>)
 8008630:	2207      	movs	r2, #7
 8008632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008634:	e009      	b.n	800864a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008636:	4b2d      	ldr	r3, [pc, #180]	; (80086ec <xPortStartScheduler+0xec>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3b01      	subs	r3, #1
 800863c:	4a2b      	ldr	r2, [pc, #172]	; (80086ec <xPortStartScheduler+0xec>)
 800863e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d0ef      	beq.n	8008636 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008656:	4b25      	ldr	r3, [pc, #148]	; (80086ec <xPortStartScheduler+0xec>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1c3 0307 	rsb	r3, r3, #7
 800865e:	2b04      	cmp	r3, #4
 8008660:	d00c      	beq.n	800867c <xPortStartScheduler+0x7c>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	b672      	cpsid	i
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	b662      	cpsie	i
 8008676:	60bb      	str	r3, [r7, #8]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800867c:	4b1b      	ldr	r3, [pc, #108]	; (80086ec <xPortStartScheduler+0xec>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	021b      	lsls	r3, r3, #8
 8008682:	4a1a      	ldr	r2, [pc, #104]	; (80086ec <xPortStartScheduler+0xec>)
 8008684:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008686:	4b19      	ldr	r3, [pc, #100]	; (80086ec <xPortStartScheduler+0xec>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800868e:	4a17      	ldr	r2, [pc, #92]	; (80086ec <xPortStartScheduler+0xec>)
 8008690:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	b2da      	uxtb	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800869a:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <xPortStartScheduler+0xf0>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a14      	ldr	r2, [pc, #80]	; (80086f0 <xPortStartScheduler+0xf0>)
 80086a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086a6:	4b12      	ldr	r3, [pc, #72]	; (80086f0 <xPortStartScheduler+0xf0>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a11      	ldr	r2, [pc, #68]	; (80086f0 <xPortStartScheduler+0xf0>)
 80086ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086b2:	f000 f8dd 	bl	8008870 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086b6:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <xPortStartScheduler+0xf4>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086bc:	f000 f8fc 	bl	80088b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086c0:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <xPortStartScheduler+0xf8>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a0c      	ldr	r2, [pc, #48]	; (80086f8 <xPortStartScheduler+0xf8>)
 80086c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086cc:	f7ff ff84 	bl	80085d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086d0:	f7ff f844 	bl	800775c <vTaskSwitchContext>
	prvTaskExitError();
 80086d4:	f7ff ff3a 	bl	800854c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	e000e400 	.word	0xe000e400
 80086e8:	20001994 	.word	0x20001994
 80086ec:	20001998 	.word	0x20001998
 80086f0:	e000ed20 	.word	0xe000ed20
 80086f4:	2000000c 	.word	0x2000000c
 80086f8:	e000ef34 	.word	0xe000ef34

080086fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	b672      	cpsid	i
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	b662      	cpsie	i
 8008716:	607b      	str	r3, [r7, #4]
}
 8008718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800871a:	4b10      	ldr	r3, [pc, #64]	; (800875c <vPortEnterCritical+0x60>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3301      	adds	r3, #1
 8008720:	4a0e      	ldr	r2, [pc, #56]	; (800875c <vPortEnterCritical+0x60>)
 8008722:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008724:	4b0d      	ldr	r3, [pc, #52]	; (800875c <vPortEnterCritical+0x60>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d111      	bne.n	8008750 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800872c:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <vPortEnterCritical+0x64>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00c      	beq.n	8008750 <vPortEnterCritical+0x54>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	b672      	cpsid	i
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	b662      	cpsie	i
 800874a:	603b      	str	r3, [r7, #0]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <vPortEnterCritical+0x52>
	}
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	2000000c 	.word	0x2000000c
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800876a:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <vPortExitCritical+0x54>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10c      	bne.n	800878c <vPortExitCritical+0x28>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	b672      	cpsid	i
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	b662      	cpsie	i
 8008786:	607b      	str	r3, [r7, #4]
}
 8008788:	bf00      	nop
 800878a:	e7fe      	b.n	800878a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800878c:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <vPortExitCritical+0x54>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3b01      	subs	r3, #1
 8008792:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <vPortExitCritical+0x54>)
 8008794:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008796:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <vPortExitCritical+0x54>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <vPortExitCritical+0x46>
 800879e:	2300      	movs	r3, #0
 80087a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f383 8811 	msr	BASEPRI, r3
}
 80087a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	2000000c 	.word	0x2000000c
 80087bc:	00000000 	.word	0x00000000

080087c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087c0:	f3ef 8009 	mrs	r0, PSP
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4b15      	ldr	r3, [pc, #84]	; (8008820 <pxCurrentTCBConst>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f01e 0f10 	tst.w	lr, #16
 80087d0:	bf08      	it	eq
 80087d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	6010      	str	r0, [r2, #0]
 80087dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087e4:	b672      	cpsid	i
 80087e6:	f380 8811 	msr	BASEPRI, r0
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	b662      	cpsie	i
 80087f4:	f7fe ffb2 	bl	800775c <vTaskSwitchContext>
 80087f8:	f04f 0000 	mov.w	r0, #0
 80087fc:	f380 8811 	msr	BASEPRI, r0
 8008800:	bc09      	pop	{r0, r3}
 8008802:	6819      	ldr	r1, [r3, #0]
 8008804:	6808      	ldr	r0, [r1, #0]
 8008806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880a:	f01e 0f10 	tst.w	lr, #16
 800880e:	bf08      	it	eq
 8008810:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008814:	f380 8809 	msr	PSP, r0
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop

08008820 <pxCurrentTCBConst>:
 8008820:	20001368 	.word	0x20001368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop

08008828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	b672      	cpsid	i
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	b662      	cpsie	i
 8008842:	607b      	str	r3, [r7, #4]
}
 8008844:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008846:	f7fe fecd 	bl	80075e4 <xTaskIncrementTick>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <xPortSysTickHandler+0x44>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	2300      	movs	r3, #0
 800885a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f383 8811 	msr	BASEPRI, r3
}
 8008862:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008870:	b480      	push	{r7}
 8008872:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008874:	4b0b      	ldr	r3, [pc, #44]	; (80088a4 <vPortSetupTimerInterrupt+0x34>)
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <vPortSetupTimerInterrupt+0x38>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008880:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <vPortSetupTimerInterrupt+0x3c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <vPortSetupTimerInterrupt+0x40>)
 8008886:	fba2 2303 	umull	r2, r3, r2, r3
 800888a:	099b      	lsrs	r3, r3, #6
 800888c:	4a09      	ldr	r2, [pc, #36]	; (80088b4 <vPortSetupTimerInterrupt+0x44>)
 800888e:	3b01      	subs	r3, #1
 8008890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008892:	4b04      	ldr	r3, [pc, #16]	; (80088a4 <vPortSetupTimerInterrupt+0x34>)
 8008894:	2207      	movs	r2, #7
 8008896:	601a      	str	r2, [r3, #0]
}
 8008898:	bf00      	nop
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	e000e010 	.word	0xe000e010
 80088a8:	e000e018 	.word	0xe000e018
 80088ac:	20000000 	.word	0x20000000
 80088b0:	10624dd3 	.word	0x10624dd3
 80088b4:	e000e014 	.word	0xe000e014

080088b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088c8 <vPortEnableVFP+0x10>
 80088bc:	6801      	ldr	r1, [r0, #0]
 80088be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088c2:	6001      	str	r1, [r0, #0]
 80088c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088c6:	bf00      	nop
 80088c8:	e000ed88 	.word	0xe000ed88

080088cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088d2:	f3ef 8305 	mrs	r3, IPSR
 80088d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b0f      	cmp	r3, #15
 80088dc:	d916      	bls.n	800890c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088de:	4a19      	ldr	r2, [pc, #100]	; (8008944 <vPortValidateInterruptPriority+0x78>)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088e8:	4b17      	ldr	r3, [pc, #92]	; (8008948 <vPortValidateInterruptPriority+0x7c>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	7afa      	ldrb	r2, [r7, #11]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d20c      	bcs.n	800890c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	b672      	cpsid	i
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	b662      	cpsie	i
 8008906:	607b      	str	r3, [r7, #4]
}
 8008908:	bf00      	nop
 800890a:	e7fe      	b.n	800890a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800890c:	4b0f      	ldr	r3, [pc, #60]	; (800894c <vPortValidateInterruptPriority+0x80>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008914:	4b0e      	ldr	r3, [pc, #56]	; (8008950 <vPortValidateInterruptPriority+0x84>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d90c      	bls.n	8008936 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	b672      	cpsid	i
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	b662      	cpsie	i
 8008930:	603b      	str	r3, [r7, #0]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <vPortValidateInterruptPriority+0x68>
	}
 8008936:	bf00      	nop
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	e000e3f0 	.word	0xe000e3f0
 8008948:	20001994 	.word	0x20001994
 800894c:	e000ed0c 	.word	0xe000ed0c
 8008950:	20001998 	.word	0x20001998

08008954 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08a      	sub	sp, #40	; 0x28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008960:	f7fe fd82 	bl	8007468 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008964:	4b5b      	ldr	r3, [pc, #364]	; (8008ad4 <pvPortMalloc+0x180>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800896c:	f000 f91a 	bl	8008ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008970:	4b59      	ldr	r3, [pc, #356]	; (8008ad8 <pvPortMalloc+0x184>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4013      	ands	r3, r2
 8008978:	2b00      	cmp	r3, #0
 800897a:	f040 8092 	bne.w	8008aa2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d01f      	beq.n	80089c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008984:	2208      	movs	r2, #8
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4413      	add	r3, r2
 800898a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	2b00      	cmp	r3, #0
 8008994:	d016      	beq.n	80089c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f023 0307 	bic.w	r3, r3, #7
 800899c:	3308      	adds	r3, #8
 800899e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f003 0307 	and.w	r3, r3, #7
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00c      	beq.n	80089c4 <pvPortMalloc+0x70>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	b672      	cpsid	i
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	b662      	cpsie	i
 80089be:	617b      	str	r3, [r7, #20]
}
 80089c0:	bf00      	nop
 80089c2:	e7fe      	b.n	80089c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d06b      	beq.n	8008aa2 <pvPortMalloc+0x14e>
 80089ca:	4b44      	ldr	r3, [pc, #272]	; (8008adc <pvPortMalloc+0x188>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d866      	bhi.n	8008aa2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089d4:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <pvPortMalloc+0x18c>)
 80089d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089d8:	4b41      	ldr	r3, [pc, #260]	; (8008ae0 <pvPortMalloc+0x18c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089de:	e004      	b.n	80089ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d903      	bls.n	80089fc <pvPortMalloc+0xa8>
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1f1      	bne.n	80089e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089fc:	4b35      	ldr	r3, [pc, #212]	; (8008ad4 <pvPortMalloc+0x180>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d04d      	beq.n	8008aa2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2208      	movs	r2, #8
 8008a0c:	4413      	add	r3, r2
 8008a0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	2308      	movs	r3, #8
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d921      	bls.n	8008a6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00c      	beq.n	8008a54 <pvPortMalloc+0x100>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	b672      	cpsid	i
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	b662      	cpsie	i
 8008a4e:	613b      	str	r3, [r7, #16]
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a66:	69b8      	ldr	r0, [r7, #24]
 8008a68:	f000 f8fe 	bl	8008c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a6c:	4b1b      	ldr	r3, [pc, #108]	; (8008adc <pvPortMalloc+0x188>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	4a19      	ldr	r2, [pc, #100]	; (8008adc <pvPortMalloc+0x188>)
 8008a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a7a:	4b18      	ldr	r3, [pc, #96]	; (8008adc <pvPortMalloc+0x188>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	4b19      	ldr	r3, [pc, #100]	; (8008ae4 <pvPortMalloc+0x190>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d203      	bcs.n	8008a8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a86:	4b15      	ldr	r3, [pc, #84]	; (8008adc <pvPortMalloc+0x188>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a16      	ldr	r2, [pc, #88]	; (8008ae4 <pvPortMalloc+0x190>)
 8008a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <pvPortMalloc+0x184>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008aa2:	f7fe fcef 	bl	8007484 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00c      	beq.n	8008aca <pvPortMalloc+0x176>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	b672      	cpsid	i
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	b662      	cpsie	i
 8008ac4:	60fb      	str	r3, [r7, #12]
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <pvPortMalloc+0x174>
	return pvReturn;
 8008aca:	69fb      	ldr	r3, [r7, #28]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3728      	adds	r7, #40	; 0x28
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	200055a4 	.word	0x200055a4
 8008ad8:	200055b0 	.word	0x200055b0
 8008adc:	200055a8 	.word	0x200055a8
 8008ae0:	2000559c 	.word	0x2000559c
 8008ae4:	200055ac 	.word	0x200055ac

08008ae8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d04c      	beq.n	8008b94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008afa:	2308      	movs	r3, #8
 8008afc:	425b      	negs	r3, r3
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	4413      	add	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	4b23      	ldr	r3, [pc, #140]	; (8008b9c <vPortFree+0xb4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10c      	bne.n	8008b30 <vPortFree+0x48>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	b672      	cpsid	i
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	b662      	cpsie	i
 8008b2a:	60fb      	str	r3, [r7, #12]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00c      	beq.n	8008b52 <vPortFree+0x6a>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	b672      	cpsid	i
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	b662      	cpsie	i
 8008b4c:	60bb      	str	r3, [r7, #8]
}
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <vPortFree+0xb4>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d019      	beq.n	8008b94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d115      	bne.n	8008b94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <vPortFree+0xb4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	43db      	mvns	r3, r3
 8008b72:	401a      	ands	r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b78:	f7fe fc76 	bl	8007468 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <vPortFree+0xb8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4413      	add	r3, r2
 8008b86:	4a06      	ldr	r2, [pc, #24]	; (8008ba0 <vPortFree+0xb8>)
 8008b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b8a:	6938      	ldr	r0, [r7, #16]
 8008b8c:	f000 f86c 	bl	8008c68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b90:	f7fe fc78 	bl	8007484 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b94:	bf00      	nop
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	200055b0 	.word	0x200055b0
 8008ba0:	200055a8 	.word	0x200055a8

08008ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bb0:	4b27      	ldr	r3, [pc, #156]	; (8008c50 <prvHeapInit+0xac>)
 8008bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00c      	beq.n	8008bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3307      	adds	r3, #7
 8008bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0307 	bic.w	r3, r3, #7
 8008bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	4a1f      	ldr	r2, [pc, #124]	; (8008c50 <prvHeapInit+0xac>)
 8008bd4:	4413      	add	r3, r2
 8008bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bdc:	4a1d      	ldr	r2, [pc, #116]	; (8008c54 <prvHeapInit+0xb0>)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008be2:	4b1c      	ldr	r3, [pc, #112]	; (8008c54 <prvHeapInit+0xb0>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	4413      	add	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0307 	bic.w	r3, r3, #7
 8008bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4a15      	ldr	r2, [pc, #84]	; (8008c58 <prvHeapInit+0xb4>)
 8008c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <prvHeapInit+0xb4>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <prvHeapInit+0xb4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c24:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <prvHeapInit+0xb4>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	4a0a      	ldr	r2, [pc, #40]	; (8008c5c <prvHeapInit+0xb8>)
 8008c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	4a09      	ldr	r2, [pc, #36]	; (8008c60 <prvHeapInit+0xbc>)
 8008c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c3c:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <prvHeapInit+0xc0>)
 8008c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c42:	601a      	str	r2, [r3, #0]
}
 8008c44:	bf00      	nop
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	2000199c 	.word	0x2000199c
 8008c54:	2000559c 	.word	0x2000559c
 8008c58:	200055a4 	.word	0x200055a4
 8008c5c:	200055ac 	.word	0x200055ac
 8008c60:	200055a8 	.word	0x200055a8
 8008c64:	200055b0 	.word	0x200055b0

08008c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c70:	4b28      	ldr	r3, [pc, #160]	; (8008d14 <prvInsertBlockIntoFreeList+0xac>)
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	e002      	b.n	8008c7c <prvInsertBlockIntoFreeList+0x14>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d8f7      	bhi.n	8008c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	4413      	add	r3, r2
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d108      	bne.n	8008caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	441a      	add	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	441a      	add	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d118      	bne.n	8008cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <prvInsertBlockIntoFreeList+0xb0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d00d      	beq.n	8008ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	441a      	add	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	e008      	b.n	8008cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <prvInsertBlockIntoFreeList+0xb0>)
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	e003      	b.n	8008cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d002      	beq.n	8008d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d06:	bf00      	nop
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	2000559c 	.word	0x2000559c
 8008d18:	200055a4 	.word	0x200055a4

08008d1c <__errno>:
 8008d1c:	4b01      	ldr	r3, [pc, #4]	; (8008d24 <__errno+0x8>)
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20000010 	.word	0x20000010

08008d28 <std>:
 8008d28:	2300      	movs	r3, #0
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d36:	6083      	str	r3, [r0, #8]
 8008d38:	8181      	strh	r1, [r0, #12]
 8008d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d3c:	81c2      	strh	r2, [r0, #14]
 8008d3e:	6183      	str	r3, [r0, #24]
 8008d40:	4619      	mov	r1, r3
 8008d42:	2208      	movs	r2, #8
 8008d44:	305c      	adds	r0, #92	; 0x5c
 8008d46:	f000 f91a 	bl	8008f7e <memset>
 8008d4a:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <std+0x38>)
 8008d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d4e:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <std+0x3c>)
 8008d50:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d52:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <std+0x40>)
 8008d54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d56:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <std+0x44>)
 8008d58:	6224      	str	r4, [r4, #32]
 8008d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d5c:	bd10      	pop	{r4, pc}
 8008d5e:	bf00      	nop
 8008d60:	080091ad 	.word	0x080091ad
 8008d64:	080091cf 	.word	0x080091cf
 8008d68:	08009207 	.word	0x08009207
 8008d6c:	0800922b 	.word	0x0800922b

08008d70 <_cleanup_r>:
 8008d70:	4901      	ldr	r1, [pc, #4]	; (8008d78 <_cleanup_r+0x8>)
 8008d72:	f000 b8af 	b.w	8008ed4 <_fwalk_reent>
 8008d76:	bf00      	nop
 8008d78:	08009f65 	.word	0x08009f65

08008d7c <__sfmoreglue>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	2268      	movs	r2, #104	; 0x68
 8008d80:	1e4d      	subs	r5, r1, #1
 8008d82:	4355      	muls	r5, r2
 8008d84:	460e      	mov	r6, r1
 8008d86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d8a:	f000 f921 	bl	8008fd0 <_malloc_r>
 8008d8e:	4604      	mov	r4, r0
 8008d90:	b140      	cbz	r0, 8008da4 <__sfmoreglue+0x28>
 8008d92:	2100      	movs	r1, #0
 8008d94:	e9c0 1600 	strd	r1, r6, [r0]
 8008d98:	300c      	adds	r0, #12
 8008d9a:	60a0      	str	r0, [r4, #8]
 8008d9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008da0:	f000 f8ed 	bl	8008f7e <memset>
 8008da4:	4620      	mov	r0, r4
 8008da6:	bd70      	pop	{r4, r5, r6, pc}

08008da8 <__sfp_lock_acquire>:
 8008da8:	4801      	ldr	r0, [pc, #4]	; (8008db0 <__sfp_lock_acquire+0x8>)
 8008daa:	f000 b8d8 	b.w	8008f5e <__retarget_lock_acquire_recursive>
 8008dae:	bf00      	nop
 8008db0:	200055b5 	.word	0x200055b5

08008db4 <__sfp_lock_release>:
 8008db4:	4801      	ldr	r0, [pc, #4]	; (8008dbc <__sfp_lock_release+0x8>)
 8008db6:	f000 b8d3 	b.w	8008f60 <__retarget_lock_release_recursive>
 8008dba:	bf00      	nop
 8008dbc:	200055b5 	.word	0x200055b5

08008dc0 <__sinit_lock_acquire>:
 8008dc0:	4801      	ldr	r0, [pc, #4]	; (8008dc8 <__sinit_lock_acquire+0x8>)
 8008dc2:	f000 b8cc 	b.w	8008f5e <__retarget_lock_acquire_recursive>
 8008dc6:	bf00      	nop
 8008dc8:	200055b6 	.word	0x200055b6

08008dcc <__sinit_lock_release>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__sinit_lock_release+0x8>)
 8008dce:	f000 b8c7 	b.w	8008f60 <__retarget_lock_release_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	200055b6 	.word	0x200055b6

08008dd8 <__sinit>:
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	4604      	mov	r4, r0
 8008ddc:	f7ff fff0 	bl	8008dc0 <__sinit_lock_acquire>
 8008de0:	69a3      	ldr	r3, [r4, #24]
 8008de2:	b11b      	cbz	r3, 8008dec <__sinit+0x14>
 8008de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de8:	f7ff bff0 	b.w	8008dcc <__sinit_lock_release>
 8008dec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008df0:	6523      	str	r3, [r4, #80]	; 0x50
 8008df2:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <__sinit+0x68>)
 8008df4:	4a13      	ldr	r2, [pc, #76]	; (8008e44 <__sinit+0x6c>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dfa:	42a3      	cmp	r3, r4
 8008dfc:	bf04      	itt	eq
 8008dfe:	2301      	moveq	r3, #1
 8008e00:	61a3      	streq	r3, [r4, #24]
 8008e02:	4620      	mov	r0, r4
 8008e04:	f000 f820 	bl	8008e48 <__sfp>
 8008e08:	6060      	str	r0, [r4, #4]
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 f81c 	bl	8008e48 <__sfp>
 8008e10:	60a0      	str	r0, [r4, #8]
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 f818 	bl	8008e48 <__sfp>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	60e0      	str	r0, [r4, #12]
 8008e1c:	2104      	movs	r1, #4
 8008e1e:	6860      	ldr	r0, [r4, #4]
 8008e20:	f7ff ff82 	bl	8008d28 <std>
 8008e24:	68a0      	ldr	r0, [r4, #8]
 8008e26:	2201      	movs	r2, #1
 8008e28:	2109      	movs	r1, #9
 8008e2a:	f7ff ff7d 	bl	8008d28 <std>
 8008e2e:	68e0      	ldr	r0, [r4, #12]
 8008e30:	2202      	movs	r2, #2
 8008e32:	2112      	movs	r1, #18
 8008e34:	f7ff ff78 	bl	8008d28 <std>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	61a3      	str	r3, [r4, #24]
 8008e3c:	e7d2      	b.n	8008de4 <__sinit+0xc>
 8008e3e:	bf00      	nop
 8008e40:	0800bcfc 	.word	0x0800bcfc
 8008e44:	08008d71 	.word	0x08008d71

08008e48 <__sfp>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	4607      	mov	r7, r0
 8008e4c:	f7ff ffac 	bl	8008da8 <__sfp_lock_acquire>
 8008e50:	4b1e      	ldr	r3, [pc, #120]	; (8008ecc <__sfp+0x84>)
 8008e52:	681e      	ldr	r6, [r3, #0]
 8008e54:	69b3      	ldr	r3, [r6, #24]
 8008e56:	b913      	cbnz	r3, 8008e5e <__sfp+0x16>
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f7ff ffbd 	bl	8008dd8 <__sinit>
 8008e5e:	3648      	adds	r6, #72	; 0x48
 8008e60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	d503      	bpl.n	8008e70 <__sfp+0x28>
 8008e68:	6833      	ldr	r3, [r6, #0]
 8008e6a:	b30b      	cbz	r3, 8008eb0 <__sfp+0x68>
 8008e6c:	6836      	ldr	r6, [r6, #0]
 8008e6e:	e7f7      	b.n	8008e60 <__sfp+0x18>
 8008e70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e74:	b9d5      	cbnz	r5, 8008eac <__sfp+0x64>
 8008e76:	4b16      	ldr	r3, [pc, #88]	; (8008ed0 <__sfp+0x88>)
 8008e78:	60e3      	str	r3, [r4, #12]
 8008e7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e7e:	6665      	str	r5, [r4, #100]	; 0x64
 8008e80:	f000 f86c 	bl	8008f5c <__retarget_lock_init_recursive>
 8008e84:	f7ff ff96 	bl	8008db4 <__sfp_lock_release>
 8008e88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e90:	6025      	str	r5, [r4, #0]
 8008e92:	61a5      	str	r5, [r4, #24]
 8008e94:	2208      	movs	r2, #8
 8008e96:	4629      	mov	r1, r5
 8008e98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e9c:	f000 f86f 	bl	8008f7e <memset>
 8008ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eac:	3468      	adds	r4, #104	; 0x68
 8008eae:	e7d9      	b.n	8008e64 <__sfp+0x1c>
 8008eb0:	2104      	movs	r1, #4
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	f7ff ff62 	bl	8008d7c <__sfmoreglue>
 8008eb8:	4604      	mov	r4, r0
 8008eba:	6030      	str	r0, [r6, #0]
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d1d5      	bne.n	8008e6c <__sfp+0x24>
 8008ec0:	f7ff ff78 	bl	8008db4 <__sfp_lock_release>
 8008ec4:	230c      	movs	r3, #12
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	e7ee      	b.n	8008ea8 <__sfp+0x60>
 8008eca:	bf00      	nop
 8008ecc:	0800bcfc 	.word	0x0800bcfc
 8008ed0:	ffff0001 	.word	0xffff0001

08008ed4 <_fwalk_reent>:
 8008ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed8:	4606      	mov	r6, r0
 8008eda:	4688      	mov	r8, r1
 8008edc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ee0:	2700      	movs	r7, #0
 8008ee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ee6:	f1b9 0901 	subs.w	r9, r9, #1
 8008eea:	d505      	bpl.n	8008ef8 <_fwalk_reent+0x24>
 8008eec:	6824      	ldr	r4, [r4, #0]
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	d1f7      	bne.n	8008ee2 <_fwalk_reent+0xe>
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef8:	89ab      	ldrh	r3, [r5, #12]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d907      	bls.n	8008f0e <_fwalk_reent+0x3a>
 8008efe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f02:	3301      	adds	r3, #1
 8008f04:	d003      	beq.n	8008f0e <_fwalk_reent+0x3a>
 8008f06:	4629      	mov	r1, r5
 8008f08:	4630      	mov	r0, r6
 8008f0a:	47c0      	blx	r8
 8008f0c:	4307      	orrs	r7, r0
 8008f0e:	3568      	adds	r5, #104	; 0x68
 8008f10:	e7e9      	b.n	8008ee6 <_fwalk_reent+0x12>
	...

08008f14 <__libc_init_array>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	4d0d      	ldr	r5, [pc, #52]	; (8008f4c <__libc_init_array+0x38>)
 8008f18:	4c0d      	ldr	r4, [pc, #52]	; (8008f50 <__libc_init_array+0x3c>)
 8008f1a:	1b64      	subs	r4, r4, r5
 8008f1c:	10a4      	asrs	r4, r4, #2
 8008f1e:	2600      	movs	r6, #0
 8008f20:	42a6      	cmp	r6, r4
 8008f22:	d109      	bne.n	8008f38 <__libc_init_array+0x24>
 8008f24:	4d0b      	ldr	r5, [pc, #44]	; (8008f54 <__libc_init_array+0x40>)
 8008f26:	4c0c      	ldr	r4, [pc, #48]	; (8008f58 <__libc_init_array+0x44>)
 8008f28:	f002 fdf8 	bl	800bb1c <_init>
 8008f2c:	1b64      	subs	r4, r4, r5
 8008f2e:	10a4      	asrs	r4, r4, #2
 8008f30:	2600      	movs	r6, #0
 8008f32:	42a6      	cmp	r6, r4
 8008f34:	d105      	bne.n	8008f42 <__libc_init_array+0x2e>
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3c:	4798      	blx	r3
 8008f3e:	3601      	adds	r6, #1
 8008f40:	e7ee      	b.n	8008f20 <__libc_init_array+0xc>
 8008f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f46:	4798      	blx	r3
 8008f48:	3601      	adds	r6, #1
 8008f4a:	e7f2      	b.n	8008f32 <__libc_init_array+0x1e>
 8008f4c:	0800c0d4 	.word	0x0800c0d4
 8008f50:	0800c0d4 	.word	0x0800c0d4
 8008f54:	0800c0d4 	.word	0x0800c0d4
 8008f58:	0800c0d8 	.word	0x0800c0d8

08008f5c <__retarget_lock_init_recursive>:
 8008f5c:	4770      	bx	lr

08008f5e <__retarget_lock_acquire_recursive>:
 8008f5e:	4770      	bx	lr

08008f60 <__retarget_lock_release_recursive>:
 8008f60:	4770      	bx	lr

08008f62 <memcpy>:
 8008f62:	440a      	add	r2, r1
 8008f64:	4291      	cmp	r1, r2
 8008f66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f6a:	d100      	bne.n	8008f6e <memcpy+0xc>
 8008f6c:	4770      	bx	lr
 8008f6e:	b510      	push	{r4, lr}
 8008f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f78:	4291      	cmp	r1, r2
 8008f7a:	d1f9      	bne.n	8008f70 <memcpy+0xe>
 8008f7c:	bd10      	pop	{r4, pc}

08008f7e <memset>:
 8008f7e:	4402      	add	r2, r0
 8008f80:	4603      	mov	r3, r0
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d100      	bne.n	8008f88 <memset+0xa>
 8008f86:	4770      	bx	lr
 8008f88:	f803 1b01 	strb.w	r1, [r3], #1
 8008f8c:	e7f9      	b.n	8008f82 <memset+0x4>
	...

08008f90 <sbrk_aligned>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	4e0e      	ldr	r6, [pc, #56]	; (8008fcc <sbrk_aligned+0x3c>)
 8008f94:	460c      	mov	r4, r1
 8008f96:	6831      	ldr	r1, [r6, #0]
 8008f98:	4605      	mov	r5, r0
 8008f9a:	b911      	cbnz	r1, 8008fa2 <sbrk_aligned+0x12>
 8008f9c:	f000 f8f6 	bl	800918c <_sbrk_r>
 8008fa0:	6030      	str	r0, [r6, #0]
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 f8f1 	bl	800918c <_sbrk_r>
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	d00a      	beq.n	8008fc4 <sbrk_aligned+0x34>
 8008fae:	1cc4      	adds	r4, r0, #3
 8008fb0:	f024 0403 	bic.w	r4, r4, #3
 8008fb4:	42a0      	cmp	r0, r4
 8008fb6:	d007      	beq.n	8008fc8 <sbrk_aligned+0x38>
 8008fb8:	1a21      	subs	r1, r4, r0
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 f8e6 	bl	800918c <_sbrk_r>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d101      	bne.n	8008fc8 <sbrk_aligned+0x38>
 8008fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fc8:	4620      	mov	r0, r4
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	200055bc 	.word	0x200055bc

08008fd0 <_malloc_r>:
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	1ccd      	adds	r5, r1, #3
 8008fd6:	f025 0503 	bic.w	r5, r5, #3
 8008fda:	3508      	adds	r5, #8
 8008fdc:	2d0c      	cmp	r5, #12
 8008fde:	bf38      	it	cc
 8008fe0:	250c      	movcc	r5, #12
 8008fe2:	2d00      	cmp	r5, #0
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	db01      	blt.n	8008fec <_malloc_r+0x1c>
 8008fe8:	42a9      	cmp	r1, r5
 8008fea:	d905      	bls.n	8008ff8 <_malloc_r+0x28>
 8008fec:	230c      	movs	r3, #12
 8008fee:	603b      	str	r3, [r7, #0]
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff8:	4e2e      	ldr	r6, [pc, #184]	; (80090b4 <_malloc_r+0xe4>)
 8008ffa:	f001 fb83 	bl	800a704 <__malloc_lock>
 8008ffe:	6833      	ldr	r3, [r6, #0]
 8009000:	461c      	mov	r4, r3
 8009002:	bb34      	cbnz	r4, 8009052 <_malloc_r+0x82>
 8009004:	4629      	mov	r1, r5
 8009006:	4638      	mov	r0, r7
 8009008:	f7ff ffc2 	bl	8008f90 <sbrk_aligned>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	4604      	mov	r4, r0
 8009010:	d14d      	bne.n	80090ae <_malloc_r+0xde>
 8009012:	6834      	ldr	r4, [r6, #0]
 8009014:	4626      	mov	r6, r4
 8009016:	2e00      	cmp	r6, #0
 8009018:	d140      	bne.n	800909c <_malloc_r+0xcc>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	4631      	mov	r1, r6
 800901e:	4638      	mov	r0, r7
 8009020:	eb04 0803 	add.w	r8, r4, r3
 8009024:	f000 f8b2 	bl	800918c <_sbrk_r>
 8009028:	4580      	cmp	r8, r0
 800902a:	d13a      	bne.n	80090a2 <_malloc_r+0xd2>
 800902c:	6821      	ldr	r1, [r4, #0]
 800902e:	3503      	adds	r5, #3
 8009030:	1a6d      	subs	r5, r5, r1
 8009032:	f025 0503 	bic.w	r5, r5, #3
 8009036:	3508      	adds	r5, #8
 8009038:	2d0c      	cmp	r5, #12
 800903a:	bf38      	it	cc
 800903c:	250c      	movcc	r5, #12
 800903e:	4629      	mov	r1, r5
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ffa5 	bl	8008f90 <sbrk_aligned>
 8009046:	3001      	adds	r0, #1
 8009048:	d02b      	beq.n	80090a2 <_malloc_r+0xd2>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	442b      	add	r3, r5
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	e00e      	b.n	8009070 <_malloc_r+0xa0>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	1b52      	subs	r2, r2, r5
 8009056:	d41e      	bmi.n	8009096 <_malloc_r+0xc6>
 8009058:	2a0b      	cmp	r2, #11
 800905a:	d916      	bls.n	800908a <_malloc_r+0xba>
 800905c:	1961      	adds	r1, r4, r5
 800905e:	42a3      	cmp	r3, r4
 8009060:	6025      	str	r5, [r4, #0]
 8009062:	bf18      	it	ne
 8009064:	6059      	strne	r1, [r3, #4]
 8009066:	6863      	ldr	r3, [r4, #4]
 8009068:	bf08      	it	eq
 800906a:	6031      	streq	r1, [r6, #0]
 800906c:	5162      	str	r2, [r4, r5]
 800906e:	604b      	str	r3, [r1, #4]
 8009070:	4638      	mov	r0, r7
 8009072:	f104 060b 	add.w	r6, r4, #11
 8009076:	f001 fb4b 	bl	800a710 <__malloc_unlock>
 800907a:	f026 0607 	bic.w	r6, r6, #7
 800907e:	1d23      	adds	r3, r4, #4
 8009080:	1af2      	subs	r2, r6, r3
 8009082:	d0b6      	beq.n	8008ff2 <_malloc_r+0x22>
 8009084:	1b9b      	subs	r3, r3, r6
 8009086:	50a3      	str	r3, [r4, r2]
 8009088:	e7b3      	b.n	8008ff2 <_malloc_r+0x22>
 800908a:	6862      	ldr	r2, [r4, #4]
 800908c:	42a3      	cmp	r3, r4
 800908e:	bf0c      	ite	eq
 8009090:	6032      	streq	r2, [r6, #0]
 8009092:	605a      	strne	r2, [r3, #4]
 8009094:	e7ec      	b.n	8009070 <_malloc_r+0xa0>
 8009096:	4623      	mov	r3, r4
 8009098:	6864      	ldr	r4, [r4, #4]
 800909a:	e7b2      	b.n	8009002 <_malloc_r+0x32>
 800909c:	4634      	mov	r4, r6
 800909e:	6876      	ldr	r6, [r6, #4]
 80090a0:	e7b9      	b.n	8009016 <_malloc_r+0x46>
 80090a2:	230c      	movs	r3, #12
 80090a4:	603b      	str	r3, [r7, #0]
 80090a6:	4638      	mov	r0, r7
 80090a8:	f001 fb32 	bl	800a710 <__malloc_unlock>
 80090ac:	e7a1      	b.n	8008ff2 <_malloc_r+0x22>
 80090ae:	6025      	str	r5, [r4, #0]
 80090b0:	e7de      	b.n	8009070 <_malloc_r+0xa0>
 80090b2:	bf00      	nop
 80090b4:	200055b8 	.word	0x200055b8

080090b8 <cleanup_glue>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	460c      	mov	r4, r1
 80090bc:	6809      	ldr	r1, [r1, #0]
 80090be:	4605      	mov	r5, r0
 80090c0:	b109      	cbz	r1, 80090c6 <cleanup_glue+0xe>
 80090c2:	f7ff fff9 	bl	80090b8 <cleanup_glue>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4628      	mov	r0, r5
 80090ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ce:	f001 bff9 	b.w	800b0c4 <_free_r>
	...

080090d4 <_reclaim_reent>:
 80090d4:	4b2c      	ldr	r3, [pc, #176]	; (8009188 <_reclaim_reent+0xb4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4283      	cmp	r3, r0
 80090da:	b570      	push	{r4, r5, r6, lr}
 80090dc:	4604      	mov	r4, r0
 80090de:	d051      	beq.n	8009184 <_reclaim_reent+0xb0>
 80090e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80090e2:	b143      	cbz	r3, 80090f6 <_reclaim_reent+0x22>
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d14a      	bne.n	8009180 <_reclaim_reent+0xac>
 80090ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ec:	6819      	ldr	r1, [r3, #0]
 80090ee:	b111      	cbz	r1, 80090f6 <_reclaim_reent+0x22>
 80090f0:	4620      	mov	r0, r4
 80090f2:	f001 ffe7 	bl	800b0c4 <_free_r>
 80090f6:	6961      	ldr	r1, [r4, #20]
 80090f8:	b111      	cbz	r1, 8009100 <_reclaim_reent+0x2c>
 80090fa:	4620      	mov	r0, r4
 80090fc:	f001 ffe2 	bl	800b0c4 <_free_r>
 8009100:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009102:	b111      	cbz	r1, 800910a <_reclaim_reent+0x36>
 8009104:	4620      	mov	r0, r4
 8009106:	f001 ffdd 	bl	800b0c4 <_free_r>
 800910a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800910c:	b111      	cbz	r1, 8009114 <_reclaim_reent+0x40>
 800910e:	4620      	mov	r0, r4
 8009110:	f001 ffd8 	bl	800b0c4 <_free_r>
 8009114:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009116:	b111      	cbz	r1, 800911e <_reclaim_reent+0x4a>
 8009118:	4620      	mov	r0, r4
 800911a:	f001 ffd3 	bl	800b0c4 <_free_r>
 800911e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009120:	b111      	cbz	r1, 8009128 <_reclaim_reent+0x54>
 8009122:	4620      	mov	r0, r4
 8009124:	f001 ffce 	bl	800b0c4 <_free_r>
 8009128:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800912a:	b111      	cbz	r1, 8009132 <_reclaim_reent+0x5e>
 800912c:	4620      	mov	r0, r4
 800912e:	f001 ffc9 	bl	800b0c4 <_free_r>
 8009132:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009134:	b111      	cbz	r1, 800913c <_reclaim_reent+0x68>
 8009136:	4620      	mov	r0, r4
 8009138:	f001 ffc4 	bl	800b0c4 <_free_r>
 800913c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800913e:	b111      	cbz	r1, 8009146 <_reclaim_reent+0x72>
 8009140:	4620      	mov	r0, r4
 8009142:	f001 ffbf 	bl	800b0c4 <_free_r>
 8009146:	69a3      	ldr	r3, [r4, #24]
 8009148:	b1e3      	cbz	r3, 8009184 <_reclaim_reent+0xb0>
 800914a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800914c:	4620      	mov	r0, r4
 800914e:	4798      	blx	r3
 8009150:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009152:	b1b9      	cbz	r1, 8009184 <_reclaim_reent+0xb0>
 8009154:	4620      	mov	r0, r4
 8009156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800915a:	f7ff bfad 	b.w	80090b8 <cleanup_glue>
 800915e:	5949      	ldr	r1, [r1, r5]
 8009160:	b941      	cbnz	r1, 8009174 <_reclaim_reent+0xa0>
 8009162:	3504      	adds	r5, #4
 8009164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009166:	2d80      	cmp	r5, #128	; 0x80
 8009168:	68d9      	ldr	r1, [r3, #12]
 800916a:	d1f8      	bne.n	800915e <_reclaim_reent+0x8a>
 800916c:	4620      	mov	r0, r4
 800916e:	f001 ffa9 	bl	800b0c4 <_free_r>
 8009172:	e7ba      	b.n	80090ea <_reclaim_reent+0x16>
 8009174:	680e      	ldr	r6, [r1, #0]
 8009176:	4620      	mov	r0, r4
 8009178:	f001 ffa4 	bl	800b0c4 <_free_r>
 800917c:	4631      	mov	r1, r6
 800917e:	e7ef      	b.n	8009160 <_reclaim_reent+0x8c>
 8009180:	2500      	movs	r5, #0
 8009182:	e7ef      	b.n	8009164 <_reclaim_reent+0x90>
 8009184:	bd70      	pop	{r4, r5, r6, pc}
 8009186:	bf00      	nop
 8009188:	20000010 	.word	0x20000010

0800918c <_sbrk_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d06      	ldr	r5, [pc, #24]	; (80091a8 <_sbrk_r+0x1c>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	f7f8 fd8e 	bl	8001cb8 <_sbrk>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_sbrk_r+0x1a>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_sbrk_r+0x1a>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	200055c0 	.word	0x200055c0

080091ac <__sread>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	460c      	mov	r4, r1
 80091b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b4:	f001 ffd2 	bl	800b15c <_read_r>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	bfab      	itete	ge
 80091bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091be:	89a3      	ldrhlt	r3, [r4, #12]
 80091c0:	181b      	addge	r3, r3, r0
 80091c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091c6:	bfac      	ite	ge
 80091c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80091ca:	81a3      	strhlt	r3, [r4, #12]
 80091cc:	bd10      	pop	{r4, pc}

080091ce <__swrite>:
 80091ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d2:	461f      	mov	r7, r3
 80091d4:	898b      	ldrh	r3, [r1, #12]
 80091d6:	05db      	lsls	r3, r3, #23
 80091d8:	4605      	mov	r5, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	4616      	mov	r6, r2
 80091de:	d505      	bpl.n	80091ec <__swrite+0x1e>
 80091e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e4:	2302      	movs	r3, #2
 80091e6:	2200      	movs	r2, #0
 80091e8:	f001 fa68 	bl	800a6bc <_lseek_r>
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	4632      	mov	r2, r6
 80091fa:	463b      	mov	r3, r7
 80091fc:	4628      	mov	r0, r5
 80091fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	f000 be07 	b.w	8009e14 <_write_r>

08009206 <__sseek>:
 8009206:	b510      	push	{r4, lr}
 8009208:	460c      	mov	r4, r1
 800920a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920e:	f001 fa55 	bl	800a6bc <_lseek_r>
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	bf15      	itete	ne
 8009218:	6560      	strne	r0, [r4, #84]	; 0x54
 800921a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800921e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009222:	81a3      	strheq	r3, [r4, #12]
 8009224:	bf18      	it	ne
 8009226:	81a3      	strhne	r3, [r4, #12]
 8009228:	bd10      	pop	{r4, pc}

0800922a <__sclose>:
 800922a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922e:	f000 be03 	b.w	8009e38 <_close_r>

08009232 <strncmp>:
 8009232:	b510      	push	{r4, lr}
 8009234:	b17a      	cbz	r2, 8009256 <strncmp+0x24>
 8009236:	4603      	mov	r3, r0
 8009238:	3901      	subs	r1, #1
 800923a:	1884      	adds	r4, r0, r2
 800923c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009240:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009244:	4290      	cmp	r0, r2
 8009246:	d101      	bne.n	800924c <strncmp+0x1a>
 8009248:	42a3      	cmp	r3, r4
 800924a:	d101      	bne.n	8009250 <strncmp+0x1e>
 800924c:	1a80      	subs	r0, r0, r2
 800924e:	bd10      	pop	{r4, pc}
 8009250:	2800      	cmp	r0, #0
 8009252:	d1f3      	bne.n	800923c <strncmp+0xa>
 8009254:	e7fa      	b.n	800924c <strncmp+0x1a>
 8009256:	4610      	mov	r0, r2
 8009258:	e7f9      	b.n	800924e <strncmp+0x1c>

0800925a <sulp>:
 800925a:	b570      	push	{r4, r5, r6, lr}
 800925c:	4604      	mov	r4, r0
 800925e:	460d      	mov	r5, r1
 8009260:	4616      	mov	r6, r2
 8009262:	ec45 4b10 	vmov	d0, r4, r5
 8009266:	f001 fdcb 	bl	800ae00 <__ulp>
 800926a:	b17e      	cbz	r6, 800928c <sulp+0x32>
 800926c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009270:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009274:	2b00      	cmp	r3, #0
 8009276:	dd09      	ble.n	800928c <sulp+0x32>
 8009278:	051b      	lsls	r3, r3, #20
 800927a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800927e:	2000      	movs	r0, #0
 8009280:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009284:	ec41 0b17 	vmov	d7, r0, r1
 8009288:	ee20 0b07 	vmul.f64	d0, d0, d7
 800928c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009290 <_strtod_l>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	ed2d 8b0e 	vpush	{d8-d14}
 8009298:	b097      	sub	sp, #92	; 0x5c
 800929a:	461f      	mov	r7, r3
 800929c:	2300      	movs	r3, #0
 800929e:	9312      	str	r3, [sp, #72]	; 0x48
 80092a0:	4ba1      	ldr	r3, [pc, #644]	; (8009528 <_strtod_l+0x298>)
 80092a2:	920d      	str	r2, [sp, #52]	; 0x34
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	9307      	str	r3, [sp, #28]
 80092a8:	4604      	mov	r4, r0
 80092aa:	4618      	mov	r0, r3
 80092ac:	468b      	mov	fp, r1
 80092ae:	f7f6 ffc7 	bl	8000240 <strlen>
 80092b2:	f04f 0800 	mov.w	r8, #0
 80092b6:	4605      	mov	r5, r0
 80092b8:	f04f 0900 	mov.w	r9, #0
 80092bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80092c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80092c2:	7813      	ldrb	r3, [r2, #0]
 80092c4:	2b2b      	cmp	r3, #43	; 0x2b
 80092c6:	d04d      	beq.n	8009364 <_strtod_l+0xd4>
 80092c8:	d83a      	bhi.n	8009340 <_strtod_l+0xb0>
 80092ca:	2b0d      	cmp	r3, #13
 80092cc:	d833      	bhi.n	8009336 <_strtod_l+0xa6>
 80092ce:	2b08      	cmp	r3, #8
 80092d0:	d833      	bhi.n	800933a <_strtod_l+0xaa>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d03d      	beq.n	8009352 <_strtod_l+0xc2>
 80092d6:	2300      	movs	r3, #0
 80092d8:	9308      	str	r3, [sp, #32]
 80092da:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80092dc:	7833      	ldrb	r3, [r6, #0]
 80092de:	2b30      	cmp	r3, #48	; 0x30
 80092e0:	f040 80b0 	bne.w	8009444 <_strtod_l+0x1b4>
 80092e4:	7873      	ldrb	r3, [r6, #1]
 80092e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092ea:	2b58      	cmp	r3, #88	; 0x58
 80092ec:	d167      	bne.n	80093be <_strtod_l+0x12e>
 80092ee:	9b08      	ldr	r3, [sp, #32]
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	ab12      	add	r3, sp, #72	; 0x48
 80092f4:	9702      	str	r7, [sp, #8]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4a8c      	ldr	r2, [pc, #560]	; (800952c <_strtod_l+0x29c>)
 80092fa:	ab13      	add	r3, sp, #76	; 0x4c
 80092fc:	a911      	add	r1, sp, #68	; 0x44
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 fed4 	bl	800a0ac <__gethex>
 8009304:	f010 0507 	ands.w	r5, r0, #7
 8009308:	4607      	mov	r7, r0
 800930a:	d005      	beq.n	8009318 <_strtod_l+0x88>
 800930c:	2d06      	cmp	r5, #6
 800930e:	d12b      	bne.n	8009368 <_strtod_l+0xd8>
 8009310:	3601      	adds	r6, #1
 8009312:	2300      	movs	r3, #0
 8009314:	9611      	str	r6, [sp, #68]	; 0x44
 8009316:	9308      	str	r3, [sp, #32]
 8009318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931a:	2b00      	cmp	r3, #0
 800931c:	f040 854e 	bne.w	8009dbc <_strtod_l+0xb2c>
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	b1e3      	cbz	r3, 800935e <_strtod_l+0xce>
 8009324:	ec49 8b17 	vmov	d7, r8, r9
 8009328:	eeb1 0b47 	vneg.f64	d0, d7
 800932c:	b017      	add	sp, #92	; 0x5c
 800932e:	ecbd 8b0e 	vpop	{d8-d14}
 8009332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009336:	2b20      	cmp	r3, #32
 8009338:	d1cd      	bne.n	80092d6 <_strtod_l+0x46>
 800933a:	3201      	adds	r2, #1
 800933c:	9211      	str	r2, [sp, #68]	; 0x44
 800933e:	e7bf      	b.n	80092c0 <_strtod_l+0x30>
 8009340:	2b2d      	cmp	r3, #45	; 0x2d
 8009342:	d1c8      	bne.n	80092d6 <_strtod_l+0x46>
 8009344:	2301      	movs	r3, #1
 8009346:	9308      	str	r3, [sp, #32]
 8009348:	1c53      	adds	r3, r2, #1
 800934a:	9311      	str	r3, [sp, #68]	; 0x44
 800934c:	7853      	ldrb	r3, [r2, #1]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1c3      	bne.n	80092da <_strtod_l+0x4a>
 8009352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009354:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009358:	2b00      	cmp	r3, #0
 800935a:	f040 852d 	bne.w	8009db8 <_strtod_l+0xb28>
 800935e:	ec49 8b10 	vmov	d0, r8, r9
 8009362:	e7e3      	b.n	800932c <_strtod_l+0x9c>
 8009364:	2300      	movs	r3, #0
 8009366:	e7ee      	b.n	8009346 <_strtod_l+0xb6>
 8009368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800936a:	b13a      	cbz	r2, 800937c <_strtod_l+0xec>
 800936c:	2135      	movs	r1, #53	; 0x35
 800936e:	a814      	add	r0, sp, #80	; 0x50
 8009370:	f001 fe4e 	bl	800b010 <__copybits>
 8009374:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009376:	4620      	mov	r0, r4
 8009378:	f001 fa10 	bl	800a79c <_Bfree>
 800937c:	3d01      	subs	r5, #1
 800937e:	2d04      	cmp	r5, #4
 8009380:	d806      	bhi.n	8009390 <_strtod_l+0x100>
 8009382:	e8df f005 	tbb	[pc, r5]
 8009386:	030a      	.short	0x030a
 8009388:	1714      	.short	0x1714
 800938a:	0a          	.byte	0x0a
 800938b:	00          	.byte	0x00
 800938c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8009390:	073f      	lsls	r7, r7, #28
 8009392:	d5c1      	bpl.n	8009318 <_strtod_l+0x88>
 8009394:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009398:	e7be      	b.n	8009318 <_strtod_l+0x88>
 800939a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800939e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80093ac:	e7f0      	b.n	8009390 <_strtod_l+0x100>
 80093ae:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8009530 <_strtod_l+0x2a0>
 80093b2:	e7ed      	b.n	8009390 <_strtod_l+0x100>
 80093b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80093b8:	f04f 38ff 	mov.w	r8, #4294967295
 80093bc:	e7e8      	b.n	8009390 <_strtod_l+0x100>
 80093be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	9211      	str	r2, [sp, #68]	; 0x44
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	2b30      	cmp	r3, #48	; 0x30
 80093c8:	d0f9      	beq.n	80093be <_strtod_l+0x12e>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0a4      	beq.n	8009318 <_strtod_l+0x88>
 80093ce:	2301      	movs	r3, #1
 80093d0:	f04f 0a00 	mov.w	sl, #0
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093d8:	930a      	str	r3, [sp, #40]	; 0x28
 80093da:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80093de:	f8cd a018 	str.w	sl, [sp, #24]
 80093e2:	220a      	movs	r2, #10
 80093e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80093e6:	7807      	ldrb	r7, [r0, #0]
 80093e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80093ec:	b2d9      	uxtb	r1, r3
 80093ee:	2909      	cmp	r1, #9
 80093f0:	d92a      	bls.n	8009448 <_strtod_l+0x1b8>
 80093f2:	9907      	ldr	r1, [sp, #28]
 80093f4:	462a      	mov	r2, r5
 80093f6:	f7ff ff1c 	bl	8009232 <strncmp>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d033      	beq.n	8009466 <_strtod_l+0x1d6>
 80093fe:	2000      	movs	r0, #0
 8009400:	9b06      	ldr	r3, [sp, #24]
 8009402:	463a      	mov	r2, r7
 8009404:	4601      	mov	r1, r0
 8009406:	4607      	mov	r7, r0
 8009408:	2a65      	cmp	r2, #101	; 0x65
 800940a:	d001      	beq.n	8009410 <_strtod_l+0x180>
 800940c:	2a45      	cmp	r2, #69	; 0x45
 800940e:	d117      	bne.n	8009440 <_strtod_l+0x1b0>
 8009410:	b91b      	cbnz	r3, 800941a <_strtod_l+0x18a>
 8009412:	9b04      	ldr	r3, [sp, #16]
 8009414:	4303      	orrs	r3, r0
 8009416:	d09c      	beq.n	8009352 <_strtod_l+0xc2>
 8009418:	2300      	movs	r3, #0
 800941a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800941e:	f10b 0201 	add.w	r2, fp, #1
 8009422:	9211      	str	r2, [sp, #68]	; 0x44
 8009424:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8009428:	2a2b      	cmp	r2, #43	; 0x2b
 800942a:	d071      	beq.n	8009510 <_strtod_l+0x280>
 800942c:	2a2d      	cmp	r2, #45	; 0x2d
 800942e:	d077      	beq.n	8009520 <_strtod_l+0x290>
 8009430:	f04f 0e00 	mov.w	lr, #0
 8009434:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009438:	2d09      	cmp	r5, #9
 800943a:	d97f      	bls.n	800953c <_strtod_l+0x2ac>
 800943c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009440:	2500      	movs	r5, #0
 8009442:	e09b      	b.n	800957c <_strtod_l+0x2ec>
 8009444:	2300      	movs	r3, #0
 8009446:	e7c3      	b.n	80093d0 <_strtod_l+0x140>
 8009448:	9906      	ldr	r1, [sp, #24]
 800944a:	2908      	cmp	r1, #8
 800944c:	bfdd      	ittte	le
 800944e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009450:	fb02 3301 	mlale	r3, r2, r1, r3
 8009454:	9309      	strle	r3, [sp, #36]	; 0x24
 8009456:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800945a:	9b06      	ldr	r3, [sp, #24]
 800945c:	3001      	adds	r0, #1
 800945e:	3301      	adds	r3, #1
 8009460:	9306      	str	r3, [sp, #24]
 8009462:	9011      	str	r0, [sp, #68]	; 0x44
 8009464:	e7be      	b.n	80093e4 <_strtod_l+0x154>
 8009466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009468:	195a      	adds	r2, r3, r5
 800946a:	9211      	str	r2, [sp, #68]	; 0x44
 800946c:	5d5a      	ldrb	r2, [r3, r5]
 800946e:	9b06      	ldr	r3, [sp, #24]
 8009470:	b3a3      	cbz	r3, 80094dc <_strtod_l+0x24c>
 8009472:	4607      	mov	r7, r0
 8009474:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009478:	2909      	cmp	r1, #9
 800947a:	d912      	bls.n	80094a2 <_strtod_l+0x212>
 800947c:	2101      	movs	r1, #1
 800947e:	e7c3      	b.n	8009408 <_strtod_l+0x178>
 8009480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	9211      	str	r2, [sp, #68]	; 0x44
 8009486:	785a      	ldrb	r2, [r3, #1]
 8009488:	3001      	adds	r0, #1
 800948a:	2a30      	cmp	r2, #48	; 0x30
 800948c:	d0f8      	beq.n	8009480 <_strtod_l+0x1f0>
 800948e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009492:	2b08      	cmp	r3, #8
 8009494:	f200 8497 	bhi.w	8009dc6 <_strtod_l+0xb36>
 8009498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800949a:	930a      	str	r3, [sp, #40]	; 0x28
 800949c:	4607      	mov	r7, r0
 800949e:	2000      	movs	r0, #0
 80094a0:	4603      	mov	r3, r0
 80094a2:	3a30      	subs	r2, #48	; 0x30
 80094a4:	f100 0101 	add.w	r1, r0, #1
 80094a8:	d012      	beq.n	80094d0 <_strtod_l+0x240>
 80094aa:	440f      	add	r7, r1
 80094ac:	eb00 0c03 	add.w	ip, r0, r3
 80094b0:	4619      	mov	r1, r3
 80094b2:	250a      	movs	r5, #10
 80094b4:	4561      	cmp	r1, ip
 80094b6:	d113      	bne.n	80094e0 <_strtod_l+0x250>
 80094b8:	1819      	adds	r1, r3, r0
 80094ba:	2908      	cmp	r1, #8
 80094bc:	f103 0301 	add.w	r3, r3, #1
 80094c0:	4403      	add	r3, r0
 80094c2:	dc1c      	bgt.n	80094fe <_strtod_l+0x26e>
 80094c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c6:	210a      	movs	r1, #10
 80094c8:	fb01 2200 	mla	r2, r1, r0, r2
 80094cc:	9209      	str	r2, [sp, #36]	; 0x24
 80094ce:	2100      	movs	r1, #0
 80094d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094d2:	1c50      	adds	r0, r2, #1
 80094d4:	9011      	str	r0, [sp, #68]	; 0x44
 80094d6:	7852      	ldrb	r2, [r2, #1]
 80094d8:	4608      	mov	r0, r1
 80094da:	e7cb      	b.n	8009474 <_strtod_l+0x1e4>
 80094dc:	9806      	ldr	r0, [sp, #24]
 80094de:	e7d4      	b.n	800948a <_strtod_l+0x1fa>
 80094e0:	2908      	cmp	r1, #8
 80094e2:	dc04      	bgt.n	80094ee <_strtod_l+0x25e>
 80094e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80094e6:	436e      	muls	r6, r5
 80094e8:	9609      	str	r6, [sp, #36]	; 0x24
 80094ea:	3101      	adds	r1, #1
 80094ec:	e7e2      	b.n	80094b4 <_strtod_l+0x224>
 80094ee:	f101 0e01 	add.w	lr, r1, #1
 80094f2:	f1be 0f10 	cmp.w	lr, #16
 80094f6:	bfd8      	it	le
 80094f8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80094fc:	e7f5      	b.n	80094ea <_strtod_l+0x25a>
 80094fe:	2b10      	cmp	r3, #16
 8009500:	bfdc      	itt	le
 8009502:	210a      	movle	r1, #10
 8009504:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8009508:	e7e1      	b.n	80094ce <_strtod_l+0x23e>
 800950a:	2700      	movs	r7, #0
 800950c:	2101      	movs	r1, #1
 800950e:	e780      	b.n	8009412 <_strtod_l+0x182>
 8009510:	f04f 0e00 	mov.w	lr, #0
 8009514:	f10b 0202 	add.w	r2, fp, #2
 8009518:	9211      	str	r2, [sp, #68]	; 0x44
 800951a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800951e:	e789      	b.n	8009434 <_strtod_l+0x1a4>
 8009520:	f04f 0e01 	mov.w	lr, #1
 8009524:	e7f6      	b.n	8009514 <_strtod_l+0x284>
 8009526:	bf00      	nop
 8009528:	0800bdd8 	.word	0x0800bdd8
 800952c:	0800bd0c 	.word	0x0800bd0c
 8009530:	7ff00000 	.word	0x7ff00000
 8009534:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009536:	1c55      	adds	r5, r2, #1
 8009538:	9511      	str	r5, [sp, #68]	; 0x44
 800953a:	7852      	ldrb	r2, [r2, #1]
 800953c:	2a30      	cmp	r2, #48	; 0x30
 800953e:	d0f9      	beq.n	8009534 <_strtod_l+0x2a4>
 8009540:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009544:	2d08      	cmp	r5, #8
 8009546:	f63f af7b 	bhi.w	8009440 <_strtod_l+0x1b0>
 800954a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800954e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009550:	9207      	str	r2, [sp, #28]
 8009552:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009554:	1c55      	adds	r5, r2, #1
 8009556:	9511      	str	r5, [sp, #68]	; 0x44
 8009558:	7852      	ldrb	r2, [r2, #1]
 800955a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800955e:	2e09      	cmp	r6, #9
 8009560:	d937      	bls.n	80095d2 <_strtod_l+0x342>
 8009562:	9e07      	ldr	r6, [sp, #28]
 8009564:	1bad      	subs	r5, r5, r6
 8009566:	2d08      	cmp	r5, #8
 8009568:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800956c:	dc02      	bgt.n	8009574 <_strtod_l+0x2e4>
 800956e:	4565      	cmp	r5, ip
 8009570:	bfa8      	it	ge
 8009572:	4665      	movge	r5, ip
 8009574:	f1be 0f00 	cmp.w	lr, #0
 8009578:	d000      	beq.n	800957c <_strtod_l+0x2ec>
 800957a:	426d      	negs	r5, r5
 800957c:	2b00      	cmp	r3, #0
 800957e:	d14d      	bne.n	800961c <_strtod_l+0x38c>
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	4303      	orrs	r3, r0
 8009584:	f47f aec8 	bne.w	8009318 <_strtod_l+0x88>
 8009588:	2900      	cmp	r1, #0
 800958a:	f47f aee2 	bne.w	8009352 <_strtod_l+0xc2>
 800958e:	2a69      	cmp	r2, #105	; 0x69
 8009590:	d027      	beq.n	80095e2 <_strtod_l+0x352>
 8009592:	dc24      	bgt.n	80095de <_strtod_l+0x34e>
 8009594:	2a49      	cmp	r2, #73	; 0x49
 8009596:	d024      	beq.n	80095e2 <_strtod_l+0x352>
 8009598:	2a4e      	cmp	r2, #78	; 0x4e
 800959a:	f47f aeda 	bne.w	8009352 <_strtod_l+0xc2>
 800959e:	4996      	ldr	r1, [pc, #600]	; (80097f8 <_strtod_l+0x568>)
 80095a0:	a811      	add	r0, sp, #68	; 0x44
 80095a2:	f000 ffdb 	bl	800a55c <__match>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f43f aed3 	beq.w	8009352 <_strtod_l+0xc2>
 80095ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b28      	cmp	r3, #40	; 0x28
 80095b2:	d12d      	bne.n	8009610 <_strtod_l+0x380>
 80095b4:	4991      	ldr	r1, [pc, #580]	; (80097fc <_strtod_l+0x56c>)
 80095b6:	aa14      	add	r2, sp, #80	; 0x50
 80095b8:	a811      	add	r0, sp, #68	; 0x44
 80095ba:	f000 ffe3 	bl	800a584 <__hexnan>
 80095be:	2805      	cmp	r0, #5
 80095c0:	d126      	bne.n	8009610 <_strtod_l+0x380>
 80095c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095c4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80095c8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80095cc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80095d0:	e6a2      	b.n	8009318 <_strtod_l+0x88>
 80095d2:	250a      	movs	r5, #10
 80095d4:	fb05 250c 	mla	r5, r5, ip, r2
 80095d8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80095dc:	e7b9      	b.n	8009552 <_strtod_l+0x2c2>
 80095de:	2a6e      	cmp	r2, #110	; 0x6e
 80095e0:	e7db      	b.n	800959a <_strtod_l+0x30a>
 80095e2:	4987      	ldr	r1, [pc, #540]	; (8009800 <_strtod_l+0x570>)
 80095e4:	a811      	add	r0, sp, #68	; 0x44
 80095e6:	f000 ffb9 	bl	800a55c <__match>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	f43f aeb1 	beq.w	8009352 <_strtod_l+0xc2>
 80095f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095f2:	4984      	ldr	r1, [pc, #528]	; (8009804 <_strtod_l+0x574>)
 80095f4:	3b01      	subs	r3, #1
 80095f6:	a811      	add	r0, sp, #68	; 0x44
 80095f8:	9311      	str	r3, [sp, #68]	; 0x44
 80095fa:	f000 ffaf 	bl	800a55c <__match>
 80095fe:	b910      	cbnz	r0, 8009606 <_strtod_l+0x376>
 8009600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009602:	3301      	adds	r3, #1
 8009604:	9311      	str	r3, [sp, #68]	; 0x44
 8009606:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009818 <_strtod_l+0x588>
 800960a:	f04f 0800 	mov.w	r8, #0
 800960e:	e683      	b.n	8009318 <_strtod_l+0x88>
 8009610:	487d      	ldr	r0, [pc, #500]	; (8009808 <_strtod_l+0x578>)
 8009612:	f001 fdb5 	bl	800b180 <nan>
 8009616:	ec59 8b10 	vmov	r8, r9, d0
 800961a:	e67d      	b.n	8009318 <_strtod_l+0x88>
 800961c:	1bea      	subs	r2, r5, r7
 800961e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8009622:	9207      	str	r2, [sp, #28]
 8009624:	9a06      	ldr	r2, [sp, #24]
 8009626:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800962a:	2a00      	cmp	r2, #0
 800962c:	bf08      	it	eq
 800962e:	461a      	moveq	r2, r3
 8009630:	2b10      	cmp	r3, #16
 8009632:	9206      	str	r2, [sp, #24]
 8009634:	461a      	mov	r2, r3
 8009636:	bfa8      	it	ge
 8009638:	2210      	movge	r2, #16
 800963a:	2b09      	cmp	r3, #9
 800963c:	ec59 8b17 	vmov	r8, r9, d7
 8009640:	dd0c      	ble.n	800965c <_strtod_l+0x3cc>
 8009642:	4972      	ldr	r1, [pc, #456]	; (800980c <_strtod_l+0x57c>)
 8009644:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009648:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800964c:	ee06 aa90 	vmov	s13, sl
 8009650:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8009654:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009658:	ec59 8b16 	vmov	r8, r9, d6
 800965c:	2b0f      	cmp	r3, #15
 800965e:	dc36      	bgt.n	80096ce <_strtod_l+0x43e>
 8009660:	9907      	ldr	r1, [sp, #28]
 8009662:	2900      	cmp	r1, #0
 8009664:	f43f ae58 	beq.w	8009318 <_strtod_l+0x88>
 8009668:	dd23      	ble.n	80096b2 <_strtod_l+0x422>
 800966a:	2916      	cmp	r1, #22
 800966c:	dc0b      	bgt.n	8009686 <_strtod_l+0x3f6>
 800966e:	4b67      	ldr	r3, [pc, #412]	; (800980c <_strtod_l+0x57c>)
 8009670:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009674:	ed93 7b00 	vldr	d7, [r3]
 8009678:	ec49 8b16 	vmov	d6, r8, r9
 800967c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009680:	ec59 8b17 	vmov	r8, r9, d7
 8009684:	e648      	b.n	8009318 <_strtod_l+0x88>
 8009686:	9807      	ldr	r0, [sp, #28]
 8009688:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800968c:	4281      	cmp	r1, r0
 800968e:	db1e      	blt.n	80096ce <_strtod_l+0x43e>
 8009690:	4a5e      	ldr	r2, [pc, #376]	; (800980c <_strtod_l+0x57c>)
 8009692:	f1c3 030f 	rsb	r3, r3, #15
 8009696:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800969a:	ed91 7b00 	vldr	d7, [r1]
 800969e:	ec49 8b16 	vmov	d6, r8, r9
 80096a2:	1ac3      	subs	r3, r0, r3
 80096a4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80096a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096ac:	ed92 6b00 	vldr	d6, [r2]
 80096b0:	e7e4      	b.n	800967c <_strtod_l+0x3ec>
 80096b2:	9907      	ldr	r1, [sp, #28]
 80096b4:	3116      	adds	r1, #22
 80096b6:	db0a      	blt.n	80096ce <_strtod_l+0x43e>
 80096b8:	4b54      	ldr	r3, [pc, #336]	; (800980c <_strtod_l+0x57c>)
 80096ba:	1b7d      	subs	r5, r7, r5
 80096bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80096c0:	ed95 7b00 	vldr	d7, [r5]
 80096c4:	ec49 8b16 	vmov	d6, r8, r9
 80096c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80096cc:	e7d8      	b.n	8009680 <_strtod_l+0x3f0>
 80096ce:	9907      	ldr	r1, [sp, #28]
 80096d0:	1a9a      	subs	r2, r3, r2
 80096d2:	440a      	add	r2, r1
 80096d4:	2a00      	cmp	r2, #0
 80096d6:	dd6f      	ble.n	80097b8 <_strtod_l+0x528>
 80096d8:	f012 000f 	ands.w	r0, r2, #15
 80096dc:	d00a      	beq.n	80096f4 <_strtod_l+0x464>
 80096de:	494b      	ldr	r1, [pc, #300]	; (800980c <_strtod_l+0x57c>)
 80096e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80096e4:	ed91 7b00 	vldr	d7, [r1]
 80096e8:	ec49 8b16 	vmov	d6, r8, r9
 80096ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096f0:	ec59 8b17 	vmov	r8, r9, d7
 80096f4:	f032 020f 	bics.w	r2, r2, #15
 80096f8:	d04f      	beq.n	800979a <_strtod_l+0x50a>
 80096fa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80096fe:	dd22      	ble.n	8009746 <_strtod_l+0x4b6>
 8009700:	2500      	movs	r5, #0
 8009702:	462e      	mov	r6, r5
 8009704:	9506      	str	r5, [sp, #24]
 8009706:	462f      	mov	r7, r5
 8009708:	2322      	movs	r3, #34	; 0x22
 800970a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009818 <_strtod_l+0x588>
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	f04f 0800 	mov.w	r8, #0
 8009714:	9b06      	ldr	r3, [sp, #24]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f43f adfe 	beq.w	8009318 <_strtod_l+0x88>
 800971c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800971e:	4620      	mov	r0, r4
 8009720:	f001 f83c 	bl	800a79c <_Bfree>
 8009724:	4639      	mov	r1, r7
 8009726:	4620      	mov	r0, r4
 8009728:	f001 f838 	bl	800a79c <_Bfree>
 800972c:	4631      	mov	r1, r6
 800972e:	4620      	mov	r0, r4
 8009730:	f001 f834 	bl	800a79c <_Bfree>
 8009734:	9906      	ldr	r1, [sp, #24]
 8009736:	4620      	mov	r0, r4
 8009738:	f001 f830 	bl	800a79c <_Bfree>
 800973c:	4629      	mov	r1, r5
 800973e:	4620      	mov	r0, r4
 8009740:	f001 f82c 	bl	800a79c <_Bfree>
 8009744:	e5e8      	b.n	8009318 <_strtod_l+0x88>
 8009746:	2000      	movs	r0, #0
 8009748:	ec49 8b17 	vmov	d7, r8, r9
 800974c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009810 <_strtod_l+0x580>
 8009750:	1112      	asrs	r2, r2, #4
 8009752:	4601      	mov	r1, r0
 8009754:	2a01      	cmp	r2, #1
 8009756:	dc23      	bgt.n	80097a0 <_strtod_l+0x510>
 8009758:	b108      	cbz	r0, 800975e <_strtod_l+0x4ce>
 800975a:	ec59 8b17 	vmov	r8, r9, d7
 800975e:	4a2c      	ldr	r2, [pc, #176]	; (8009810 <_strtod_l+0x580>)
 8009760:	482c      	ldr	r0, [pc, #176]	; (8009814 <_strtod_l+0x584>)
 8009762:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009766:	ed92 7b00 	vldr	d7, [r2]
 800976a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800976e:	ec49 8b16 	vmov	d6, r8, r9
 8009772:	4a29      	ldr	r2, [pc, #164]	; (8009818 <_strtod_l+0x588>)
 8009774:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009778:	ee17 1a90 	vmov	r1, s15
 800977c:	400a      	ands	r2, r1
 800977e:	4282      	cmp	r2, r0
 8009780:	ec59 8b17 	vmov	r8, r9, d7
 8009784:	d8bc      	bhi.n	8009700 <_strtod_l+0x470>
 8009786:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800978a:	4282      	cmp	r2, r0
 800978c:	bf86      	itte	hi
 800978e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800981c <_strtod_l+0x58c>
 8009792:	f04f 38ff 	movhi.w	r8, #4294967295
 8009796:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800979a:	2200      	movs	r2, #0
 800979c:	9204      	str	r2, [sp, #16]
 800979e:	e078      	b.n	8009892 <_strtod_l+0x602>
 80097a0:	07d6      	lsls	r6, r2, #31
 80097a2:	d504      	bpl.n	80097ae <_strtod_l+0x51e>
 80097a4:	ed9c 6b00 	vldr	d6, [ip]
 80097a8:	2001      	movs	r0, #1
 80097aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097ae:	3101      	adds	r1, #1
 80097b0:	1052      	asrs	r2, r2, #1
 80097b2:	f10c 0c08 	add.w	ip, ip, #8
 80097b6:	e7cd      	b.n	8009754 <_strtod_l+0x4c4>
 80097b8:	d0ef      	beq.n	800979a <_strtod_l+0x50a>
 80097ba:	4252      	negs	r2, r2
 80097bc:	f012 000f 	ands.w	r0, r2, #15
 80097c0:	d00a      	beq.n	80097d8 <_strtod_l+0x548>
 80097c2:	4912      	ldr	r1, [pc, #72]	; (800980c <_strtod_l+0x57c>)
 80097c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80097c8:	ed91 7b00 	vldr	d7, [r1]
 80097cc:	ec49 8b16 	vmov	d6, r8, r9
 80097d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80097d4:	ec59 8b17 	vmov	r8, r9, d7
 80097d8:	1112      	asrs	r2, r2, #4
 80097da:	d0de      	beq.n	800979a <_strtod_l+0x50a>
 80097dc:	2a1f      	cmp	r2, #31
 80097de:	dd1f      	ble.n	8009820 <_strtod_l+0x590>
 80097e0:	2500      	movs	r5, #0
 80097e2:	462e      	mov	r6, r5
 80097e4:	9506      	str	r5, [sp, #24]
 80097e6:	462f      	mov	r7, r5
 80097e8:	2322      	movs	r3, #34	; 0x22
 80097ea:	f04f 0800 	mov.w	r8, #0
 80097ee:	f04f 0900 	mov.w	r9, #0
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	e78e      	b.n	8009714 <_strtod_l+0x484>
 80097f6:	bf00      	nop
 80097f8:	0800bd09 	.word	0x0800bd09
 80097fc:	0800bd20 	.word	0x0800bd20
 8009800:	0800bd00 	.word	0x0800bd00
 8009804:	0800bd03 	.word	0x0800bd03
 8009808:	0800bf97 	.word	0x0800bf97
 800980c:	0800be88 	.word	0x0800be88
 8009810:	0800be60 	.word	0x0800be60
 8009814:	7ca00000 	.word	0x7ca00000
 8009818:	7ff00000 	.word	0x7ff00000
 800981c:	7fefffff 	.word	0x7fefffff
 8009820:	f012 0110 	ands.w	r1, r2, #16
 8009824:	bf18      	it	ne
 8009826:	216a      	movne	r1, #106	; 0x6a
 8009828:	9104      	str	r1, [sp, #16]
 800982a:	ec49 8b17 	vmov	d7, r8, r9
 800982e:	49be      	ldr	r1, [pc, #760]	; (8009b28 <_strtod_l+0x898>)
 8009830:	2000      	movs	r0, #0
 8009832:	07d6      	lsls	r6, r2, #31
 8009834:	d504      	bpl.n	8009840 <_strtod_l+0x5b0>
 8009836:	ed91 6b00 	vldr	d6, [r1]
 800983a:	2001      	movs	r0, #1
 800983c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009840:	1052      	asrs	r2, r2, #1
 8009842:	f101 0108 	add.w	r1, r1, #8
 8009846:	d1f4      	bne.n	8009832 <_strtod_l+0x5a2>
 8009848:	b108      	cbz	r0, 800984e <_strtod_l+0x5be>
 800984a:	ec59 8b17 	vmov	r8, r9, d7
 800984e:	9a04      	ldr	r2, [sp, #16]
 8009850:	b1c2      	cbz	r2, 8009884 <_strtod_l+0x5f4>
 8009852:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009856:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800985a:	2a00      	cmp	r2, #0
 800985c:	4648      	mov	r0, r9
 800985e:	dd11      	ble.n	8009884 <_strtod_l+0x5f4>
 8009860:	2a1f      	cmp	r2, #31
 8009862:	f340 812e 	ble.w	8009ac2 <_strtod_l+0x832>
 8009866:	2a34      	cmp	r2, #52	; 0x34
 8009868:	bfde      	ittt	le
 800986a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800986e:	f04f 32ff 	movle.w	r2, #4294967295
 8009872:	fa02 f101 	lslle.w	r1, r2, r1
 8009876:	f04f 0800 	mov.w	r8, #0
 800987a:	bfcc      	ite	gt
 800987c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009880:	ea01 0900 	andle.w	r9, r1, r0
 8009884:	ec49 8b17 	vmov	d7, r8, r9
 8009888:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800988c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009890:	d0a6      	beq.n	80097e0 <_strtod_l+0x550>
 8009892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009894:	9200      	str	r2, [sp, #0]
 8009896:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009898:	9a06      	ldr	r2, [sp, #24]
 800989a:	4620      	mov	r0, r4
 800989c:	f000 ffe6 	bl	800a86c <__s2b>
 80098a0:	9006      	str	r0, [sp, #24]
 80098a2:	2800      	cmp	r0, #0
 80098a4:	f43f af2c 	beq.w	8009700 <_strtod_l+0x470>
 80098a8:	9b07      	ldr	r3, [sp, #28]
 80098aa:	1b7d      	subs	r5, r7, r5
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	bfb4      	ite	lt
 80098b0:	462b      	movlt	r3, r5
 80098b2:	2300      	movge	r3, #0
 80098b4:	9309      	str	r3, [sp, #36]	; 0x24
 80098b6:	9b07      	ldr	r3, [sp, #28]
 80098b8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009b08 <_strtod_l+0x878>
 80098bc:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009b10 <_strtod_l+0x880>
 80098c0:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009b18 <_strtod_l+0x888>
 80098c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098c8:	2500      	movs	r5, #0
 80098ca:	930c      	str	r3, [sp, #48]	; 0x30
 80098cc:	462e      	mov	r6, r5
 80098ce:	9b06      	ldr	r3, [sp, #24]
 80098d0:	4620      	mov	r0, r4
 80098d2:	6859      	ldr	r1, [r3, #4]
 80098d4:	f000 ff22 	bl	800a71c <_Balloc>
 80098d8:	4607      	mov	r7, r0
 80098da:	2800      	cmp	r0, #0
 80098dc:	f43f af14 	beq.w	8009708 <_strtod_l+0x478>
 80098e0:	9b06      	ldr	r3, [sp, #24]
 80098e2:	691a      	ldr	r2, [r3, #16]
 80098e4:	3202      	adds	r2, #2
 80098e6:	f103 010c 	add.w	r1, r3, #12
 80098ea:	0092      	lsls	r2, r2, #2
 80098ec:	300c      	adds	r0, #12
 80098ee:	f7ff fb38 	bl	8008f62 <memcpy>
 80098f2:	ec49 8b10 	vmov	d0, r8, r9
 80098f6:	aa14      	add	r2, sp, #80	; 0x50
 80098f8:	a913      	add	r1, sp, #76	; 0x4c
 80098fa:	4620      	mov	r0, r4
 80098fc:	f001 fafc 	bl	800aef8 <__d2b>
 8009900:	ec49 8b18 	vmov	d8, r8, r9
 8009904:	9012      	str	r0, [sp, #72]	; 0x48
 8009906:	2800      	cmp	r0, #0
 8009908:	f43f aefe 	beq.w	8009708 <_strtod_l+0x478>
 800990c:	2101      	movs	r1, #1
 800990e:	4620      	mov	r0, r4
 8009910:	f001 f846 	bl	800a9a0 <__i2b>
 8009914:	4606      	mov	r6, r0
 8009916:	2800      	cmp	r0, #0
 8009918:	f43f aef6 	beq.w	8009708 <_strtod_l+0x478>
 800991c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800991e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009920:	2b00      	cmp	r3, #0
 8009922:	bfab      	itete	ge
 8009924:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009926:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009928:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800992c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009930:	bfac      	ite	ge
 8009932:	eb03 0b02 	addge.w	fp, r3, r2
 8009936:	eba2 0a03 	sublt.w	sl, r2, r3
 800993a:	9a04      	ldr	r2, [sp, #16]
 800993c:	1a9b      	subs	r3, r3, r2
 800993e:	440b      	add	r3, r1
 8009940:	4a7a      	ldr	r2, [pc, #488]	; (8009b2c <_strtod_l+0x89c>)
 8009942:	3b01      	subs	r3, #1
 8009944:	4293      	cmp	r3, r2
 8009946:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800994a:	f280 80cd 	bge.w	8009ae8 <_strtod_l+0x858>
 800994e:	1ad2      	subs	r2, r2, r3
 8009950:	2a1f      	cmp	r2, #31
 8009952:	eba1 0102 	sub.w	r1, r1, r2
 8009956:	f04f 0001 	mov.w	r0, #1
 800995a:	f300 80b9 	bgt.w	8009ad0 <_strtod_l+0x840>
 800995e:	fa00 f302 	lsl.w	r3, r0, r2
 8009962:	930b      	str	r3, [sp, #44]	; 0x2c
 8009964:	2300      	movs	r3, #0
 8009966:	930a      	str	r3, [sp, #40]	; 0x28
 8009968:	eb0b 0301 	add.w	r3, fp, r1
 800996c:	9a04      	ldr	r2, [sp, #16]
 800996e:	459b      	cmp	fp, r3
 8009970:	448a      	add	sl, r1
 8009972:	4492      	add	sl, r2
 8009974:	465a      	mov	r2, fp
 8009976:	bfa8      	it	ge
 8009978:	461a      	movge	r2, r3
 800997a:	4552      	cmp	r2, sl
 800997c:	bfa8      	it	ge
 800997e:	4652      	movge	r2, sl
 8009980:	2a00      	cmp	r2, #0
 8009982:	bfc2      	ittt	gt
 8009984:	1a9b      	subgt	r3, r3, r2
 8009986:	ebaa 0a02 	subgt.w	sl, sl, r2
 800998a:	ebab 0b02 	subgt.w	fp, fp, r2
 800998e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009990:	2a00      	cmp	r2, #0
 8009992:	dd18      	ble.n	80099c6 <_strtod_l+0x736>
 8009994:	4631      	mov	r1, r6
 8009996:	4620      	mov	r0, r4
 8009998:	930f      	str	r3, [sp, #60]	; 0x3c
 800999a:	f001 f8c1 	bl	800ab20 <__pow5mult>
 800999e:	4606      	mov	r6, r0
 80099a0:	2800      	cmp	r0, #0
 80099a2:	f43f aeb1 	beq.w	8009708 <_strtod_l+0x478>
 80099a6:	4601      	mov	r1, r0
 80099a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099aa:	4620      	mov	r0, r4
 80099ac:	f001 f80e 	bl	800a9cc <__multiply>
 80099b0:	900e      	str	r0, [sp, #56]	; 0x38
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f43f aea8 	beq.w	8009708 <_strtod_l+0x478>
 80099b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 feee 	bl	800a79c <_Bfree>
 80099c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099c4:	9212      	str	r2, [sp, #72]	; 0x48
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f300 8093 	bgt.w	8009af2 <_strtod_l+0x862>
 80099cc:	9b07      	ldr	r3, [sp, #28]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	dd08      	ble.n	80099e4 <_strtod_l+0x754>
 80099d2:	4639      	mov	r1, r7
 80099d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d6:	4620      	mov	r0, r4
 80099d8:	f001 f8a2 	bl	800ab20 <__pow5mult>
 80099dc:	4607      	mov	r7, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	f43f ae92 	beq.w	8009708 <_strtod_l+0x478>
 80099e4:	f1ba 0f00 	cmp.w	sl, #0
 80099e8:	dd08      	ble.n	80099fc <_strtod_l+0x76c>
 80099ea:	4639      	mov	r1, r7
 80099ec:	4652      	mov	r2, sl
 80099ee:	4620      	mov	r0, r4
 80099f0:	f001 f8f0 	bl	800abd4 <__lshift>
 80099f4:	4607      	mov	r7, r0
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f43f ae86 	beq.w	8009708 <_strtod_l+0x478>
 80099fc:	f1bb 0f00 	cmp.w	fp, #0
 8009a00:	dd08      	ble.n	8009a14 <_strtod_l+0x784>
 8009a02:	4631      	mov	r1, r6
 8009a04:	465a      	mov	r2, fp
 8009a06:	4620      	mov	r0, r4
 8009a08:	f001 f8e4 	bl	800abd4 <__lshift>
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f43f ae7a 	beq.w	8009708 <_strtod_l+0x478>
 8009a14:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009a16:	463a      	mov	r2, r7
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f001 f967 	bl	800acec <__mdiff>
 8009a1e:	4605      	mov	r5, r0
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f43f ae71 	beq.w	8009708 <_strtod_l+0x478>
 8009a26:	2300      	movs	r3, #0
 8009a28:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009a2c:	60c3      	str	r3, [r0, #12]
 8009a2e:	4631      	mov	r1, r6
 8009a30:	f001 f940 	bl	800acb4 <__mcmp>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	da7d      	bge.n	8009b34 <_strtod_l+0x8a4>
 8009a38:	ea5a 0308 	orrs.w	r3, sl, r8
 8009a3c:	f040 80a3 	bne.w	8009b86 <_strtod_l+0x8f6>
 8009a40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f040 809e 	bne.w	8009b86 <_strtod_l+0x8f6>
 8009a4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a4e:	0d1b      	lsrs	r3, r3, #20
 8009a50:	051b      	lsls	r3, r3, #20
 8009a52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a56:	f240 8096 	bls.w	8009b86 <_strtod_l+0x8f6>
 8009a5a:	696b      	ldr	r3, [r5, #20]
 8009a5c:	b91b      	cbnz	r3, 8009a66 <_strtod_l+0x7d6>
 8009a5e:	692b      	ldr	r3, [r5, #16]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	f340 8090 	ble.w	8009b86 <_strtod_l+0x8f6>
 8009a66:	4629      	mov	r1, r5
 8009a68:	2201      	movs	r2, #1
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f001 f8b2 	bl	800abd4 <__lshift>
 8009a70:	4631      	mov	r1, r6
 8009a72:	4605      	mov	r5, r0
 8009a74:	f001 f91e 	bl	800acb4 <__mcmp>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	f340 8084 	ble.w	8009b86 <_strtod_l+0x8f6>
 8009a7e:	9904      	ldr	r1, [sp, #16]
 8009a80:	4a2b      	ldr	r2, [pc, #172]	; (8009b30 <_strtod_l+0x8a0>)
 8009a82:	464b      	mov	r3, r9
 8009a84:	2900      	cmp	r1, #0
 8009a86:	f000 809d 	beq.w	8009bc4 <_strtod_l+0x934>
 8009a8a:	ea02 0109 	and.w	r1, r2, r9
 8009a8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a92:	f300 8097 	bgt.w	8009bc4 <_strtod_l+0x934>
 8009a96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a9a:	f77f aea5 	ble.w	80097e8 <_strtod_l+0x558>
 8009a9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009b20 <_strtod_l+0x890>
 8009aa2:	ec49 8b16 	vmov	d6, r8, r9
 8009aa6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009aaa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009aae:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	bf08      	it	eq
 8009ab6:	2322      	moveq	r3, #34	; 0x22
 8009ab8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009abc:	bf08      	it	eq
 8009abe:	6023      	streq	r3, [r4, #0]
 8009ac0:	e62c      	b.n	800971c <_strtod_l+0x48c>
 8009ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8009aca:	ea02 0808 	and.w	r8, r2, r8
 8009ace:	e6d9      	b.n	8009884 <_strtod_l+0x5f4>
 8009ad0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009ad4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009ad8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009adc:	33e2      	adds	r3, #226	; 0xe2
 8009ade:	fa00 f303 	lsl.w	r3, r0, r3
 8009ae2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009ae6:	e73f      	b.n	8009968 <_strtod_l+0x6d8>
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2301      	movs	r3, #1
 8009aec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009af0:	e73a      	b.n	8009968 <_strtod_l+0x6d8>
 8009af2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009af4:	461a      	mov	r2, r3
 8009af6:	4620      	mov	r0, r4
 8009af8:	f001 f86c 	bl	800abd4 <__lshift>
 8009afc:	9012      	str	r0, [sp, #72]	; 0x48
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f47f af64 	bne.w	80099cc <_strtod_l+0x73c>
 8009b04:	e600      	b.n	8009708 <_strtod_l+0x478>
 8009b06:	bf00      	nop
 8009b08:	94a03595 	.word	0x94a03595
 8009b0c:	3fcfffff 	.word	0x3fcfffff
 8009b10:	94a03595 	.word	0x94a03595
 8009b14:	3fdfffff 	.word	0x3fdfffff
 8009b18:	35afe535 	.word	0x35afe535
 8009b1c:	3fe00000 	.word	0x3fe00000
 8009b20:	00000000 	.word	0x00000000
 8009b24:	39500000 	.word	0x39500000
 8009b28:	0800bd38 	.word	0x0800bd38
 8009b2c:	fffffc02 	.word	0xfffffc02
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	46cb      	mov	fp, r9
 8009b36:	d15f      	bne.n	8009bf8 <_strtod_l+0x968>
 8009b38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b3c:	f1ba 0f00 	cmp.w	sl, #0
 8009b40:	d02a      	beq.n	8009b98 <_strtod_l+0x908>
 8009b42:	4aa7      	ldr	r2, [pc, #668]	; (8009de0 <_strtod_l+0xb50>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d12b      	bne.n	8009ba0 <_strtod_l+0x910>
 8009b48:	9b04      	ldr	r3, [sp, #16]
 8009b4a:	4642      	mov	r2, r8
 8009b4c:	b1fb      	cbz	r3, 8009b8e <_strtod_l+0x8fe>
 8009b4e:	4ba5      	ldr	r3, [pc, #660]	; (8009de4 <_strtod_l+0xb54>)
 8009b50:	ea09 0303 	and.w	r3, r9, r3
 8009b54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b58:	f04f 31ff 	mov.w	r1, #4294967295
 8009b5c:	d81a      	bhi.n	8009b94 <_strtod_l+0x904>
 8009b5e:	0d1b      	lsrs	r3, r3, #20
 8009b60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b64:	fa01 f303 	lsl.w	r3, r1, r3
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d119      	bne.n	8009ba0 <_strtod_l+0x910>
 8009b6c:	4b9e      	ldr	r3, [pc, #632]	; (8009de8 <_strtod_l+0xb58>)
 8009b6e:	459b      	cmp	fp, r3
 8009b70:	d102      	bne.n	8009b78 <_strtod_l+0x8e8>
 8009b72:	3201      	adds	r2, #1
 8009b74:	f43f adc8 	beq.w	8009708 <_strtod_l+0x478>
 8009b78:	4b9a      	ldr	r3, [pc, #616]	; (8009de4 <_strtod_l+0xb54>)
 8009b7a:	ea0b 0303 	and.w	r3, fp, r3
 8009b7e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009b82:	f04f 0800 	mov.w	r8, #0
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d188      	bne.n	8009a9e <_strtod_l+0x80e>
 8009b8c:	e5c6      	b.n	800971c <_strtod_l+0x48c>
 8009b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b92:	e7e9      	b.n	8009b68 <_strtod_l+0x8d8>
 8009b94:	460b      	mov	r3, r1
 8009b96:	e7e7      	b.n	8009b68 <_strtod_l+0x8d8>
 8009b98:	ea53 0308 	orrs.w	r3, r3, r8
 8009b9c:	f43f af6f 	beq.w	8009a7e <_strtod_l+0x7ee>
 8009ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ba2:	b1cb      	cbz	r3, 8009bd8 <_strtod_l+0x948>
 8009ba4:	ea13 0f0b 	tst.w	r3, fp
 8009ba8:	d0ed      	beq.n	8009b86 <_strtod_l+0x8f6>
 8009baa:	9a04      	ldr	r2, [sp, #16]
 8009bac:	4640      	mov	r0, r8
 8009bae:	4649      	mov	r1, r9
 8009bb0:	f1ba 0f00 	cmp.w	sl, #0
 8009bb4:	d014      	beq.n	8009be0 <_strtod_l+0x950>
 8009bb6:	f7ff fb50 	bl	800925a <sulp>
 8009bba:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009bbe:	ec59 8b17 	vmov	r8, r9, d7
 8009bc2:	e7e0      	b.n	8009b86 <_strtod_l+0x8f6>
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009bce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009bd2:	f04f 38ff 	mov.w	r8, #4294967295
 8009bd6:	e7d6      	b.n	8009b86 <_strtod_l+0x8f6>
 8009bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bda:	ea13 0f08 	tst.w	r3, r8
 8009bde:	e7e3      	b.n	8009ba8 <_strtod_l+0x918>
 8009be0:	f7ff fb3b 	bl	800925a <sulp>
 8009be4:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009be8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf0:	ec59 8b10 	vmov	r8, r9, d0
 8009bf4:	d1c7      	bne.n	8009b86 <_strtod_l+0x8f6>
 8009bf6:	e5f7      	b.n	80097e8 <_strtod_l+0x558>
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f001 f9d8 	bl	800afb0 <__ratio>
 8009c00:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009c04:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c0c:	d865      	bhi.n	8009cda <_strtod_l+0xa4a>
 8009c0e:	f1ba 0f00 	cmp.w	sl, #0
 8009c12:	d042      	beq.n	8009c9a <_strtod_l+0xa0a>
 8009c14:	4b75      	ldr	r3, [pc, #468]	; (8009dec <_strtod_l+0xb5c>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009c1c:	4871      	ldr	r0, [pc, #452]	; (8009de4 <_strtod_l+0xb54>)
 8009c1e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009df8 <_strtod_l+0xb68>
 8009c22:	ea0b 0100 	and.w	r1, fp, r0
 8009c26:	4561      	cmp	r1, ip
 8009c28:	f040 808e 	bne.w	8009d48 <_strtod_l+0xab8>
 8009c2c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009c30:	ec49 8b10 	vmov	d0, r8, r9
 8009c34:	ec43 2b1c 	vmov	d12, r2, r3
 8009c38:	910a      	str	r1, [sp, #40]	; 0x28
 8009c3a:	f001 f8e1 	bl	800ae00 <__ulp>
 8009c3e:	ec49 8b1e 	vmov	d14, r8, r9
 8009c42:	4868      	ldr	r0, [pc, #416]	; (8009de4 <_strtod_l+0xb54>)
 8009c44:	eeac eb00 	vfma.f64	d14, d12, d0
 8009c48:	ee1e 3a90 	vmov	r3, s29
 8009c4c:	4a68      	ldr	r2, [pc, #416]	; (8009df0 <_strtod_l+0xb60>)
 8009c4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c50:	4018      	ands	r0, r3
 8009c52:	4290      	cmp	r0, r2
 8009c54:	ec59 8b1e 	vmov	r8, r9, d14
 8009c58:	d94e      	bls.n	8009cf8 <_strtod_l+0xa68>
 8009c5a:	ee18 3a90 	vmov	r3, s17
 8009c5e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d104      	bne.n	8009c70 <_strtod_l+0x9e0>
 8009c66:	ee18 3a10 	vmov	r3, s16
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f43f ad4c 	beq.w	8009708 <_strtod_l+0x478>
 8009c70:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009de8 <_strtod_l+0xb58>
 8009c74:	f04f 38ff 	mov.w	r8, #4294967295
 8009c78:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f000 fd8e 	bl	800a79c <_Bfree>
 8009c80:	4639      	mov	r1, r7
 8009c82:	4620      	mov	r0, r4
 8009c84:	f000 fd8a 	bl	800a79c <_Bfree>
 8009c88:	4631      	mov	r1, r6
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fd86 	bl	800a79c <_Bfree>
 8009c90:	4629      	mov	r1, r5
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 fd82 	bl	800a79c <_Bfree>
 8009c98:	e619      	b.n	80098ce <_strtod_l+0x63e>
 8009c9a:	f1b8 0f00 	cmp.w	r8, #0
 8009c9e:	d112      	bne.n	8009cc6 <_strtod_l+0xa36>
 8009ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ca4:	b9b3      	cbnz	r3, 8009cd4 <_strtod_l+0xa44>
 8009ca6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009caa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009cb6:	bf58      	it	pl
 8009cb8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009cbc:	eeb1 7b4d 	vneg.f64	d7, d13
 8009cc0:	ec53 2b17 	vmov	r2, r3, d7
 8009cc4:	e7aa      	b.n	8009c1c <_strtod_l+0x98c>
 8009cc6:	f1b8 0f01 	cmp.w	r8, #1
 8009cca:	d103      	bne.n	8009cd4 <_strtod_l+0xa44>
 8009ccc:	f1b9 0f00 	cmp.w	r9, #0
 8009cd0:	f43f ad8a 	beq.w	80097e8 <_strtod_l+0x558>
 8009cd4:	4b47      	ldr	r3, [pc, #284]	; (8009df4 <_strtod_l+0xb64>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	e79e      	b.n	8009c18 <_strtod_l+0x988>
 8009cda:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009cde:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009ce2:	f1ba 0f00 	cmp.w	sl, #0
 8009ce6:	d104      	bne.n	8009cf2 <_strtod_l+0xa62>
 8009ce8:	eeb1 7b4d 	vneg.f64	d7, d13
 8009cec:	ec53 2b17 	vmov	r2, r3, d7
 8009cf0:	e794      	b.n	8009c1c <_strtod_l+0x98c>
 8009cf2:	eeb0 7b4d 	vmov.f64	d7, d13
 8009cf6:	e7f9      	b.n	8009cec <_strtod_l+0xa5c>
 8009cf8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1ba      	bne.n	8009c78 <_strtod_l+0x9e8>
 8009d02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d06:	0d1b      	lsrs	r3, r3, #20
 8009d08:	051b      	lsls	r3, r3, #20
 8009d0a:	4299      	cmp	r1, r3
 8009d0c:	d1b4      	bne.n	8009c78 <_strtod_l+0x9e8>
 8009d0e:	ec51 0b1d 	vmov	r0, r1, d13
 8009d12:	f7f6 fcc1 	bl	8000698 <__aeabi_d2lz>
 8009d16:	f7f6 fc79 	bl	800060c <__aeabi_l2d>
 8009d1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d1e:	ec41 0b17 	vmov	d7, r0, r1
 8009d22:	ea43 0308 	orr.w	r3, r3, r8
 8009d26:	ea53 030a 	orrs.w	r3, r3, sl
 8009d2a:	ee3d db47 	vsub.f64	d13, d13, d7
 8009d2e:	d03c      	beq.n	8009daa <_strtod_l+0xb1a>
 8009d30:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d38:	f53f acf0 	bmi.w	800971c <_strtod_l+0x48c>
 8009d3c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d44:	dd98      	ble.n	8009c78 <_strtod_l+0x9e8>
 8009d46:	e4e9      	b.n	800971c <_strtod_l+0x48c>
 8009d48:	9804      	ldr	r0, [sp, #16]
 8009d4a:	b1f0      	cbz	r0, 8009d8a <_strtod_l+0xafa>
 8009d4c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009d50:	d81b      	bhi.n	8009d8a <_strtod_l+0xafa>
 8009d52:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009dd8 <_strtod_l+0xb48>
 8009d56:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5e:	d811      	bhi.n	8009d84 <_strtod_l+0xaf4>
 8009d60:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009d64:	ee1d 3a10 	vmov	r3, s26
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	bf38      	it	cc
 8009d6c:	2301      	movcc	r3, #1
 8009d6e:	ee0d 3a10 	vmov	s26, r3
 8009d72:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009d76:	f1ba 0f00 	cmp.w	sl, #0
 8009d7a:	d113      	bne.n	8009da4 <_strtod_l+0xb14>
 8009d7c:	eeb1 7b4d 	vneg.f64	d7, d13
 8009d80:	ec53 2b17 	vmov	r2, r3, d7
 8009d84:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009d88:	1a43      	subs	r3, r0, r1
 8009d8a:	eeb0 0b48 	vmov.f64	d0, d8
 8009d8e:	ec43 2b1c 	vmov	d12, r2, r3
 8009d92:	910a      	str	r1, [sp, #40]	; 0x28
 8009d94:	f001 f834 	bl	800ae00 <__ulp>
 8009d98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d9a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8009d9e:	ec59 8b18 	vmov	r8, r9, d8
 8009da2:	e7ab      	b.n	8009cfc <_strtod_l+0xa6c>
 8009da4:	eeb0 7b4d 	vmov.f64	d7, d13
 8009da8:	e7ea      	b.n	8009d80 <_strtod_l+0xaf0>
 8009daa:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db2:	f57f af61 	bpl.w	8009c78 <_strtod_l+0x9e8>
 8009db6:	e4b1      	b.n	800971c <_strtod_l+0x48c>
 8009db8:	2300      	movs	r3, #0
 8009dba:	9308      	str	r3, [sp, #32]
 8009dbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	f7ff baad 	b.w	8009320 <_strtod_l+0x90>
 8009dc6:	2a65      	cmp	r2, #101	; 0x65
 8009dc8:	f43f ab9f 	beq.w	800950a <_strtod_l+0x27a>
 8009dcc:	2a45      	cmp	r2, #69	; 0x45
 8009dce:	f43f ab9c 	beq.w	800950a <_strtod_l+0x27a>
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	f7ff bbd4 	b.w	8009580 <_strtod_l+0x2f0>
 8009dd8:	ffc00000 	.word	0xffc00000
 8009ddc:	41dfffff 	.word	0x41dfffff
 8009de0:	000fffff 	.word	0x000fffff
 8009de4:	7ff00000 	.word	0x7ff00000
 8009de8:	7fefffff 	.word	0x7fefffff
 8009dec:	3ff00000 	.word	0x3ff00000
 8009df0:	7c9fffff 	.word	0x7c9fffff
 8009df4:	bff00000 	.word	0xbff00000
 8009df8:	7fe00000 	.word	0x7fe00000

08009dfc <strtod>:
 8009dfc:	460a      	mov	r2, r1
 8009dfe:	4601      	mov	r1, r0
 8009e00:	4802      	ldr	r0, [pc, #8]	; (8009e0c <strtod+0x10>)
 8009e02:	4b03      	ldr	r3, [pc, #12]	; (8009e10 <strtod+0x14>)
 8009e04:	6800      	ldr	r0, [r0, #0]
 8009e06:	f7ff ba43 	b.w	8009290 <_strtod_l>
 8009e0a:	bf00      	nop
 8009e0c:	20000010 	.word	0x20000010
 8009e10:	20000078 	.word	0x20000078

08009e14 <_write_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d07      	ldr	r5, [pc, #28]	; (8009e34 <_write_r+0x20>)
 8009e18:	4604      	mov	r4, r0
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	2200      	movs	r2, #0
 8009e20:	602a      	str	r2, [r5, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f7f7 fef7 	bl	8001c16 <_write>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d102      	bne.n	8009e32 <_write_r+0x1e>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	b103      	cbz	r3, 8009e32 <_write_r+0x1e>
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	bd38      	pop	{r3, r4, r5, pc}
 8009e34:	200055c0 	.word	0x200055c0

08009e38 <_close_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4d06      	ldr	r5, [pc, #24]	; (8009e54 <_close_r+0x1c>)
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4608      	mov	r0, r1
 8009e42:	602b      	str	r3, [r5, #0]
 8009e44:	f7f7 ff03 	bl	8001c4e <_close>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_close_r+0x1a>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_close_r+0x1a>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	200055c0 	.word	0x200055c0

08009e58 <__sflush_r>:
 8009e58:	898a      	ldrh	r2, [r1, #12]
 8009e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	4605      	mov	r5, r0
 8009e60:	0710      	lsls	r0, r2, #28
 8009e62:	460c      	mov	r4, r1
 8009e64:	d458      	bmi.n	8009f18 <__sflush_r+0xc0>
 8009e66:	684b      	ldr	r3, [r1, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	dc05      	bgt.n	8009e78 <__sflush_r+0x20>
 8009e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	dc02      	bgt.n	8009e78 <__sflush_r+0x20>
 8009e72:	2000      	movs	r0, #0
 8009e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	d0f9      	beq.n	8009e72 <__sflush_r+0x1a>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e84:	682f      	ldr	r7, [r5, #0]
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	d032      	beq.n	8009ef0 <__sflush_r+0x98>
 8009e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	075a      	lsls	r2, r3, #29
 8009e90:	d505      	bpl.n	8009e9e <__sflush_r+0x46>
 8009e92:	6863      	ldr	r3, [r4, #4]
 8009e94:	1ac0      	subs	r0, r0, r3
 8009e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e98:	b10b      	cbz	r3, 8009e9e <__sflush_r+0x46>
 8009e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e9c:	1ac0      	subs	r0, r0, r3
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ea4:	6a21      	ldr	r1, [r4, #32]
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b0      	blx	r6
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	d106      	bne.n	8009ebe <__sflush_r+0x66>
 8009eb0:	6829      	ldr	r1, [r5, #0]
 8009eb2:	291d      	cmp	r1, #29
 8009eb4:	d82c      	bhi.n	8009f10 <__sflush_r+0xb8>
 8009eb6:	4a2a      	ldr	r2, [pc, #168]	; (8009f60 <__sflush_r+0x108>)
 8009eb8:	40ca      	lsrs	r2, r1
 8009eba:	07d6      	lsls	r6, r2, #31
 8009ebc:	d528      	bpl.n	8009f10 <__sflush_r+0xb8>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	6062      	str	r2, [r4, #4]
 8009ec2:	04d9      	lsls	r1, r3, #19
 8009ec4:	6922      	ldr	r2, [r4, #16]
 8009ec6:	6022      	str	r2, [r4, #0]
 8009ec8:	d504      	bpl.n	8009ed4 <__sflush_r+0x7c>
 8009eca:	1c42      	adds	r2, r0, #1
 8009ecc:	d101      	bne.n	8009ed2 <__sflush_r+0x7a>
 8009ece:	682b      	ldr	r3, [r5, #0]
 8009ed0:	b903      	cbnz	r3, 8009ed4 <__sflush_r+0x7c>
 8009ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ed6:	602f      	str	r7, [r5, #0]
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	d0ca      	beq.n	8009e72 <__sflush_r+0x1a>
 8009edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ee0:	4299      	cmp	r1, r3
 8009ee2:	d002      	beq.n	8009eea <__sflush_r+0x92>
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f001 f8ed 	bl	800b0c4 <_free_r>
 8009eea:	2000      	movs	r0, #0
 8009eec:	6360      	str	r0, [r4, #52]	; 0x34
 8009eee:	e7c1      	b.n	8009e74 <__sflush_r+0x1c>
 8009ef0:	6a21      	ldr	r1, [r4, #32]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b0      	blx	r6
 8009ef8:	1c41      	adds	r1, r0, #1
 8009efa:	d1c7      	bne.n	8009e8c <__sflush_r+0x34>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0c4      	beq.n	8009e8c <__sflush_r+0x34>
 8009f02:	2b1d      	cmp	r3, #29
 8009f04:	d001      	beq.n	8009f0a <__sflush_r+0xb2>
 8009f06:	2b16      	cmp	r3, #22
 8009f08:	d101      	bne.n	8009f0e <__sflush_r+0xb6>
 8009f0a:	602f      	str	r7, [r5, #0]
 8009f0c:	e7b1      	b.n	8009e72 <__sflush_r+0x1a>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	e7ad      	b.n	8009e74 <__sflush_r+0x1c>
 8009f18:	690f      	ldr	r7, [r1, #16]
 8009f1a:	2f00      	cmp	r7, #0
 8009f1c:	d0a9      	beq.n	8009e72 <__sflush_r+0x1a>
 8009f1e:	0793      	lsls	r3, r2, #30
 8009f20:	680e      	ldr	r6, [r1, #0]
 8009f22:	bf08      	it	eq
 8009f24:	694b      	ldreq	r3, [r1, #20]
 8009f26:	600f      	str	r7, [r1, #0]
 8009f28:	bf18      	it	ne
 8009f2a:	2300      	movne	r3, #0
 8009f2c:	eba6 0807 	sub.w	r8, r6, r7
 8009f30:	608b      	str	r3, [r1, #8]
 8009f32:	f1b8 0f00 	cmp.w	r8, #0
 8009f36:	dd9c      	ble.n	8009e72 <__sflush_r+0x1a>
 8009f38:	6a21      	ldr	r1, [r4, #32]
 8009f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f3c:	4643      	mov	r3, r8
 8009f3e:	463a      	mov	r2, r7
 8009f40:	4628      	mov	r0, r5
 8009f42:	47b0      	blx	r6
 8009f44:	2800      	cmp	r0, #0
 8009f46:	dc06      	bgt.n	8009f56 <__sflush_r+0xfe>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f4e:	81a3      	strh	r3, [r4, #12]
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	e78e      	b.n	8009e74 <__sflush_r+0x1c>
 8009f56:	4407      	add	r7, r0
 8009f58:	eba8 0800 	sub.w	r8, r8, r0
 8009f5c:	e7e9      	b.n	8009f32 <__sflush_r+0xda>
 8009f5e:	bf00      	nop
 8009f60:	20400001 	.word	0x20400001

08009f64 <_fflush_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	690b      	ldr	r3, [r1, #16]
 8009f68:	4605      	mov	r5, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	b913      	cbnz	r3, 8009f74 <_fflush_r+0x10>
 8009f6e:	2500      	movs	r5, #0
 8009f70:	4628      	mov	r0, r5
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	b118      	cbz	r0, 8009f7e <_fflush_r+0x1a>
 8009f76:	6983      	ldr	r3, [r0, #24]
 8009f78:	b90b      	cbnz	r3, 8009f7e <_fflush_r+0x1a>
 8009f7a:	f7fe ff2d 	bl	8008dd8 <__sinit>
 8009f7e:	4b14      	ldr	r3, [pc, #80]	; (8009fd0 <_fflush_r+0x6c>)
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d11b      	bne.n	8009fbc <_fflush_r+0x58>
 8009f84:	686c      	ldr	r4, [r5, #4]
 8009f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0ef      	beq.n	8009f6e <_fflush_r+0xa>
 8009f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f90:	07d0      	lsls	r0, r2, #31
 8009f92:	d404      	bmi.n	8009f9e <_fflush_r+0x3a>
 8009f94:	0599      	lsls	r1, r3, #22
 8009f96:	d402      	bmi.n	8009f9e <_fflush_r+0x3a>
 8009f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f9a:	f7fe ffe0 	bl	8008f5e <__retarget_lock_acquire_recursive>
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	f7ff ff59 	bl	8009e58 <__sflush_r>
 8009fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fa8:	07da      	lsls	r2, r3, #31
 8009faa:	4605      	mov	r5, r0
 8009fac:	d4e0      	bmi.n	8009f70 <_fflush_r+0xc>
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	059b      	lsls	r3, r3, #22
 8009fb2:	d4dd      	bmi.n	8009f70 <_fflush_r+0xc>
 8009fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fb6:	f7fe ffd3 	bl	8008f60 <__retarget_lock_release_recursive>
 8009fba:	e7d9      	b.n	8009f70 <_fflush_r+0xc>
 8009fbc:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <_fflush_r+0x70>)
 8009fbe:	429c      	cmp	r4, r3
 8009fc0:	d101      	bne.n	8009fc6 <_fflush_r+0x62>
 8009fc2:	68ac      	ldr	r4, [r5, #8]
 8009fc4:	e7df      	b.n	8009f86 <_fflush_r+0x22>
 8009fc6:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <_fflush_r+0x74>)
 8009fc8:	429c      	cmp	r4, r3
 8009fca:	bf08      	it	eq
 8009fcc:	68ec      	ldreq	r4, [r5, #12]
 8009fce:	e7da      	b.n	8009f86 <_fflush_r+0x22>
 8009fd0:	0800bcbc 	.word	0x0800bcbc
 8009fd4:	0800bcdc 	.word	0x0800bcdc
 8009fd8:	0800bc9c 	.word	0x0800bc9c

08009fdc <rshift>:
 8009fdc:	6903      	ldr	r3, [r0, #16]
 8009fde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009fe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fe6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009fea:	f100 0414 	add.w	r4, r0, #20
 8009fee:	dd45      	ble.n	800a07c <rshift+0xa0>
 8009ff0:	f011 011f 	ands.w	r1, r1, #31
 8009ff4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ff8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ffc:	d10c      	bne.n	800a018 <rshift+0x3c>
 8009ffe:	f100 0710 	add.w	r7, r0, #16
 800a002:	4629      	mov	r1, r5
 800a004:	42b1      	cmp	r1, r6
 800a006:	d334      	bcc.n	800a072 <rshift+0x96>
 800a008:	1a9b      	subs	r3, r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	1eea      	subs	r2, r5, #3
 800a00e:	4296      	cmp	r6, r2
 800a010:	bf38      	it	cc
 800a012:	2300      	movcc	r3, #0
 800a014:	4423      	add	r3, r4
 800a016:	e015      	b.n	800a044 <rshift+0x68>
 800a018:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a01c:	f1c1 0820 	rsb	r8, r1, #32
 800a020:	40cf      	lsrs	r7, r1
 800a022:	f105 0e04 	add.w	lr, r5, #4
 800a026:	46a1      	mov	r9, r4
 800a028:	4576      	cmp	r6, lr
 800a02a:	46f4      	mov	ip, lr
 800a02c:	d815      	bhi.n	800a05a <rshift+0x7e>
 800a02e:	1a9a      	subs	r2, r3, r2
 800a030:	0092      	lsls	r2, r2, #2
 800a032:	3a04      	subs	r2, #4
 800a034:	3501      	adds	r5, #1
 800a036:	42ae      	cmp	r6, r5
 800a038:	bf38      	it	cc
 800a03a:	2200      	movcc	r2, #0
 800a03c:	18a3      	adds	r3, r4, r2
 800a03e:	50a7      	str	r7, [r4, r2]
 800a040:	b107      	cbz	r7, 800a044 <rshift+0x68>
 800a042:	3304      	adds	r3, #4
 800a044:	1b1a      	subs	r2, r3, r4
 800a046:	42a3      	cmp	r3, r4
 800a048:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a04c:	bf08      	it	eq
 800a04e:	2300      	moveq	r3, #0
 800a050:	6102      	str	r2, [r0, #16]
 800a052:	bf08      	it	eq
 800a054:	6143      	streq	r3, [r0, #20]
 800a056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a05a:	f8dc c000 	ldr.w	ip, [ip]
 800a05e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a062:	ea4c 0707 	orr.w	r7, ip, r7
 800a066:	f849 7b04 	str.w	r7, [r9], #4
 800a06a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a06e:	40cf      	lsrs	r7, r1
 800a070:	e7da      	b.n	800a028 <rshift+0x4c>
 800a072:	f851 cb04 	ldr.w	ip, [r1], #4
 800a076:	f847 cf04 	str.w	ip, [r7, #4]!
 800a07a:	e7c3      	b.n	800a004 <rshift+0x28>
 800a07c:	4623      	mov	r3, r4
 800a07e:	e7e1      	b.n	800a044 <rshift+0x68>

0800a080 <__hexdig_fun>:
 800a080:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a084:	2b09      	cmp	r3, #9
 800a086:	d802      	bhi.n	800a08e <__hexdig_fun+0xe>
 800a088:	3820      	subs	r0, #32
 800a08a:	b2c0      	uxtb	r0, r0
 800a08c:	4770      	bx	lr
 800a08e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a092:	2b05      	cmp	r3, #5
 800a094:	d801      	bhi.n	800a09a <__hexdig_fun+0x1a>
 800a096:	3847      	subs	r0, #71	; 0x47
 800a098:	e7f7      	b.n	800a08a <__hexdig_fun+0xa>
 800a09a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a09e:	2b05      	cmp	r3, #5
 800a0a0:	d801      	bhi.n	800a0a6 <__hexdig_fun+0x26>
 800a0a2:	3827      	subs	r0, #39	; 0x27
 800a0a4:	e7f1      	b.n	800a08a <__hexdig_fun+0xa>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	4770      	bx	lr
	...

0800a0ac <__gethex>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	ed2d 8b02 	vpush	{d8}
 800a0b4:	b089      	sub	sp, #36	; 0x24
 800a0b6:	ee08 0a10 	vmov	s16, r0
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	4bb4      	ldr	r3, [pc, #720]	; (800a390 <__gethex+0x2e4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	9301      	str	r3, [sp, #4]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	468b      	mov	fp, r1
 800a0c6:	4690      	mov	r8, r2
 800a0c8:	f7f6 f8ba 	bl	8000240 <strlen>
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	f8db 2000 	ldr.w	r2, [fp]
 800a0d2:	4403      	add	r3, r0
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a0da:	9305      	str	r3, [sp, #20]
 800a0dc:	1c93      	adds	r3, r2, #2
 800a0de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a0e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a0e6:	32fe      	adds	r2, #254	; 0xfe
 800a0e8:	18d1      	adds	r1, r2, r3
 800a0ea:	461f      	mov	r7, r3
 800a0ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a0f0:	9100      	str	r1, [sp, #0]
 800a0f2:	2830      	cmp	r0, #48	; 0x30
 800a0f4:	d0f8      	beq.n	800a0e8 <__gethex+0x3c>
 800a0f6:	f7ff ffc3 	bl	800a080 <__hexdig_fun>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d13a      	bne.n	800a176 <__gethex+0xca>
 800a100:	9901      	ldr	r1, [sp, #4]
 800a102:	4652      	mov	r2, sl
 800a104:	4638      	mov	r0, r7
 800a106:	f7ff f894 	bl	8009232 <strncmp>
 800a10a:	4605      	mov	r5, r0
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d168      	bne.n	800a1e2 <__gethex+0x136>
 800a110:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a114:	eb07 060a 	add.w	r6, r7, sl
 800a118:	f7ff ffb2 	bl	800a080 <__hexdig_fun>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d062      	beq.n	800a1e6 <__gethex+0x13a>
 800a120:	4633      	mov	r3, r6
 800a122:	7818      	ldrb	r0, [r3, #0]
 800a124:	2830      	cmp	r0, #48	; 0x30
 800a126:	461f      	mov	r7, r3
 800a128:	f103 0301 	add.w	r3, r3, #1
 800a12c:	d0f9      	beq.n	800a122 <__gethex+0x76>
 800a12e:	f7ff ffa7 	bl	800a080 <__hexdig_fun>
 800a132:	2301      	movs	r3, #1
 800a134:	fab0 f480 	clz	r4, r0
 800a138:	0964      	lsrs	r4, r4, #5
 800a13a:	4635      	mov	r5, r6
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	463a      	mov	r2, r7
 800a140:	4616      	mov	r6, r2
 800a142:	3201      	adds	r2, #1
 800a144:	7830      	ldrb	r0, [r6, #0]
 800a146:	f7ff ff9b 	bl	800a080 <__hexdig_fun>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d1f8      	bne.n	800a140 <__gethex+0x94>
 800a14e:	9901      	ldr	r1, [sp, #4]
 800a150:	4652      	mov	r2, sl
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff f86d 	bl	8009232 <strncmp>
 800a158:	b980      	cbnz	r0, 800a17c <__gethex+0xd0>
 800a15a:	b94d      	cbnz	r5, 800a170 <__gethex+0xc4>
 800a15c:	eb06 050a 	add.w	r5, r6, sl
 800a160:	462a      	mov	r2, r5
 800a162:	4616      	mov	r6, r2
 800a164:	3201      	adds	r2, #1
 800a166:	7830      	ldrb	r0, [r6, #0]
 800a168:	f7ff ff8a 	bl	800a080 <__hexdig_fun>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d1f8      	bne.n	800a162 <__gethex+0xb6>
 800a170:	1bad      	subs	r5, r5, r6
 800a172:	00ad      	lsls	r5, r5, #2
 800a174:	e004      	b.n	800a180 <__gethex+0xd4>
 800a176:	2400      	movs	r4, #0
 800a178:	4625      	mov	r5, r4
 800a17a:	e7e0      	b.n	800a13e <__gethex+0x92>
 800a17c:	2d00      	cmp	r5, #0
 800a17e:	d1f7      	bne.n	800a170 <__gethex+0xc4>
 800a180:	7833      	ldrb	r3, [r6, #0]
 800a182:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a186:	2b50      	cmp	r3, #80	; 0x50
 800a188:	d13b      	bne.n	800a202 <__gethex+0x156>
 800a18a:	7873      	ldrb	r3, [r6, #1]
 800a18c:	2b2b      	cmp	r3, #43	; 0x2b
 800a18e:	d02c      	beq.n	800a1ea <__gethex+0x13e>
 800a190:	2b2d      	cmp	r3, #45	; 0x2d
 800a192:	d02e      	beq.n	800a1f2 <__gethex+0x146>
 800a194:	1c71      	adds	r1, r6, #1
 800a196:	f04f 0900 	mov.w	r9, #0
 800a19a:	7808      	ldrb	r0, [r1, #0]
 800a19c:	f7ff ff70 	bl	800a080 <__hexdig_fun>
 800a1a0:	1e43      	subs	r3, r0, #1
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b18      	cmp	r3, #24
 800a1a6:	d82c      	bhi.n	800a202 <__gethex+0x156>
 800a1a8:	f1a0 0210 	sub.w	r2, r0, #16
 800a1ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a1b0:	f7ff ff66 	bl	800a080 <__hexdig_fun>
 800a1b4:	1e43      	subs	r3, r0, #1
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b18      	cmp	r3, #24
 800a1ba:	d91d      	bls.n	800a1f8 <__gethex+0x14c>
 800a1bc:	f1b9 0f00 	cmp.w	r9, #0
 800a1c0:	d000      	beq.n	800a1c4 <__gethex+0x118>
 800a1c2:	4252      	negs	r2, r2
 800a1c4:	4415      	add	r5, r2
 800a1c6:	f8cb 1000 	str.w	r1, [fp]
 800a1ca:	b1e4      	cbz	r4, 800a206 <__gethex+0x15a>
 800a1cc:	9b00      	ldr	r3, [sp, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bf14      	ite	ne
 800a1d2:	2700      	movne	r7, #0
 800a1d4:	2706      	moveq	r7, #6
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	b009      	add	sp, #36	; 0x24
 800a1da:	ecbd 8b02 	vpop	{d8}
 800a1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e2:	463e      	mov	r6, r7
 800a1e4:	4625      	mov	r5, r4
 800a1e6:	2401      	movs	r4, #1
 800a1e8:	e7ca      	b.n	800a180 <__gethex+0xd4>
 800a1ea:	f04f 0900 	mov.w	r9, #0
 800a1ee:	1cb1      	adds	r1, r6, #2
 800a1f0:	e7d3      	b.n	800a19a <__gethex+0xee>
 800a1f2:	f04f 0901 	mov.w	r9, #1
 800a1f6:	e7fa      	b.n	800a1ee <__gethex+0x142>
 800a1f8:	230a      	movs	r3, #10
 800a1fa:	fb03 0202 	mla	r2, r3, r2, r0
 800a1fe:	3a10      	subs	r2, #16
 800a200:	e7d4      	b.n	800a1ac <__gethex+0x100>
 800a202:	4631      	mov	r1, r6
 800a204:	e7df      	b.n	800a1c6 <__gethex+0x11a>
 800a206:	1bf3      	subs	r3, r6, r7
 800a208:	3b01      	subs	r3, #1
 800a20a:	4621      	mov	r1, r4
 800a20c:	2b07      	cmp	r3, #7
 800a20e:	dc0b      	bgt.n	800a228 <__gethex+0x17c>
 800a210:	ee18 0a10 	vmov	r0, s16
 800a214:	f000 fa82 	bl	800a71c <_Balloc>
 800a218:	4604      	mov	r4, r0
 800a21a:	b940      	cbnz	r0, 800a22e <__gethex+0x182>
 800a21c:	4b5d      	ldr	r3, [pc, #372]	; (800a394 <__gethex+0x2e8>)
 800a21e:	4602      	mov	r2, r0
 800a220:	21de      	movs	r1, #222	; 0xde
 800a222:	485d      	ldr	r0, [pc, #372]	; (800a398 <__gethex+0x2ec>)
 800a224:	f000 ffc2 	bl	800b1ac <__assert_func>
 800a228:	3101      	adds	r1, #1
 800a22a:	105b      	asrs	r3, r3, #1
 800a22c:	e7ee      	b.n	800a20c <__gethex+0x160>
 800a22e:	f100 0914 	add.w	r9, r0, #20
 800a232:	f04f 0b00 	mov.w	fp, #0
 800a236:	f1ca 0301 	rsb	r3, sl, #1
 800a23a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a23e:	f8cd b000 	str.w	fp, [sp]
 800a242:	9306      	str	r3, [sp, #24]
 800a244:	42b7      	cmp	r7, r6
 800a246:	d340      	bcc.n	800a2ca <__gethex+0x21e>
 800a248:	9802      	ldr	r0, [sp, #8]
 800a24a:	9b00      	ldr	r3, [sp, #0]
 800a24c:	f840 3b04 	str.w	r3, [r0], #4
 800a250:	eba0 0009 	sub.w	r0, r0, r9
 800a254:	1080      	asrs	r0, r0, #2
 800a256:	0146      	lsls	r6, r0, #5
 800a258:	6120      	str	r0, [r4, #16]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fb50 	bl	800a900 <__hi0bits>
 800a260:	1a30      	subs	r0, r6, r0
 800a262:	f8d8 6000 	ldr.w	r6, [r8]
 800a266:	42b0      	cmp	r0, r6
 800a268:	dd63      	ble.n	800a332 <__gethex+0x286>
 800a26a:	1b87      	subs	r7, r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 fef1 	bl	800b056 <__any_on>
 800a274:	4682      	mov	sl, r0
 800a276:	b1a8      	cbz	r0, 800a2a4 <__gethex+0x1f8>
 800a278:	1e7b      	subs	r3, r7, #1
 800a27a:	1159      	asrs	r1, r3, #5
 800a27c:	f003 021f 	and.w	r2, r3, #31
 800a280:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a284:	f04f 0a01 	mov.w	sl, #1
 800a288:	fa0a f202 	lsl.w	r2, sl, r2
 800a28c:	420a      	tst	r2, r1
 800a28e:	d009      	beq.n	800a2a4 <__gethex+0x1f8>
 800a290:	4553      	cmp	r3, sl
 800a292:	dd05      	ble.n	800a2a0 <__gethex+0x1f4>
 800a294:	1eb9      	subs	r1, r7, #2
 800a296:	4620      	mov	r0, r4
 800a298:	f000 fedd 	bl	800b056 <__any_on>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d145      	bne.n	800a32c <__gethex+0x280>
 800a2a0:	f04f 0a02 	mov.w	sl, #2
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f7ff fe98 	bl	8009fdc <rshift>
 800a2ac:	443d      	add	r5, r7
 800a2ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2b2:	42ab      	cmp	r3, r5
 800a2b4:	da4c      	bge.n	800a350 <__gethex+0x2a4>
 800a2b6:	ee18 0a10 	vmov	r0, s16
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	f000 fa6e 	bl	800a79c <_Bfree>
 800a2c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	27a3      	movs	r7, #163	; 0xa3
 800a2c8:	e785      	b.n	800a1d6 <__gethex+0x12a>
 800a2ca:	1e73      	subs	r3, r6, #1
 800a2cc:	9a05      	ldr	r2, [sp, #20]
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d019      	beq.n	800a30c <__gethex+0x260>
 800a2d8:	f1bb 0f20 	cmp.w	fp, #32
 800a2dc:	d107      	bne.n	800a2ee <__gethex+0x242>
 800a2de:	9b02      	ldr	r3, [sp, #8]
 800a2e0:	9a00      	ldr	r2, [sp, #0]
 800a2e2:	f843 2b04 	str.w	r2, [r3], #4
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	469b      	mov	fp, r3
 800a2ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a2f2:	f7ff fec5 	bl	800a080 <__hexdig_fun>
 800a2f6:	9b00      	ldr	r3, [sp, #0]
 800a2f8:	f000 000f 	and.w	r0, r0, #15
 800a2fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800a300:	4303      	orrs	r3, r0
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	f10b 0b04 	add.w	fp, fp, #4
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	e00d      	b.n	800a328 <__gethex+0x27c>
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	9a06      	ldr	r2, [sp, #24]
 800a310:	4413      	add	r3, r2
 800a312:	42bb      	cmp	r3, r7
 800a314:	d3e0      	bcc.n	800a2d8 <__gethex+0x22c>
 800a316:	4618      	mov	r0, r3
 800a318:	9901      	ldr	r1, [sp, #4]
 800a31a:	9307      	str	r3, [sp, #28]
 800a31c:	4652      	mov	r2, sl
 800a31e:	f7fe ff88 	bl	8009232 <strncmp>
 800a322:	9b07      	ldr	r3, [sp, #28]
 800a324:	2800      	cmp	r0, #0
 800a326:	d1d7      	bne.n	800a2d8 <__gethex+0x22c>
 800a328:	461e      	mov	r6, r3
 800a32a:	e78b      	b.n	800a244 <__gethex+0x198>
 800a32c:	f04f 0a03 	mov.w	sl, #3
 800a330:	e7b8      	b.n	800a2a4 <__gethex+0x1f8>
 800a332:	da0a      	bge.n	800a34a <__gethex+0x29e>
 800a334:	1a37      	subs	r7, r6, r0
 800a336:	4621      	mov	r1, r4
 800a338:	ee18 0a10 	vmov	r0, s16
 800a33c:	463a      	mov	r2, r7
 800a33e:	f000 fc49 	bl	800abd4 <__lshift>
 800a342:	1bed      	subs	r5, r5, r7
 800a344:	4604      	mov	r4, r0
 800a346:	f100 0914 	add.w	r9, r0, #20
 800a34a:	f04f 0a00 	mov.w	sl, #0
 800a34e:	e7ae      	b.n	800a2ae <__gethex+0x202>
 800a350:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a354:	42a8      	cmp	r0, r5
 800a356:	dd72      	ble.n	800a43e <__gethex+0x392>
 800a358:	1b45      	subs	r5, r0, r5
 800a35a:	42ae      	cmp	r6, r5
 800a35c:	dc36      	bgt.n	800a3cc <__gethex+0x320>
 800a35e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d02a      	beq.n	800a3bc <__gethex+0x310>
 800a366:	2b03      	cmp	r3, #3
 800a368:	d02c      	beq.n	800a3c4 <__gethex+0x318>
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d11c      	bne.n	800a3a8 <__gethex+0x2fc>
 800a36e:	42ae      	cmp	r6, r5
 800a370:	d11a      	bne.n	800a3a8 <__gethex+0x2fc>
 800a372:	2e01      	cmp	r6, #1
 800a374:	d112      	bne.n	800a39c <__gethex+0x2f0>
 800a376:	9a04      	ldr	r2, [sp, #16]
 800a378:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	2301      	movs	r3, #1
 800a380:	6123      	str	r3, [r4, #16]
 800a382:	f8c9 3000 	str.w	r3, [r9]
 800a386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a388:	2762      	movs	r7, #98	; 0x62
 800a38a:	601c      	str	r4, [r3, #0]
 800a38c:	e723      	b.n	800a1d6 <__gethex+0x12a>
 800a38e:	bf00      	nop
 800a390:	0800bdd8 	.word	0x0800bdd8
 800a394:	0800bd60 	.word	0x0800bd60
 800a398:	0800bd71 	.word	0x0800bd71
 800a39c:	1e71      	subs	r1, r6, #1
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 fe59 	bl	800b056 <__any_on>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1e6      	bne.n	800a376 <__gethex+0x2ca>
 800a3a8:	ee18 0a10 	vmov	r0, s16
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	f000 f9f5 	bl	800a79c <_Bfree>
 800a3b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	2750      	movs	r7, #80	; 0x50
 800a3ba:	e70c      	b.n	800a1d6 <__gethex+0x12a>
 800a3bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1f2      	bne.n	800a3a8 <__gethex+0x2fc>
 800a3c2:	e7d8      	b.n	800a376 <__gethex+0x2ca>
 800a3c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1d5      	bne.n	800a376 <__gethex+0x2ca>
 800a3ca:	e7ed      	b.n	800a3a8 <__gethex+0x2fc>
 800a3cc:	1e6f      	subs	r7, r5, #1
 800a3ce:	f1ba 0f00 	cmp.w	sl, #0
 800a3d2:	d131      	bne.n	800a438 <__gethex+0x38c>
 800a3d4:	b127      	cbz	r7, 800a3e0 <__gethex+0x334>
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 fe3c 	bl	800b056 <__any_on>
 800a3de:	4682      	mov	sl, r0
 800a3e0:	117b      	asrs	r3, r7, #5
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a3e8:	f007 071f 	and.w	r7, r7, #31
 800a3ec:	fa01 f707 	lsl.w	r7, r1, r7
 800a3f0:	421f      	tst	r7, r3
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	bf18      	it	ne
 800a3f8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a3fc:	1b76      	subs	r6, r6, r5
 800a3fe:	f7ff fded 	bl	8009fdc <rshift>
 800a402:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a406:	2702      	movs	r7, #2
 800a408:	f1ba 0f00 	cmp.w	sl, #0
 800a40c:	d048      	beq.n	800a4a0 <__gethex+0x3f4>
 800a40e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a412:	2b02      	cmp	r3, #2
 800a414:	d015      	beq.n	800a442 <__gethex+0x396>
 800a416:	2b03      	cmp	r3, #3
 800a418:	d017      	beq.n	800a44a <__gethex+0x39e>
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d109      	bne.n	800a432 <__gethex+0x386>
 800a41e:	f01a 0f02 	tst.w	sl, #2
 800a422:	d006      	beq.n	800a432 <__gethex+0x386>
 800a424:	f8d9 0000 	ldr.w	r0, [r9]
 800a428:	ea4a 0a00 	orr.w	sl, sl, r0
 800a42c:	f01a 0f01 	tst.w	sl, #1
 800a430:	d10e      	bne.n	800a450 <__gethex+0x3a4>
 800a432:	f047 0710 	orr.w	r7, r7, #16
 800a436:	e033      	b.n	800a4a0 <__gethex+0x3f4>
 800a438:	f04f 0a01 	mov.w	sl, #1
 800a43c:	e7d0      	b.n	800a3e0 <__gethex+0x334>
 800a43e:	2701      	movs	r7, #1
 800a440:	e7e2      	b.n	800a408 <__gethex+0x35c>
 800a442:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a444:	f1c3 0301 	rsb	r3, r3, #1
 800a448:	9315      	str	r3, [sp, #84]	; 0x54
 800a44a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0f0      	beq.n	800a432 <__gethex+0x386>
 800a450:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a454:	f104 0314 	add.w	r3, r4, #20
 800a458:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a45c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a460:	f04f 0c00 	mov.w	ip, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f853 2b04 	ldr.w	r2, [r3], #4
 800a46a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a46e:	d01c      	beq.n	800a4aa <__gethex+0x3fe>
 800a470:	3201      	adds	r2, #1
 800a472:	6002      	str	r2, [r0, #0]
 800a474:	2f02      	cmp	r7, #2
 800a476:	f104 0314 	add.w	r3, r4, #20
 800a47a:	d13f      	bne.n	800a4fc <__gethex+0x450>
 800a47c:	f8d8 2000 	ldr.w	r2, [r8]
 800a480:	3a01      	subs	r2, #1
 800a482:	42b2      	cmp	r2, r6
 800a484:	d10a      	bne.n	800a49c <__gethex+0x3f0>
 800a486:	1171      	asrs	r1, r6, #5
 800a488:	2201      	movs	r2, #1
 800a48a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a48e:	f006 061f 	and.w	r6, r6, #31
 800a492:	fa02 f606 	lsl.w	r6, r2, r6
 800a496:	421e      	tst	r6, r3
 800a498:	bf18      	it	ne
 800a49a:	4617      	movne	r7, r2
 800a49c:	f047 0720 	orr.w	r7, r7, #32
 800a4a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4a2:	601c      	str	r4, [r3, #0]
 800a4a4:	9b04      	ldr	r3, [sp, #16]
 800a4a6:	601d      	str	r5, [r3, #0]
 800a4a8:	e695      	b.n	800a1d6 <__gethex+0x12a>
 800a4aa:	4299      	cmp	r1, r3
 800a4ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800a4b0:	d8d8      	bhi.n	800a464 <__gethex+0x3b8>
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	459b      	cmp	fp, r3
 800a4b6:	db19      	blt.n	800a4ec <__gethex+0x440>
 800a4b8:	6861      	ldr	r1, [r4, #4]
 800a4ba:	ee18 0a10 	vmov	r0, s16
 800a4be:	3101      	adds	r1, #1
 800a4c0:	f000 f92c 	bl	800a71c <_Balloc>
 800a4c4:	4681      	mov	r9, r0
 800a4c6:	b918      	cbnz	r0, 800a4d0 <__gethex+0x424>
 800a4c8:	4b1a      	ldr	r3, [pc, #104]	; (800a534 <__gethex+0x488>)
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	2184      	movs	r1, #132	; 0x84
 800a4ce:	e6a8      	b.n	800a222 <__gethex+0x176>
 800a4d0:	6922      	ldr	r2, [r4, #16]
 800a4d2:	3202      	adds	r2, #2
 800a4d4:	f104 010c 	add.w	r1, r4, #12
 800a4d8:	0092      	lsls	r2, r2, #2
 800a4da:	300c      	adds	r0, #12
 800a4dc:	f7fe fd41 	bl	8008f62 <memcpy>
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	ee18 0a10 	vmov	r0, s16
 800a4e6:	f000 f959 	bl	800a79c <_Bfree>
 800a4ea:	464c      	mov	r4, r9
 800a4ec:	6923      	ldr	r3, [r4, #16]
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4f4:	6122      	str	r2, [r4, #16]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	615a      	str	r2, [r3, #20]
 800a4fa:	e7bb      	b.n	800a474 <__gethex+0x3c8>
 800a4fc:	6922      	ldr	r2, [r4, #16]
 800a4fe:	455a      	cmp	r2, fp
 800a500:	dd0b      	ble.n	800a51a <__gethex+0x46e>
 800a502:	2101      	movs	r1, #1
 800a504:	4620      	mov	r0, r4
 800a506:	f7ff fd69 	bl	8009fdc <rshift>
 800a50a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a50e:	3501      	adds	r5, #1
 800a510:	42ab      	cmp	r3, r5
 800a512:	f6ff aed0 	blt.w	800a2b6 <__gethex+0x20a>
 800a516:	2701      	movs	r7, #1
 800a518:	e7c0      	b.n	800a49c <__gethex+0x3f0>
 800a51a:	f016 061f 	ands.w	r6, r6, #31
 800a51e:	d0fa      	beq.n	800a516 <__gethex+0x46a>
 800a520:	4453      	add	r3, sl
 800a522:	f1c6 0620 	rsb	r6, r6, #32
 800a526:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a52a:	f000 f9e9 	bl	800a900 <__hi0bits>
 800a52e:	42b0      	cmp	r0, r6
 800a530:	dbe7      	blt.n	800a502 <__gethex+0x456>
 800a532:	e7f0      	b.n	800a516 <__gethex+0x46a>
 800a534:	0800bd60 	.word	0x0800bd60

0800a538 <L_shift>:
 800a538:	f1c2 0208 	rsb	r2, r2, #8
 800a53c:	0092      	lsls	r2, r2, #2
 800a53e:	b570      	push	{r4, r5, r6, lr}
 800a540:	f1c2 0620 	rsb	r6, r2, #32
 800a544:	6843      	ldr	r3, [r0, #4]
 800a546:	6804      	ldr	r4, [r0, #0]
 800a548:	fa03 f506 	lsl.w	r5, r3, r6
 800a54c:	432c      	orrs	r4, r5
 800a54e:	40d3      	lsrs	r3, r2
 800a550:	6004      	str	r4, [r0, #0]
 800a552:	f840 3f04 	str.w	r3, [r0, #4]!
 800a556:	4288      	cmp	r0, r1
 800a558:	d3f4      	bcc.n	800a544 <L_shift+0xc>
 800a55a:	bd70      	pop	{r4, r5, r6, pc}

0800a55c <__match>:
 800a55c:	b530      	push	{r4, r5, lr}
 800a55e:	6803      	ldr	r3, [r0, #0]
 800a560:	3301      	adds	r3, #1
 800a562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a566:	b914      	cbnz	r4, 800a56e <__match+0x12>
 800a568:	6003      	str	r3, [r0, #0]
 800a56a:	2001      	movs	r0, #1
 800a56c:	bd30      	pop	{r4, r5, pc}
 800a56e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a572:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a576:	2d19      	cmp	r5, #25
 800a578:	bf98      	it	ls
 800a57a:	3220      	addls	r2, #32
 800a57c:	42a2      	cmp	r2, r4
 800a57e:	d0f0      	beq.n	800a562 <__match+0x6>
 800a580:	2000      	movs	r0, #0
 800a582:	e7f3      	b.n	800a56c <__match+0x10>

0800a584 <__hexnan>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	680b      	ldr	r3, [r1, #0]
 800a58a:	115e      	asrs	r6, r3, #5
 800a58c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a590:	f013 031f 	ands.w	r3, r3, #31
 800a594:	b087      	sub	sp, #28
 800a596:	bf18      	it	ne
 800a598:	3604      	addne	r6, #4
 800a59a:	2500      	movs	r5, #0
 800a59c:	1f37      	subs	r7, r6, #4
 800a59e:	4690      	mov	r8, r2
 800a5a0:	6802      	ldr	r2, [r0, #0]
 800a5a2:	9301      	str	r3, [sp, #4]
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a5aa:	46b9      	mov	r9, r7
 800a5ac:	463c      	mov	r4, r7
 800a5ae:	9502      	str	r5, [sp, #8]
 800a5b0:	46ab      	mov	fp, r5
 800a5b2:	7851      	ldrb	r1, [r2, #1]
 800a5b4:	1c53      	adds	r3, r2, #1
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	b341      	cbz	r1, 800a60c <__hexnan+0x88>
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	9205      	str	r2, [sp, #20]
 800a5be:	9104      	str	r1, [sp, #16]
 800a5c0:	f7ff fd5e 	bl	800a080 <__hexdig_fun>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d14f      	bne.n	800a668 <__hexnan+0xe4>
 800a5c8:	9904      	ldr	r1, [sp, #16]
 800a5ca:	9a05      	ldr	r2, [sp, #20]
 800a5cc:	2920      	cmp	r1, #32
 800a5ce:	d818      	bhi.n	800a602 <__hexnan+0x7e>
 800a5d0:	9b02      	ldr	r3, [sp, #8]
 800a5d2:	459b      	cmp	fp, r3
 800a5d4:	dd13      	ble.n	800a5fe <__hexnan+0x7a>
 800a5d6:	454c      	cmp	r4, r9
 800a5d8:	d206      	bcs.n	800a5e8 <__hexnan+0x64>
 800a5da:	2d07      	cmp	r5, #7
 800a5dc:	dc04      	bgt.n	800a5e8 <__hexnan+0x64>
 800a5de:	462a      	mov	r2, r5
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f7ff ffa8 	bl	800a538 <L_shift>
 800a5e8:	4544      	cmp	r4, r8
 800a5ea:	d950      	bls.n	800a68e <__hexnan+0x10a>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f1a4 0904 	sub.w	r9, r4, #4
 800a5f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5f6:	f8cd b008 	str.w	fp, [sp, #8]
 800a5fa:	464c      	mov	r4, r9
 800a5fc:	461d      	mov	r5, r3
 800a5fe:	9a03      	ldr	r2, [sp, #12]
 800a600:	e7d7      	b.n	800a5b2 <__hexnan+0x2e>
 800a602:	2929      	cmp	r1, #41	; 0x29
 800a604:	d156      	bne.n	800a6b4 <__hexnan+0x130>
 800a606:	3202      	adds	r2, #2
 800a608:	f8ca 2000 	str.w	r2, [sl]
 800a60c:	f1bb 0f00 	cmp.w	fp, #0
 800a610:	d050      	beq.n	800a6b4 <__hexnan+0x130>
 800a612:	454c      	cmp	r4, r9
 800a614:	d206      	bcs.n	800a624 <__hexnan+0xa0>
 800a616:	2d07      	cmp	r5, #7
 800a618:	dc04      	bgt.n	800a624 <__hexnan+0xa0>
 800a61a:	462a      	mov	r2, r5
 800a61c:	4649      	mov	r1, r9
 800a61e:	4620      	mov	r0, r4
 800a620:	f7ff ff8a 	bl	800a538 <L_shift>
 800a624:	4544      	cmp	r4, r8
 800a626:	d934      	bls.n	800a692 <__hexnan+0x10e>
 800a628:	f1a8 0204 	sub.w	r2, r8, #4
 800a62c:	4623      	mov	r3, r4
 800a62e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a632:	f842 1f04 	str.w	r1, [r2, #4]!
 800a636:	429f      	cmp	r7, r3
 800a638:	d2f9      	bcs.n	800a62e <__hexnan+0xaa>
 800a63a:	1b3b      	subs	r3, r7, r4
 800a63c:	f023 0303 	bic.w	r3, r3, #3
 800a640:	3304      	adds	r3, #4
 800a642:	3401      	adds	r4, #1
 800a644:	3e03      	subs	r6, #3
 800a646:	42b4      	cmp	r4, r6
 800a648:	bf88      	it	hi
 800a64a:	2304      	movhi	r3, #4
 800a64c:	4443      	add	r3, r8
 800a64e:	2200      	movs	r2, #0
 800a650:	f843 2b04 	str.w	r2, [r3], #4
 800a654:	429f      	cmp	r7, r3
 800a656:	d2fb      	bcs.n	800a650 <__hexnan+0xcc>
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	b91b      	cbnz	r3, 800a664 <__hexnan+0xe0>
 800a65c:	4547      	cmp	r7, r8
 800a65e:	d127      	bne.n	800a6b0 <__hexnan+0x12c>
 800a660:	2301      	movs	r3, #1
 800a662:	603b      	str	r3, [r7, #0]
 800a664:	2005      	movs	r0, #5
 800a666:	e026      	b.n	800a6b6 <__hexnan+0x132>
 800a668:	3501      	adds	r5, #1
 800a66a:	2d08      	cmp	r5, #8
 800a66c:	f10b 0b01 	add.w	fp, fp, #1
 800a670:	dd06      	ble.n	800a680 <__hexnan+0xfc>
 800a672:	4544      	cmp	r4, r8
 800a674:	d9c3      	bls.n	800a5fe <__hexnan+0x7a>
 800a676:	2300      	movs	r3, #0
 800a678:	f844 3c04 	str.w	r3, [r4, #-4]
 800a67c:	2501      	movs	r5, #1
 800a67e:	3c04      	subs	r4, #4
 800a680:	6822      	ldr	r2, [r4, #0]
 800a682:	f000 000f 	and.w	r0, r0, #15
 800a686:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a68a:	6022      	str	r2, [r4, #0]
 800a68c:	e7b7      	b.n	800a5fe <__hexnan+0x7a>
 800a68e:	2508      	movs	r5, #8
 800a690:	e7b5      	b.n	800a5fe <__hexnan+0x7a>
 800a692:	9b01      	ldr	r3, [sp, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0df      	beq.n	800a658 <__hexnan+0xd4>
 800a698:	f04f 32ff 	mov.w	r2, #4294967295
 800a69c:	f1c3 0320 	rsb	r3, r3, #32
 800a6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a6a8:	401a      	ands	r2, r3
 800a6aa:	f846 2c04 	str.w	r2, [r6, #-4]
 800a6ae:	e7d3      	b.n	800a658 <__hexnan+0xd4>
 800a6b0:	3f04      	subs	r7, #4
 800a6b2:	e7d1      	b.n	800a658 <__hexnan+0xd4>
 800a6b4:	2004      	movs	r0, #4
 800a6b6:	b007      	add	sp, #28
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6bc <_lseek_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d07      	ldr	r5, [pc, #28]	; (800a6dc <_lseek_r+0x20>)
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	602a      	str	r2, [r5, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f7f7 fae6 	bl	8001c9c <_lseek>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_lseek_r+0x1e>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_lseek_r+0x1e>
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	200055c0 	.word	0x200055c0

0800a6e0 <__ascii_mbtowc>:
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	b901      	cbnz	r1, 800a6e6 <__ascii_mbtowc+0x6>
 800a6e4:	a901      	add	r1, sp, #4
 800a6e6:	b142      	cbz	r2, 800a6fa <__ascii_mbtowc+0x1a>
 800a6e8:	b14b      	cbz	r3, 800a6fe <__ascii_mbtowc+0x1e>
 800a6ea:	7813      	ldrb	r3, [r2, #0]
 800a6ec:	600b      	str	r3, [r1, #0]
 800a6ee:	7812      	ldrb	r2, [r2, #0]
 800a6f0:	1e10      	subs	r0, r2, #0
 800a6f2:	bf18      	it	ne
 800a6f4:	2001      	movne	r0, #1
 800a6f6:	b002      	add	sp, #8
 800a6f8:	4770      	bx	lr
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	e7fb      	b.n	800a6f6 <__ascii_mbtowc+0x16>
 800a6fe:	f06f 0001 	mvn.w	r0, #1
 800a702:	e7f8      	b.n	800a6f6 <__ascii_mbtowc+0x16>

0800a704 <__malloc_lock>:
 800a704:	4801      	ldr	r0, [pc, #4]	; (800a70c <__malloc_lock+0x8>)
 800a706:	f7fe bc2a 	b.w	8008f5e <__retarget_lock_acquire_recursive>
 800a70a:	bf00      	nop
 800a70c:	200055b4 	.word	0x200055b4

0800a710 <__malloc_unlock>:
 800a710:	4801      	ldr	r0, [pc, #4]	; (800a718 <__malloc_unlock+0x8>)
 800a712:	f7fe bc25 	b.w	8008f60 <__retarget_lock_release_recursive>
 800a716:	bf00      	nop
 800a718:	200055b4 	.word	0x200055b4

0800a71c <_Balloc>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a720:	4604      	mov	r4, r0
 800a722:	460d      	mov	r5, r1
 800a724:	b976      	cbnz	r6, 800a744 <_Balloc+0x28>
 800a726:	2010      	movs	r0, #16
 800a728:	f000 fd70 	bl	800b20c <malloc>
 800a72c:	4602      	mov	r2, r0
 800a72e:	6260      	str	r0, [r4, #36]	; 0x24
 800a730:	b920      	cbnz	r0, 800a73c <_Balloc+0x20>
 800a732:	4b18      	ldr	r3, [pc, #96]	; (800a794 <_Balloc+0x78>)
 800a734:	4818      	ldr	r0, [pc, #96]	; (800a798 <_Balloc+0x7c>)
 800a736:	2166      	movs	r1, #102	; 0x66
 800a738:	f000 fd38 	bl	800b1ac <__assert_func>
 800a73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a740:	6006      	str	r6, [r0, #0]
 800a742:	60c6      	str	r6, [r0, #12]
 800a744:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a746:	68f3      	ldr	r3, [r6, #12]
 800a748:	b183      	cbz	r3, 800a76c <_Balloc+0x50>
 800a74a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a752:	b9b8      	cbnz	r0, 800a784 <_Balloc+0x68>
 800a754:	2101      	movs	r1, #1
 800a756:	fa01 f605 	lsl.w	r6, r1, r5
 800a75a:	1d72      	adds	r2, r6, #5
 800a75c:	0092      	lsls	r2, r2, #2
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 fc9a 	bl	800b098 <_calloc_r>
 800a764:	b160      	cbz	r0, 800a780 <_Balloc+0x64>
 800a766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a76a:	e00e      	b.n	800a78a <_Balloc+0x6e>
 800a76c:	2221      	movs	r2, #33	; 0x21
 800a76e:	2104      	movs	r1, #4
 800a770:	4620      	mov	r0, r4
 800a772:	f000 fc91 	bl	800b098 <_calloc_r>
 800a776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a778:	60f0      	str	r0, [r6, #12]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e4      	bne.n	800a74a <_Balloc+0x2e>
 800a780:	2000      	movs	r0, #0
 800a782:	bd70      	pop	{r4, r5, r6, pc}
 800a784:	6802      	ldr	r2, [r0, #0]
 800a786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a78a:	2300      	movs	r3, #0
 800a78c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a790:	e7f7      	b.n	800a782 <_Balloc+0x66>
 800a792:	bf00      	nop
 800a794:	0800bdec 	.word	0x0800bdec
 800a798:	0800be03 	.word	0x0800be03

0800a79c <_Bfree>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	b976      	cbnz	r6, 800a7c4 <_Bfree+0x28>
 800a7a6:	2010      	movs	r0, #16
 800a7a8:	f000 fd30 	bl	800b20c <malloc>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	6268      	str	r0, [r5, #36]	; 0x24
 800a7b0:	b920      	cbnz	r0, 800a7bc <_Bfree+0x20>
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <_Bfree+0x3c>)
 800a7b4:	4809      	ldr	r0, [pc, #36]	; (800a7dc <_Bfree+0x40>)
 800a7b6:	218a      	movs	r1, #138	; 0x8a
 800a7b8:	f000 fcf8 	bl	800b1ac <__assert_func>
 800a7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7c0:	6006      	str	r6, [r0, #0]
 800a7c2:	60c6      	str	r6, [r0, #12]
 800a7c4:	b13c      	cbz	r4, 800a7d6 <_Bfree+0x3a>
 800a7c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7c8:	6862      	ldr	r2, [r4, #4]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7d0:	6021      	str	r1, [r4, #0]
 800a7d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	0800bdec 	.word	0x0800bdec
 800a7dc:	0800be03 	.word	0x0800be03

0800a7e0 <__multadd>:
 800a7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e4:	690d      	ldr	r5, [r1, #16]
 800a7e6:	4607      	mov	r7, r0
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	461e      	mov	r6, r3
 800a7ec:	f101 0c14 	add.w	ip, r1, #20
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a7f6:	b299      	uxth	r1, r3
 800a7f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a7fc:	0c1e      	lsrs	r6, r3, #16
 800a7fe:	0c0b      	lsrs	r3, r1, #16
 800a800:	fb02 3306 	mla	r3, r2, r6, r3
 800a804:	b289      	uxth	r1, r1
 800a806:	3001      	adds	r0, #1
 800a808:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a80c:	4285      	cmp	r5, r0
 800a80e:	f84c 1b04 	str.w	r1, [ip], #4
 800a812:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a816:	dcec      	bgt.n	800a7f2 <__multadd+0x12>
 800a818:	b30e      	cbz	r6, 800a85e <__multadd+0x7e>
 800a81a:	68a3      	ldr	r3, [r4, #8]
 800a81c:	42ab      	cmp	r3, r5
 800a81e:	dc19      	bgt.n	800a854 <__multadd+0x74>
 800a820:	6861      	ldr	r1, [r4, #4]
 800a822:	4638      	mov	r0, r7
 800a824:	3101      	adds	r1, #1
 800a826:	f7ff ff79 	bl	800a71c <_Balloc>
 800a82a:	4680      	mov	r8, r0
 800a82c:	b928      	cbnz	r0, 800a83a <__multadd+0x5a>
 800a82e:	4602      	mov	r2, r0
 800a830:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <__multadd+0x84>)
 800a832:	480d      	ldr	r0, [pc, #52]	; (800a868 <__multadd+0x88>)
 800a834:	21b5      	movs	r1, #181	; 0xb5
 800a836:	f000 fcb9 	bl	800b1ac <__assert_func>
 800a83a:	6922      	ldr	r2, [r4, #16]
 800a83c:	3202      	adds	r2, #2
 800a83e:	f104 010c 	add.w	r1, r4, #12
 800a842:	0092      	lsls	r2, r2, #2
 800a844:	300c      	adds	r0, #12
 800a846:	f7fe fb8c 	bl	8008f62 <memcpy>
 800a84a:	4621      	mov	r1, r4
 800a84c:	4638      	mov	r0, r7
 800a84e:	f7ff ffa5 	bl	800a79c <_Bfree>
 800a852:	4644      	mov	r4, r8
 800a854:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a858:	3501      	adds	r5, #1
 800a85a:	615e      	str	r6, [r3, #20]
 800a85c:	6125      	str	r5, [r4, #16]
 800a85e:	4620      	mov	r0, r4
 800a860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a864:	0800bd60 	.word	0x0800bd60
 800a868:	0800be03 	.word	0x0800be03

0800a86c <__s2b>:
 800a86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a870:	460c      	mov	r4, r1
 800a872:	4615      	mov	r5, r2
 800a874:	461f      	mov	r7, r3
 800a876:	2209      	movs	r2, #9
 800a878:	3308      	adds	r3, #8
 800a87a:	4606      	mov	r6, r0
 800a87c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a880:	2100      	movs	r1, #0
 800a882:	2201      	movs	r2, #1
 800a884:	429a      	cmp	r2, r3
 800a886:	db09      	blt.n	800a89c <__s2b+0x30>
 800a888:	4630      	mov	r0, r6
 800a88a:	f7ff ff47 	bl	800a71c <_Balloc>
 800a88e:	b940      	cbnz	r0, 800a8a2 <__s2b+0x36>
 800a890:	4602      	mov	r2, r0
 800a892:	4b19      	ldr	r3, [pc, #100]	; (800a8f8 <__s2b+0x8c>)
 800a894:	4819      	ldr	r0, [pc, #100]	; (800a8fc <__s2b+0x90>)
 800a896:	21ce      	movs	r1, #206	; 0xce
 800a898:	f000 fc88 	bl	800b1ac <__assert_func>
 800a89c:	0052      	lsls	r2, r2, #1
 800a89e:	3101      	adds	r1, #1
 800a8a0:	e7f0      	b.n	800a884 <__s2b+0x18>
 800a8a2:	9b08      	ldr	r3, [sp, #32]
 800a8a4:	6143      	str	r3, [r0, #20]
 800a8a6:	2d09      	cmp	r5, #9
 800a8a8:	f04f 0301 	mov.w	r3, #1
 800a8ac:	6103      	str	r3, [r0, #16]
 800a8ae:	dd16      	ble.n	800a8de <__s2b+0x72>
 800a8b0:	f104 0909 	add.w	r9, r4, #9
 800a8b4:	46c8      	mov	r8, r9
 800a8b6:	442c      	add	r4, r5
 800a8b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a8bc:	4601      	mov	r1, r0
 800a8be:	3b30      	subs	r3, #48	; 0x30
 800a8c0:	220a      	movs	r2, #10
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7ff ff8c 	bl	800a7e0 <__multadd>
 800a8c8:	45a0      	cmp	r8, r4
 800a8ca:	d1f5      	bne.n	800a8b8 <__s2b+0x4c>
 800a8cc:	f1a5 0408 	sub.w	r4, r5, #8
 800a8d0:	444c      	add	r4, r9
 800a8d2:	1b2d      	subs	r5, r5, r4
 800a8d4:	1963      	adds	r3, r4, r5
 800a8d6:	42bb      	cmp	r3, r7
 800a8d8:	db04      	blt.n	800a8e4 <__s2b+0x78>
 800a8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8de:	340a      	adds	r4, #10
 800a8e0:	2509      	movs	r5, #9
 800a8e2:	e7f6      	b.n	800a8d2 <__s2b+0x66>
 800a8e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	3b30      	subs	r3, #48	; 0x30
 800a8ec:	220a      	movs	r2, #10
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ff76 	bl	800a7e0 <__multadd>
 800a8f4:	e7ee      	b.n	800a8d4 <__s2b+0x68>
 800a8f6:	bf00      	nop
 800a8f8:	0800bd60 	.word	0x0800bd60
 800a8fc:	0800be03 	.word	0x0800be03

0800a900 <__hi0bits>:
 800a900:	0c03      	lsrs	r3, r0, #16
 800a902:	041b      	lsls	r3, r3, #16
 800a904:	b9d3      	cbnz	r3, 800a93c <__hi0bits+0x3c>
 800a906:	0400      	lsls	r0, r0, #16
 800a908:	2310      	movs	r3, #16
 800a90a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a90e:	bf04      	itt	eq
 800a910:	0200      	lsleq	r0, r0, #8
 800a912:	3308      	addeq	r3, #8
 800a914:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a918:	bf04      	itt	eq
 800a91a:	0100      	lsleq	r0, r0, #4
 800a91c:	3304      	addeq	r3, #4
 800a91e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a922:	bf04      	itt	eq
 800a924:	0080      	lsleq	r0, r0, #2
 800a926:	3302      	addeq	r3, #2
 800a928:	2800      	cmp	r0, #0
 800a92a:	db05      	blt.n	800a938 <__hi0bits+0x38>
 800a92c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a930:	f103 0301 	add.w	r3, r3, #1
 800a934:	bf08      	it	eq
 800a936:	2320      	moveq	r3, #32
 800a938:	4618      	mov	r0, r3
 800a93a:	4770      	bx	lr
 800a93c:	2300      	movs	r3, #0
 800a93e:	e7e4      	b.n	800a90a <__hi0bits+0xa>

0800a940 <__lo0bits>:
 800a940:	6803      	ldr	r3, [r0, #0]
 800a942:	f013 0207 	ands.w	r2, r3, #7
 800a946:	4601      	mov	r1, r0
 800a948:	d00b      	beq.n	800a962 <__lo0bits+0x22>
 800a94a:	07da      	lsls	r2, r3, #31
 800a94c:	d423      	bmi.n	800a996 <__lo0bits+0x56>
 800a94e:	0798      	lsls	r0, r3, #30
 800a950:	bf49      	itett	mi
 800a952:	085b      	lsrmi	r3, r3, #1
 800a954:	089b      	lsrpl	r3, r3, #2
 800a956:	2001      	movmi	r0, #1
 800a958:	600b      	strmi	r3, [r1, #0]
 800a95a:	bf5c      	itt	pl
 800a95c:	600b      	strpl	r3, [r1, #0]
 800a95e:	2002      	movpl	r0, #2
 800a960:	4770      	bx	lr
 800a962:	b298      	uxth	r0, r3
 800a964:	b9a8      	cbnz	r0, 800a992 <__lo0bits+0x52>
 800a966:	0c1b      	lsrs	r3, r3, #16
 800a968:	2010      	movs	r0, #16
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	b90a      	cbnz	r2, 800a972 <__lo0bits+0x32>
 800a96e:	3008      	adds	r0, #8
 800a970:	0a1b      	lsrs	r3, r3, #8
 800a972:	071a      	lsls	r2, r3, #28
 800a974:	bf04      	itt	eq
 800a976:	091b      	lsreq	r3, r3, #4
 800a978:	3004      	addeq	r0, #4
 800a97a:	079a      	lsls	r2, r3, #30
 800a97c:	bf04      	itt	eq
 800a97e:	089b      	lsreq	r3, r3, #2
 800a980:	3002      	addeq	r0, #2
 800a982:	07da      	lsls	r2, r3, #31
 800a984:	d403      	bmi.n	800a98e <__lo0bits+0x4e>
 800a986:	085b      	lsrs	r3, r3, #1
 800a988:	f100 0001 	add.w	r0, r0, #1
 800a98c:	d005      	beq.n	800a99a <__lo0bits+0x5a>
 800a98e:	600b      	str	r3, [r1, #0]
 800a990:	4770      	bx	lr
 800a992:	4610      	mov	r0, r2
 800a994:	e7e9      	b.n	800a96a <__lo0bits+0x2a>
 800a996:	2000      	movs	r0, #0
 800a998:	4770      	bx	lr
 800a99a:	2020      	movs	r0, #32
 800a99c:	4770      	bx	lr
	...

0800a9a0 <__i2b>:
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	f7ff feb9 	bl	800a71c <_Balloc>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	b928      	cbnz	r0, 800a9ba <__i2b+0x1a>
 800a9ae:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <__i2b+0x24>)
 800a9b0:	4805      	ldr	r0, [pc, #20]	; (800a9c8 <__i2b+0x28>)
 800a9b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a9b6:	f000 fbf9 	bl	800b1ac <__assert_func>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	6144      	str	r4, [r0, #20]
 800a9be:	6103      	str	r3, [r0, #16]
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	bf00      	nop
 800a9c4:	0800bd60 	.word	0x0800bd60
 800a9c8:	0800be03 	.word	0x0800be03

0800a9cc <__multiply>:
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	4691      	mov	r9, r2
 800a9d2:	690a      	ldr	r2, [r1, #16]
 800a9d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	bfb8      	it	lt
 800a9dc:	460b      	movlt	r3, r1
 800a9de:	460c      	mov	r4, r1
 800a9e0:	bfbc      	itt	lt
 800a9e2:	464c      	movlt	r4, r9
 800a9e4:	4699      	movlt	r9, r3
 800a9e6:	6927      	ldr	r7, [r4, #16]
 800a9e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a9ec:	68a3      	ldr	r3, [r4, #8]
 800a9ee:	6861      	ldr	r1, [r4, #4]
 800a9f0:	eb07 060a 	add.w	r6, r7, sl
 800a9f4:	42b3      	cmp	r3, r6
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	bfb8      	it	lt
 800a9fa:	3101      	addlt	r1, #1
 800a9fc:	f7ff fe8e 	bl	800a71c <_Balloc>
 800aa00:	b930      	cbnz	r0, 800aa10 <__multiply+0x44>
 800aa02:	4602      	mov	r2, r0
 800aa04:	4b44      	ldr	r3, [pc, #272]	; (800ab18 <__multiply+0x14c>)
 800aa06:	4845      	ldr	r0, [pc, #276]	; (800ab1c <__multiply+0x150>)
 800aa08:	f240 115d 	movw	r1, #349	; 0x15d
 800aa0c:	f000 fbce 	bl	800b1ac <__assert_func>
 800aa10:	f100 0514 	add.w	r5, r0, #20
 800aa14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa18:	462b      	mov	r3, r5
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4543      	cmp	r3, r8
 800aa1e:	d321      	bcc.n	800aa64 <__multiply+0x98>
 800aa20:	f104 0314 	add.w	r3, r4, #20
 800aa24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa28:	f109 0314 	add.w	r3, r9, #20
 800aa2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa30:	9202      	str	r2, [sp, #8]
 800aa32:	1b3a      	subs	r2, r7, r4
 800aa34:	3a15      	subs	r2, #21
 800aa36:	f022 0203 	bic.w	r2, r2, #3
 800aa3a:	3204      	adds	r2, #4
 800aa3c:	f104 0115 	add.w	r1, r4, #21
 800aa40:	428f      	cmp	r7, r1
 800aa42:	bf38      	it	cc
 800aa44:	2204      	movcc	r2, #4
 800aa46:	9201      	str	r2, [sp, #4]
 800aa48:	9a02      	ldr	r2, [sp, #8]
 800aa4a:	9303      	str	r3, [sp, #12]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d80c      	bhi.n	800aa6a <__multiply+0x9e>
 800aa50:	2e00      	cmp	r6, #0
 800aa52:	dd03      	ble.n	800aa5c <__multiply+0x90>
 800aa54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d05a      	beq.n	800ab12 <__multiply+0x146>
 800aa5c:	6106      	str	r6, [r0, #16]
 800aa5e:	b005      	add	sp, #20
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa64:	f843 2b04 	str.w	r2, [r3], #4
 800aa68:	e7d8      	b.n	800aa1c <__multiply+0x50>
 800aa6a:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa6e:	f1ba 0f00 	cmp.w	sl, #0
 800aa72:	d024      	beq.n	800aabe <__multiply+0xf2>
 800aa74:	f104 0e14 	add.w	lr, r4, #20
 800aa78:	46a9      	mov	r9, r5
 800aa7a:	f04f 0c00 	mov.w	ip, #0
 800aa7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa82:	f8d9 1000 	ldr.w	r1, [r9]
 800aa86:	fa1f fb82 	uxth.w	fp, r2
 800aa8a:	b289      	uxth	r1, r1
 800aa8c:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa94:	f8d9 2000 	ldr.w	r2, [r9]
 800aa98:	4461      	add	r1, ip
 800aa9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa9e:	fb0a c20b 	mla	r2, sl, fp, ip
 800aaa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aaa6:	b289      	uxth	r1, r1
 800aaa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aaac:	4577      	cmp	r7, lr
 800aaae:	f849 1b04 	str.w	r1, [r9], #4
 800aab2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aab6:	d8e2      	bhi.n	800aa7e <__multiply+0xb2>
 800aab8:	9a01      	ldr	r2, [sp, #4]
 800aaba:	f845 c002 	str.w	ip, [r5, r2]
 800aabe:	9a03      	ldr	r2, [sp, #12]
 800aac0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aac4:	3304      	adds	r3, #4
 800aac6:	f1b9 0f00 	cmp.w	r9, #0
 800aaca:	d020      	beq.n	800ab0e <__multiply+0x142>
 800aacc:	6829      	ldr	r1, [r5, #0]
 800aace:	f104 0c14 	add.w	ip, r4, #20
 800aad2:	46ae      	mov	lr, r5
 800aad4:	f04f 0a00 	mov.w	sl, #0
 800aad8:	f8bc b000 	ldrh.w	fp, [ip]
 800aadc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aae0:	fb09 220b 	mla	r2, r9, fp, r2
 800aae4:	4492      	add	sl, r2
 800aae6:	b289      	uxth	r1, r1
 800aae8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aaec:	f84e 1b04 	str.w	r1, [lr], #4
 800aaf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aaf4:	f8be 1000 	ldrh.w	r1, [lr]
 800aaf8:	0c12      	lsrs	r2, r2, #16
 800aafa:	fb09 1102 	mla	r1, r9, r2, r1
 800aafe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab02:	4567      	cmp	r7, ip
 800ab04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab08:	d8e6      	bhi.n	800aad8 <__multiply+0x10c>
 800ab0a:	9a01      	ldr	r2, [sp, #4]
 800ab0c:	50a9      	str	r1, [r5, r2]
 800ab0e:	3504      	adds	r5, #4
 800ab10:	e79a      	b.n	800aa48 <__multiply+0x7c>
 800ab12:	3e01      	subs	r6, #1
 800ab14:	e79c      	b.n	800aa50 <__multiply+0x84>
 800ab16:	bf00      	nop
 800ab18:	0800bd60 	.word	0x0800bd60
 800ab1c:	0800be03 	.word	0x0800be03

0800ab20 <__pow5mult>:
 800ab20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab24:	4615      	mov	r5, r2
 800ab26:	f012 0203 	ands.w	r2, r2, #3
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	460f      	mov	r7, r1
 800ab2e:	d007      	beq.n	800ab40 <__pow5mult+0x20>
 800ab30:	4c25      	ldr	r4, [pc, #148]	; (800abc8 <__pow5mult+0xa8>)
 800ab32:	3a01      	subs	r2, #1
 800ab34:	2300      	movs	r3, #0
 800ab36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab3a:	f7ff fe51 	bl	800a7e0 <__multadd>
 800ab3e:	4607      	mov	r7, r0
 800ab40:	10ad      	asrs	r5, r5, #2
 800ab42:	d03d      	beq.n	800abc0 <__pow5mult+0xa0>
 800ab44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab46:	b97c      	cbnz	r4, 800ab68 <__pow5mult+0x48>
 800ab48:	2010      	movs	r0, #16
 800ab4a:	f000 fb5f 	bl	800b20c <malloc>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	6270      	str	r0, [r6, #36]	; 0x24
 800ab52:	b928      	cbnz	r0, 800ab60 <__pow5mult+0x40>
 800ab54:	4b1d      	ldr	r3, [pc, #116]	; (800abcc <__pow5mult+0xac>)
 800ab56:	481e      	ldr	r0, [pc, #120]	; (800abd0 <__pow5mult+0xb0>)
 800ab58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab5c:	f000 fb26 	bl	800b1ac <__assert_func>
 800ab60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab64:	6004      	str	r4, [r0, #0]
 800ab66:	60c4      	str	r4, [r0, #12]
 800ab68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab70:	b94c      	cbnz	r4, 800ab86 <__pow5mult+0x66>
 800ab72:	f240 2171 	movw	r1, #625	; 0x271
 800ab76:	4630      	mov	r0, r6
 800ab78:	f7ff ff12 	bl	800a9a0 <__i2b>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab82:	4604      	mov	r4, r0
 800ab84:	6003      	str	r3, [r0, #0]
 800ab86:	f04f 0900 	mov.w	r9, #0
 800ab8a:	07eb      	lsls	r3, r5, #31
 800ab8c:	d50a      	bpl.n	800aba4 <__pow5mult+0x84>
 800ab8e:	4639      	mov	r1, r7
 800ab90:	4622      	mov	r2, r4
 800ab92:	4630      	mov	r0, r6
 800ab94:	f7ff ff1a 	bl	800a9cc <__multiply>
 800ab98:	4639      	mov	r1, r7
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7ff fdfd 	bl	800a79c <_Bfree>
 800aba2:	4647      	mov	r7, r8
 800aba4:	106d      	asrs	r5, r5, #1
 800aba6:	d00b      	beq.n	800abc0 <__pow5mult+0xa0>
 800aba8:	6820      	ldr	r0, [r4, #0]
 800abaa:	b938      	cbnz	r0, 800abbc <__pow5mult+0x9c>
 800abac:	4622      	mov	r2, r4
 800abae:	4621      	mov	r1, r4
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7ff ff0b 	bl	800a9cc <__multiply>
 800abb6:	6020      	str	r0, [r4, #0]
 800abb8:	f8c0 9000 	str.w	r9, [r0]
 800abbc:	4604      	mov	r4, r0
 800abbe:	e7e4      	b.n	800ab8a <__pow5mult+0x6a>
 800abc0:	4638      	mov	r0, r7
 800abc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc6:	bf00      	nop
 800abc8:	0800bf50 	.word	0x0800bf50
 800abcc:	0800bdec 	.word	0x0800bdec
 800abd0:	0800be03 	.word	0x0800be03

0800abd4 <__lshift>:
 800abd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd8:	460c      	mov	r4, r1
 800abda:	6849      	ldr	r1, [r1, #4]
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abe2:	68a3      	ldr	r3, [r4, #8]
 800abe4:	4607      	mov	r7, r0
 800abe6:	4691      	mov	r9, r2
 800abe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abec:	f108 0601 	add.w	r6, r8, #1
 800abf0:	42b3      	cmp	r3, r6
 800abf2:	db0b      	blt.n	800ac0c <__lshift+0x38>
 800abf4:	4638      	mov	r0, r7
 800abf6:	f7ff fd91 	bl	800a71c <_Balloc>
 800abfa:	4605      	mov	r5, r0
 800abfc:	b948      	cbnz	r0, 800ac12 <__lshift+0x3e>
 800abfe:	4602      	mov	r2, r0
 800ac00:	4b2a      	ldr	r3, [pc, #168]	; (800acac <__lshift+0xd8>)
 800ac02:	482b      	ldr	r0, [pc, #172]	; (800acb0 <__lshift+0xdc>)
 800ac04:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac08:	f000 fad0 	bl	800b1ac <__assert_func>
 800ac0c:	3101      	adds	r1, #1
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	e7ee      	b.n	800abf0 <__lshift+0x1c>
 800ac12:	2300      	movs	r3, #0
 800ac14:	f100 0114 	add.w	r1, r0, #20
 800ac18:	f100 0210 	add.w	r2, r0, #16
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	4553      	cmp	r3, sl
 800ac20:	db37      	blt.n	800ac92 <__lshift+0xbe>
 800ac22:	6920      	ldr	r0, [r4, #16]
 800ac24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac28:	f104 0314 	add.w	r3, r4, #20
 800ac2c:	f019 091f 	ands.w	r9, r9, #31
 800ac30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac38:	d02f      	beq.n	800ac9a <__lshift+0xc6>
 800ac3a:	f1c9 0e20 	rsb	lr, r9, #32
 800ac3e:	468a      	mov	sl, r1
 800ac40:	f04f 0c00 	mov.w	ip, #0
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	fa02 f209 	lsl.w	r2, r2, r9
 800ac4a:	ea42 020c 	orr.w	r2, r2, ip
 800ac4e:	f84a 2b04 	str.w	r2, [sl], #4
 800ac52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac56:	4298      	cmp	r0, r3
 800ac58:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ac5c:	d8f2      	bhi.n	800ac44 <__lshift+0x70>
 800ac5e:	1b03      	subs	r3, r0, r4
 800ac60:	3b15      	subs	r3, #21
 800ac62:	f023 0303 	bic.w	r3, r3, #3
 800ac66:	3304      	adds	r3, #4
 800ac68:	f104 0215 	add.w	r2, r4, #21
 800ac6c:	4290      	cmp	r0, r2
 800ac6e:	bf38      	it	cc
 800ac70:	2304      	movcc	r3, #4
 800ac72:	f841 c003 	str.w	ip, [r1, r3]
 800ac76:	f1bc 0f00 	cmp.w	ip, #0
 800ac7a:	d001      	beq.n	800ac80 <__lshift+0xac>
 800ac7c:	f108 0602 	add.w	r6, r8, #2
 800ac80:	3e01      	subs	r6, #1
 800ac82:	4638      	mov	r0, r7
 800ac84:	612e      	str	r6, [r5, #16]
 800ac86:	4621      	mov	r1, r4
 800ac88:	f7ff fd88 	bl	800a79c <_Bfree>
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac92:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac96:	3301      	adds	r3, #1
 800ac98:	e7c1      	b.n	800ac1e <__lshift+0x4a>
 800ac9a:	3904      	subs	r1, #4
 800ac9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aca4:	4298      	cmp	r0, r3
 800aca6:	d8f9      	bhi.n	800ac9c <__lshift+0xc8>
 800aca8:	e7ea      	b.n	800ac80 <__lshift+0xac>
 800acaa:	bf00      	nop
 800acac:	0800bd60 	.word	0x0800bd60
 800acb0:	0800be03 	.word	0x0800be03

0800acb4 <__mcmp>:
 800acb4:	b530      	push	{r4, r5, lr}
 800acb6:	6902      	ldr	r2, [r0, #16]
 800acb8:	690c      	ldr	r4, [r1, #16]
 800acba:	1b12      	subs	r2, r2, r4
 800acbc:	d10e      	bne.n	800acdc <__mcmp+0x28>
 800acbe:	f100 0314 	add.w	r3, r0, #20
 800acc2:	3114      	adds	r1, #20
 800acc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800acc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800accc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acd4:	42a5      	cmp	r5, r4
 800acd6:	d003      	beq.n	800ace0 <__mcmp+0x2c>
 800acd8:	d305      	bcc.n	800ace6 <__mcmp+0x32>
 800acda:	2201      	movs	r2, #1
 800acdc:	4610      	mov	r0, r2
 800acde:	bd30      	pop	{r4, r5, pc}
 800ace0:	4283      	cmp	r3, r0
 800ace2:	d3f3      	bcc.n	800accc <__mcmp+0x18>
 800ace4:	e7fa      	b.n	800acdc <__mcmp+0x28>
 800ace6:	f04f 32ff 	mov.w	r2, #4294967295
 800acea:	e7f7      	b.n	800acdc <__mcmp+0x28>

0800acec <__mdiff>:
 800acec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	460c      	mov	r4, r1
 800acf2:	4606      	mov	r6, r0
 800acf4:	4611      	mov	r1, r2
 800acf6:	4620      	mov	r0, r4
 800acf8:	4690      	mov	r8, r2
 800acfa:	f7ff ffdb 	bl	800acb4 <__mcmp>
 800acfe:	1e05      	subs	r5, r0, #0
 800ad00:	d110      	bne.n	800ad24 <__mdiff+0x38>
 800ad02:	4629      	mov	r1, r5
 800ad04:	4630      	mov	r0, r6
 800ad06:	f7ff fd09 	bl	800a71c <_Balloc>
 800ad0a:	b930      	cbnz	r0, 800ad1a <__mdiff+0x2e>
 800ad0c:	4b3a      	ldr	r3, [pc, #232]	; (800adf8 <__mdiff+0x10c>)
 800ad0e:	4602      	mov	r2, r0
 800ad10:	f240 2132 	movw	r1, #562	; 0x232
 800ad14:	4839      	ldr	r0, [pc, #228]	; (800adfc <__mdiff+0x110>)
 800ad16:	f000 fa49 	bl	800b1ac <__assert_func>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	bfa4      	itt	ge
 800ad26:	4643      	movge	r3, r8
 800ad28:	46a0      	movge	r8, r4
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad30:	bfa6      	itte	ge
 800ad32:	461c      	movge	r4, r3
 800ad34:	2500      	movge	r5, #0
 800ad36:	2501      	movlt	r5, #1
 800ad38:	f7ff fcf0 	bl	800a71c <_Balloc>
 800ad3c:	b920      	cbnz	r0, 800ad48 <__mdiff+0x5c>
 800ad3e:	4b2e      	ldr	r3, [pc, #184]	; (800adf8 <__mdiff+0x10c>)
 800ad40:	4602      	mov	r2, r0
 800ad42:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad46:	e7e5      	b.n	800ad14 <__mdiff+0x28>
 800ad48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad4c:	6926      	ldr	r6, [r4, #16]
 800ad4e:	60c5      	str	r5, [r0, #12]
 800ad50:	f104 0914 	add.w	r9, r4, #20
 800ad54:	f108 0514 	add.w	r5, r8, #20
 800ad58:	f100 0e14 	add.w	lr, r0, #20
 800ad5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad64:	f108 0210 	add.w	r2, r8, #16
 800ad68:	46f2      	mov	sl, lr
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad74:	fa1f f883 	uxth.w	r8, r3
 800ad78:	fa11 f18b 	uxtah	r1, r1, fp
 800ad7c:	0c1b      	lsrs	r3, r3, #16
 800ad7e:	eba1 0808 	sub.w	r8, r1, r8
 800ad82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad8a:	fa1f f888 	uxth.w	r8, r8
 800ad8e:	1419      	asrs	r1, r3, #16
 800ad90:	454e      	cmp	r6, r9
 800ad92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad96:	f84a 3b04 	str.w	r3, [sl], #4
 800ad9a:	d8e7      	bhi.n	800ad6c <__mdiff+0x80>
 800ad9c:	1b33      	subs	r3, r6, r4
 800ad9e:	3b15      	subs	r3, #21
 800ada0:	f023 0303 	bic.w	r3, r3, #3
 800ada4:	3304      	adds	r3, #4
 800ada6:	3415      	adds	r4, #21
 800ada8:	42a6      	cmp	r6, r4
 800adaa:	bf38      	it	cc
 800adac:	2304      	movcc	r3, #4
 800adae:	441d      	add	r5, r3
 800adb0:	4473      	add	r3, lr
 800adb2:	469e      	mov	lr, r3
 800adb4:	462e      	mov	r6, r5
 800adb6:	4566      	cmp	r6, ip
 800adb8:	d30e      	bcc.n	800add8 <__mdiff+0xec>
 800adba:	f10c 0203 	add.w	r2, ip, #3
 800adbe:	1b52      	subs	r2, r2, r5
 800adc0:	f022 0203 	bic.w	r2, r2, #3
 800adc4:	3d03      	subs	r5, #3
 800adc6:	45ac      	cmp	ip, r5
 800adc8:	bf38      	it	cc
 800adca:	2200      	movcc	r2, #0
 800adcc:	441a      	add	r2, r3
 800adce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800add2:	b17b      	cbz	r3, 800adf4 <__mdiff+0x108>
 800add4:	6107      	str	r7, [r0, #16]
 800add6:	e7a3      	b.n	800ad20 <__mdiff+0x34>
 800add8:	f856 8b04 	ldr.w	r8, [r6], #4
 800addc:	fa11 f288 	uxtah	r2, r1, r8
 800ade0:	1414      	asrs	r4, r2, #16
 800ade2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ade6:	b292      	uxth	r2, r2
 800ade8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800adec:	f84e 2b04 	str.w	r2, [lr], #4
 800adf0:	1421      	asrs	r1, r4, #16
 800adf2:	e7e0      	b.n	800adb6 <__mdiff+0xca>
 800adf4:	3f01      	subs	r7, #1
 800adf6:	e7ea      	b.n	800adce <__mdiff+0xe2>
 800adf8:	0800bd60 	.word	0x0800bd60
 800adfc:	0800be03 	.word	0x0800be03

0800ae00 <__ulp>:
 800ae00:	b082      	sub	sp, #8
 800ae02:	ed8d 0b00 	vstr	d0, [sp]
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	4912      	ldr	r1, [pc, #72]	; (800ae54 <__ulp+0x54>)
 800ae0a:	4019      	ands	r1, r3
 800ae0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ae10:	2900      	cmp	r1, #0
 800ae12:	dd05      	ble.n	800ae20 <__ulp+0x20>
 800ae14:	2200      	movs	r2, #0
 800ae16:	460b      	mov	r3, r1
 800ae18:	ec43 2b10 	vmov	d0, r2, r3
 800ae1c:	b002      	add	sp, #8
 800ae1e:	4770      	bx	lr
 800ae20:	4249      	negs	r1, r1
 800ae22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ae26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ae2a:	f04f 0200 	mov.w	r2, #0
 800ae2e:	f04f 0300 	mov.w	r3, #0
 800ae32:	da04      	bge.n	800ae3e <__ulp+0x3e>
 800ae34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ae38:	fa41 f300 	asr.w	r3, r1, r0
 800ae3c:	e7ec      	b.n	800ae18 <__ulp+0x18>
 800ae3e:	f1a0 0114 	sub.w	r1, r0, #20
 800ae42:	291e      	cmp	r1, #30
 800ae44:	bfda      	itte	le
 800ae46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ae4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ae4e:	2101      	movgt	r1, #1
 800ae50:	460a      	mov	r2, r1
 800ae52:	e7e1      	b.n	800ae18 <__ulp+0x18>
 800ae54:	7ff00000 	.word	0x7ff00000

0800ae58 <__b2d>:
 800ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5a:	6905      	ldr	r5, [r0, #16]
 800ae5c:	f100 0714 	add.w	r7, r0, #20
 800ae60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ae64:	1f2e      	subs	r6, r5, #4
 800ae66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f7ff fd48 	bl	800a900 <__hi0bits>
 800ae70:	f1c0 0320 	rsb	r3, r0, #32
 800ae74:	280a      	cmp	r0, #10
 800ae76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aef4 <__b2d+0x9c>
 800ae7a:	600b      	str	r3, [r1, #0]
 800ae7c:	dc14      	bgt.n	800aea8 <__b2d+0x50>
 800ae7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ae82:	fa24 f10e 	lsr.w	r1, r4, lr
 800ae86:	42b7      	cmp	r7, r6
 800ae88:	ea41 030c 	orr.w	r3, r1, ip
 800ae8c:	bf34      	ite	cc
 800ae8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae92:	2100      	movcs	r1, #0
 800ae94:	3015      	adds	r0, #21
 800ae96:	fa04 f000 	lsl.w	r0, r4, r0
 800ae9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ae9e:	ea40 0201 	orr.w	r2, r0, r1
 800aea2:	ec43 2b10 	vmov	d0, r2, r3
 800aea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea8:	42b7      	cmp	r7, r6
 800aeaa:	bf3a      	itte	cc
 800aeac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aeb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800aeb4:	2100      	movcs	r1, #0
 800aeb6:	380b      	subs	r0, #11
 800aeb8:	d017      	beq.n	800aeea <__b2d+0x92>
 800aeba:	f1c0 0c20 	rsb	ip, r0, #32
 800aebe:	fa04 f500 	lsl.w	r5, r4, r0
 800aec2:	42be      	cmp	r6, r7
 800aec4:	fa21 f40c 	lsr.w	r4, r1, ip
 800aec8:	ea45 0504 	orr.w	r5, r5, r4
 800aecc:	bf8c      	ite	hi
 800aece:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aed2:	2400      	movls	r4, #0
 800aed4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aed8:	fa01 f000 	lsl.w	r0, r1, r0
 800aedc:	fa24 f40c 	lsr.w	r4, r4, ip
 800aee0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aee4:	ea40 0204 	orr.w	r2, r0, r4
 800aee8:	e7db      	b.n	800aea2 <__b2d+0x4a>
 800aeea:	ea44 030c 	orr.w	r3, r4, ip
 800aeee:	460a      	mov	r2, r1
 800aef0:	e7d7      	b.n	800aea2 <__b2d+0x4a>
 800aef2:	bf00      	nop
 800aef4:	3ff00000 	.word	0x3ff00000

0800aef8 <__d2b>:
 800aef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aefc:	4689      	mov	r9, r1
 800aefe:	2101      	movs	r1, #1
 800af00:	ec57 6b10 	vmov	r6, r7, d0
 800af04:	4690      	mov	r8, r2
 800af06:	f7ff fc09 	bl	800a71c <_Balloc>
 800af0a:	4604      	mov	r4, r0
 800af0c:	b930      	cbnz	r0, 800af1c <__d2b+0x24>
 800af0e:	4602      	mov	r2, r0
 800af10:	4b25      	ldr	r3, [pc, #148]	; (800afa8 <__d2b+0xb0>)
 800af12:	4826      	ldr	r0, [pc, #152]	; (800afac <__d2b+0xb4>)
 800af14:	f240 310a 	movw	r1, #778	; 0x30a
 800af18:	f000 f948 	bl	800b1ac <__assert_func>
 800af1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800af20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af24:	bb35      	cbnz	r5, 800af74 <__d2b+0x7c>
 800af26:	2e00      	cmp	r6, #0
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	d028      	beq.n	800af7e <__d2b+0x86>
 800af2c:	4668      	mov	r0, sp
 800af2e:	9600      	str	r6, [sp, #0]
 800af30:	f7ff fd06 	bl	800a940 <__lo0bits>
 800af34:	9900      	ldr	r1, [sp, #0]
 800af36:	b300      	cbz	r0, 800af7a <__d2b+0x82>
 800af38:	9a01      	ldr	r2, [sp, #4]
 800af3a:	f1c0 0320 	rsb	r3, r0, #32
 800af3e:	fa02 f303 	lsl.w	r3, r2, r3
 800af42:	430b      	orrs	r3, r1
 800af44:	40c2      	lsrs	r2, r0
 800af46:	6163      	str	r3, [r4, #20]
 800af48:	9201      	str	r2, [sp, #4]
 800af4a:	9b01      	ldr	r3, [sp, #4]
 800af4c:	61a3      	str	r3, [r4, #24]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	bf14      	ite	ne
 800af52:	2202      	movne	r2, #2
 800af54:	2201      	moveq	r2, #1
 800af56:	6122      	str	r2, [r4, #16]
 800af58:	b1d5      	cbz	r5, 800af90 <__d2b+0x98>
 800af5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af5e:	4405      	add	r5, r0
 800af60:	f8c9 5000 	str.w	r5, [r9]
 800af64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af68:	f8c8 0000 	str.w	r0, [r8]
 800af6c:	4620      	mov	r0, r4
 800af6e:	b003      	add	sp, #12
 800af70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af78:	e7d5      	b.n	800af26 <__d2b+0x2e>
 800af7a:	6161      	str	r1, [r4, #20]
 800af7c:	e7e5      	b.n	800af4a <__d2b+0x52>
 800af7e:	a801      	add	r0, sp, #4
 800af80:	f7ff fcde 	bl	800a940 <__lo0bits>
 800af84:	9b01      	ldr	r3, [sp, #4]
 800af86:	6163      	str	r3, [r4, #20]
 800af88:	2201      	movs	r2, #1
 800af8a:	6122      	str	r2, [r4, #16]
 800af8c:	3020      	adds	r0, #32
 800af8e:	e7e3      	b.n	800af58 <__d2b+0x60>
 800af90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af98:	f8c9 0000 	str.w	r0, [r9]
 800af9c:	6918      	ldr	r0, [r3, #16]
 800af9e:	f7ff fcaf 	bl	800a900 <__hi0bits>
 800afa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800afa6:	e7df      	b.n	800af68 <__d2b+0x70>
 800afa8:	0800bd60 	.word	0x0800bd60
 800afac:	0800be03 	.word	0x0800be03

0800afb0 <__ratio>:
 800afb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	4688      	mov	r8, r1
 800afb6:	4669      	mov	r1, sp
 800afb8:	4681      	mov	r9, r0
 800afba:	f7ff ff4d 	bl	800ae58 <__b2d>
 800afbe:	a901      	add	r1, sp, #4
 800afc0:	4640      	mov	r0, r8
 800afc2:	ec55 4b10 	vmov	r4, r5, d0
 800afc6:	ee10 aa10 	vmov	sl, s0
 800afca:	f7ff ff45 	bl	800ae58 <__b2d>
 800afce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afd2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800afd6:	1a59      	subs	r1, r3, r1
 800afd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800afe2:	ec57 6b10 	vmov	r6, r7, d0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	bfd6      	itet	le
 800afea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800afee:	462a      	movgt	r2, r5
 800aff0:	463a      	movle	r2, r7
 800aff2:	46ab      	mov	fp, r5
 800aff4:	bfd6      	itet	le
 800aff6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800affa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800affe:	ee00 3a90 	vmovle	s1, r3
 800b002:	ec4b ab17 	vmov	d7, sl, fp
 800b006:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b00a:	b003      	add	sp, #12
 800b00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b010 <__copybits>:
 800b010:	3901      	subs	r1, #1
 800b012:	b570      	push	{r4, r5, r6, lr}
 800b014:	1149      	asrs	r1, r1, #5
 800b016:	6914      	ldr	r4, [r2, #16]
 800b018:	3101      	adds	r1, #1
 800b01a:	f102 0314 	add.w	r3, r2, #20
 800b01e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b022:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b026:	1f05      	subs	r5, r0, #4
 800b028:	42a3      	cmp	r3, r4
 800b02a:	d30c      	bcc.n	800b046 <__copybits+0x36>
 800b02c:	1aa3      	subs	r3, r4, r2
 800b02e:	3b11      	subs	r3, #17
 800b030:	f023 0303 	bic.w	r3, r3, #3
 800b034:	3211      	adds	r2, #17
 800b036:	42a2      	cmp	r2, r4
 800b038:	bf88      	it	hi
 800b03a:	2300      	movhi	r3, #0
 800b03c:	4418      	add	r0, r3
 800b03e:	2300      	movs	r3, #0
 800b040:	4288      	cmp	r0, r1
 800b042:	d305      	bcc.n	800b050 <__copybits+0x40>
 800b044:	bd70      	pop	{r4, r5, r6, pc}
 800b046:	f853 6b04 	ldr.w	r6, [r3], #4
 800b04a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b04e:	e7eb      	b.n	800b028 <__copybits+0x18>
 800b050:	f840 3b04 	str.w	r3, [r0], #4
 800b054:	e7f4      	b.n	800b040 <__copybits+0x30>

0800b056 <__any_on>:
 800b056:	f100 0214 	add.w	r2, r0, #20
 800b05a:	6900      	ldr	r0, [r0, #16]
 800b05c:	114b      	asrs	r3, r1, #5
 800b05e:	4298      	cmp	r0, r3
 800b060:	b510      	push	{r4, lr}
 800b062:	db11      	blt.n	800b088 <__any_on+0x32>
 800b064:	dd0a      	ble.n	800b07c <__any_on+0x26>
 800b066:	f011 011f 	ands.w	r1, r1, #31
 800b06a:	d007      	beq.n	800b07c <__any_on+0x26>
 800b06c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b070:	fa24 f001 	lsr.w	r0, r4, r1
 800b074:	fa00 f101 	lsl.w	r1, r0, r1
 800b078:	428c      	cmp	r4, r1
 800b07a:	d10b      	bne.n	800b094 <__any_on+0x3e>
 800b07c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b080:	4293      	cmp	r3, r2
 800b082:	d803      	bhi.n	800b08c <__any_on+0x36>
 800b084:	2000      	movs	r0, #0
 800b086:	bd10      	pop	{r4, pc}
 800b088:	4603      	mov	r3, r0
 800b08a:	e7f7      	b.n	800b07c <__any_on+0x26>
 800b08c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b090:	2900      	cmp	r1, #0
 800b092:	d0f5      	beq.n	800b080 <__any_on+0x2a>
 800b094:	2001      	movs	r0, #1
 800b096:	e7f6      	b.n	800b086 <__any_on+0x30>

0800b098 <_calloc_r>:
 800b098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b09a:	fba1 2402 	umull	r2, r4, r1, r2
 800b09e:	b94c      	cbnz	r4, 800b0b4 <_calloc_r+0x1c>
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	9201      	str	r2, [sp, #4]
 800b0a4:	f7fd ff94 	bl	8008fd0 <_malloc_r>
 800b0a8:	9a01      	ldr	r2, [sp, #4]
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	b930      	cbnz	r0, 800b0bc <_calloc_r+0x24>
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	b003      	add	sp, #12
 800b0b2:	bd30      	pop	{r4, r5, pc}
 800b0b4:	220c      	movs	r2, #12
 800b0b6:	6002      	str	r2, [r0, #0]
 800b0b8:	2500      	movs	r5, #0
 800b0ba:	e7f8      	b.n	800b0ae <_calloc_r+0x16>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	f7fd ff5e 	bl	8008f7e <memset>
 800b0c2:	e7f4      	b.n	800b0ae <_calloc_r+0x16>

0800b0c4 <_free_r>:
 800b0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0c6:	2900      	cmp	r1, #0
 800b0c8:	d044      	beq.n	800b154 <_free_r+0x90>
 800b0ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ce:	9001      	str	r0, [sp, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b0d6:	bfb8      	it	lt
 800b0d8:	18e4      	addlt	r4, r4, r3
 800b0da:	f7ff fb13 	bl	800a704 <__malloc_lock>
 800b0de:	4a1e      	ldr	r2, [pc, #120]	; (800b158 <_free_r+0x94>)
 800b0e0:	9801      	ldr	r0, [sp, #4]
 800b0e2:	6813      	ldr	r3, [r2, #0]
 800b0e4:	b933      	cbnz	r3, 800b0f4 <_free_r+0x30>
 800b0e6:	6063      	str	r3, [r4, #4]
 800b0e8:	6014      	str	r4, [r2, #0]
 800b0ea:	b003      	add	sp, #12
 800b0ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0f0:	f7ff bb0e 	b.w	800a710 <__malloc_unlock>
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	d908      	bls.n	800b10a <_free_r+0x46>
 800b0f8:	6825      	ldr	r5, [r4, #0]
 800b0fa:	1961      	adds	r1, r4, r5
 800b0fc:	428b      	cmp	r3, r1
 800b0fe:	bf01      	itttt	eq
 800b100:	6819      	ldreq	r1, [r3, #0]
 800b102:	685b      	ldreq	r3, [r3, #4]
 800b104:	1949      	addeq	r1, r1, r5
 800b106:	6021      	streq	r1, [r4, #0]
 800b108:	e7ed      	b.n	800b0e6 <_free_r+0x22>
 800b10a:	461a      	mov	r2, r3
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	b10b      	cbz	r3, 800b114 <_free_r+0x50>
 800b110:	42a3      	cmp	r3, r4
 800b112:	d9fa      	bls.n	800b10a <_free_r+0x46>
 800b114:	6811      	ldr	r1, [r2, #0]
 800b116:	1855      	adds	r5, r2, r1
 800b118:	42a5      	cmp	r5, r4
 800b11a:	d10b      	bne.n	800b134 <_free_r+0x70>
 800b11c:	6824      	ldr	r4, [r4, #0]
 800b11e:	4421      	add	r1, r4
 800b120:	1854      	adds	r4, r2, r1
 800b122:	42a3      	cmp	r3, r4
 800b124:	6011      	str	r1, [r2, #0]
 800b126:	d1e0      	bne.n	800b0ea <_free_r+0x26>
 800b128:	681c      	ldr	r4, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	6053      	str	r3, [r2, #4]
 800b12e:	4421      	add	r1, r4
 800b130:	6011      	str	r1, [r2, #0]
 800b132:	e7da      	b.n	800b0ea <_free_r+0x26>
 800b134:	d902      	bls.n	800b13c <_free_r+0x78>
 800b136:	230c      	movs	r3, #12
 800b138:	6003      	str	r3, [r0, #0]
 800b13a:	e7d6      	b.n	800b0ea <_free_r+0x26>
 800b13c:	6825      	ldr	r5, [r4, #0]
 800b13e:	1961      	adds	r1, r4, r5
 800b140:	428b      	cmp	r3, r1
 800b142:	bf04      	itt	eq
 800b144:	6819      	ldreq	r1, [r3, #0]
 800b146:	685b      	ldreq	r3, [r3, #4]
 800b148:	6063      	str	r3, [r4, #4]
 800b14a:	bf04      	itt	eq
 800b14c:	1949      	addeq	r1, r1, r5
 800b14e:	6021      	streq	r1, [r4, #0]
 800b150:	6054      	str	r4, [r2, #4]
 800b152:	e7ca      	b.n	800b0ea <_free_r+0x26>
 800b154:	b003      	add	sp, #12
 800b156:	bd30      	pop	{r4, r5, pc}
 800b158:	200055b8 	.word	0x200055b8

0800b15c <_read_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d07      	ldr	r5, [pc, #28]	; (800b17c <_read_r+0x20>)
 800b160:	4604      	mov	r4, r0
 800b162:	4608      	mov	r0, r1
 800b164:	4611      	mov	r1, r2
 800b166:	2200      	movs	r2, #0
 800b168:	602a      	str	r2, [r5, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	f7f6 fd36 	bl	8001bdc <_read>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d102      	bne.n	800b17a <_read_r+0x1e>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	b103      	cbz	r3, 800b17a <_read_r+0x1e>
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	200055c0 	.word	0x200055c0

0800b180 <nan>:
 800b180:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b188 <nan+0x8>
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	00000000 	.word	0x00000000
 800b18c:	7ff80000 	.word	0x7ff80000

0800b190 <__ascii_wctomb>:
 800b190:	b149      	cbz	r1, 800b1a6 <__ascii_wctomb+0x16>
 800b192:	2aff      	cmp	r2, #255	; 0xff
 800b194:	bf85      	ittet	hi
 800b196:	238a      	movhi	r3, #138	; 0x8a
 800b198:	6003      	strhi	r3, [r0, #0]
 800b19a:	700a      	strbls	r2, [r1, #0]
 800b19c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1a0:	bf98      	it	ls
 800b1a2:	2001      	movls	r0, #1
 800b1a4:	4770      	bx	lr
 800b1a6:	4608      	mov	r0, r1
 800b1a8:	4770      	bx	lr
	...

0800b1ac <__assert_func>:
 800b1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1ae:	4614      	mov	r4, r2
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <__assert_func+0x2c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4605      	mov	r5, r0
 800b1b8:	68d8      	ldr	r0, [r3, #12]
 800b1ba:	b14c      	cbz	r4, 800b1d0 <__assert_func+0x24>
 800b1bc:	4b07      	ldr	r3, [pc, #28]	; (800b1dc <__assert_func+0x30>)
 800b1be:	9100      	str	r1, [sp, #0]
 800b1c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1c4:	4906      	ldr	r1, [pc, #24]	; (800b1e0 <__assert_func+0x34>)
 800b1c6:	462b      	mov	r3, r5
 800b1c8:	f000 f80e 	bl	800b1e8 <fiprintf>
 800b1cc:	f000 fbd4 	bl	800b978 <abort>
 800b1d0:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <__assert_func+0x38>)
 800b1d2:	461c      	mov	r4, r3
 800b1d4:	e7f3      	b.n	800b1be <__assert_func+0x12>
 800b1d6:	bf00      	nop
 800b1d8:	20000010 	.word	0x20000010
 800b1dc:	0800bf5c 	.word	0x0800bf5c
 800b1e0:	0800bf69 	.word	0x0800bf69
 800b1e4:	0800bf97 	.word	0x0800bf97

0800b1e8 <fiprintf>:
 800b1e8:	b40e      	push	{r1, r2, r3}
 800b1ea:	b503      	push	{r0, r1, lr}
 800b1ec:	4601      	mov	r1, r0
 800b1ee:	ab03      	add	r3, sp, #12
 800b1f0:	4805      	ldr	r0, [pc, #20]	; (800b208 <fiprintf+0x20>)
 800b1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1f6:	6800      	ldr	r0, [r0, #0]
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	f000 f839 	bl	800b270 <_vfiprintf_r>
 800b1fe:	b002      	add	sp, #8
 800b200:	f85d eb04 	ldr.w	lr, [sp], #4
 800b204:	b003      	add	sp, #12
 800b206:	4770      	bx	lr
 800b208:	20000010 	.word	0x20000010

0800b20c <malloc>:
 800b20c:	4b02      	ldr	r3, [pc, #8]	; (800b218 <malloc+0xc>)
 800b20e:	4601      	mov	r1, r0
 800b210:	6818      	ldr	r0, [r3, #0]
 800b212:	f7fd bedd 	b.w	8008fd0 <_malloc_r>
 800b216:	bf00      	nop
 800b218:	20000010 	.word	0x20000010

0800b21c <__sfputc_r>:
 800b21c:	6893      	ldr	r3, [r2, #8]
 800b21e:	3b01      	subs	r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	b410      	push	{r4}
 800b224:	6093      	str	r3, [r2, #8]
 800b226:	da08      	bge.n	800b23a <__sfputc_r+0x1e>
 800b228:	6994      	ldr	r4, [r2, #24]
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	db01      	blt.n	800b232 <__sfputc_r+0x16>
 800b22e:	290a      	cmp	r1, #10
 800b230:	d103      	bne.n	800b23a <__sfputc_r+0x1e>
 800b232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b236:	f000 badf 	b.w	800b7f8 <__swbuf_r>
 800b23a:	6813      	ldr	r3, [r2, #0]
 800b23c:	1c58      	adds	r0, r3, #1
 800b23e:	6010      	str	r0, [r2, #0]
 800b240:	7019      	strb	r1, [r3, #0]
 800b242:	4608      	mov	r0, r1
 800b244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <__sfputs_r>:
 800b24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24c:	4606      	mov	r6, r0
 800b24e:	460f      	mov	r7, r1
 800b250:	4614      	mov	r4, r2
 800b252:	18d5      	adds	r5, r2, r3
 800b254:	42ac      	cmp	r4, r5
 800b256:	d101      	bne.n	800b25c <__sfputs_r+0x12>
 800b258:	2000      	movs	r0, #0
 800b25a:	e007      	b.n	800b26c <__sfputs_r+0x22>
 800b25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b260:	463a      	mov	r2, r7
 800b262:	4630      	mov	r0, r6
 800b264:	f7ff ffda 	bl	800b21c <__sfputc_r>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d1f3      	bne.n	800b254 <__sfputs_r+0xa>
 800b26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b270 <_vfiprintf_r>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	460d      	mov	r5, r1
 800b276:	b09d      	sub	sp, #116	; 0x74
 800b278:	4614      	mov	r4, r2
 800b27a:	4698      	mov	r8, r3
 800b27c:	4606      	mov	r6, r0
 800b27e:	b118      	cbz	r0, 800b288 <_vfiprintf_r+0x18>
 800b280:	6983      	ldr	r3, [r0, #24]
 800b282:	b90b      	cbnz	r3, 800b288 <_vfiprintf_r+0x18>
 800b284:	f7fd fda8 	bl	8008dd8 <__sinit>
 800b288:	4b89      	ldr	r3, [pc, #548]	; (800b4b0 <_vfiprintf_r+0x240>)
 800b28a:	429d      	cmp	r5, r3
 800b28c:	d11b      	bne.n	800b2c6 <_vfiprintf_r+0x56>
 800b28e:	6875      	ldr	r5, [r6, #4]
 800b290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b292:	07d9      	lsls	r1, r3, #31
 800b294:	d405      	bmi.n	800b2a2 <_vfiprintf_r+0x32>
 800b296:	89ab      	ldrh	r3, [r5, #12]
 800b298:	059a      	lsls	r2, r3, #22
 800b29a:	d402      	bmi.n	800b2a2 <_vfiprintf_r+0x32>
 800b29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b29e:	f7fd fe5e 	bl	8008f5e <__retarget_lock_acquire_recursive>
 800b2a2:	89ab      	ldrh	r3, [r5, #12]
 800b2a4:	071b      	lsls	r3, r3, #28
 800b2a6:	d501      	bpl.n	800b2ac <_vfiprintf_r+0x3c>
 800b2a8:	692b      	ldr	r3, [r5, #16]
 800b2aa:	b9eb      	cbnz	r3, 800b2e8 <_vfiprintf_r+0x78>
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f000 faf4 	bl	800b89c <__swsetup_r>
 800b2b4:	b1c0      	cbz	r0, 800b2e8 <_vfiprintf_r+0x78>
 800b2b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2b8:	07dc      	lsls	r4, r3, #31
 800b2ba:	d50e      	bpl.n	800b2da <_vfiprintf_r+0x6a>
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	b01d      	add	sp, #116	; 0x74
 800b2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c6:	4b7b      	ldr	r3, [pc, #492]	; (800b4b4 <_vfiprintf_r+0x244>)
 800b2c8:	429d      	cmp	r5, r3
 800b2ca:	d101      	bne.n	800b2d0 <_vfiprintf_r+0x60>
 800b2cc:	68b5      	ldr	r5, [r6, #8]
 800b2ce:	e7df      	b.n	800b290 <_vfiprintf_r+0x20>
 800b2d0:	4b79      	ldr	r3, [pc, #484]	; (800b4b8 <_vfiprintf_r+0x248>)
 800b2d2:	429d      	cmp	r5, r3
 800b2d4:	bf08      	it	eq
 800b2d6:	68f5      	ldreq	r5, [r6, #12]
 800b2d8:	e7da      	b.n	800b290 <_vfiprintf_r+0x20>
 800b2da:	89ab      	ldrh	r3, [r5, #12]
 800b2dc:	0598      	lsls	r0, r3, #22
 800b2de:	d4ed      	bmi.n	800b2bc <_vfiprintf_r+0x4c>
 800b2e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2e2:	f7fd fe3d 	bl	8008f60 <__retarget_lock_release_recursive>
 800b2e6:	e7e9      	b.n	800b2bc <_vfiprintf_r+0x4c>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2f6:	2330      	movs	r3, #48	; 0x30
 800b2f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b4bc <_vfiprintf_r+0x24c>
 800b2fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b300:	f04f 0901 	mov.w	r9, #1
 800b304:	4623      	mov	r3, r4
 800b306:	469a      	mov	sl, r3
 800b308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b30c:	b10a      	cbz	r2, 800b312 <_vfiprintf_r+0xa2>
 800b30e:	2a25      	cmp	r2, #37	; 0x25
 800b310:	d1f9      	bne.n	800b306 <_vfiprintf_r+0x96>
 800b312:	ebba 0b04 	subs.w	fp, sl, r4
 800b316:	d00b      	beq.n	800b330 <_vfiprintf_r+0xc0>
 800b318:	465b      	mov	r3, fp
 800b31a:	4622      	mov	r2, r4
 800b31c:	4629      	mov	r1, r5
 800b31e:	4630      	mov	r0, r6
 800b320:	f7ff ff93 	bl	800b24a <__sfputs_r>
 800b324:	3001      	adds	r0, #1
 800b326:	f000 80aa 	beq.w	800b47e <_vfiprintf_r+0x20e>
 800b32a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b32c:	445a      	add	r2, fp
 800b32e:	9209      	str	r2, [sp, #36]	; 0x24
 800b330:	f89a 3000 	ldrb.w	r3, [sl]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 80a2 	beq.w	800b47e <_vfiprintf_r+0x20e>
 800b33a:	2300      	movs	r3, #0
 800b33c:	f04f 32ff 	mov.w	r2, #4294967295
 800b340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b344:	f10a 0a01 	add.w	sl, sl, #1
 800b348:	9304      	str	r3, [sp, #16]
 800b34a:	9307      	str	r3, [sp, #28]
 800b34c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b350:	931a      	str	r3, [sp, #104]	; 0x68
 800b352:	4654      	mov	r4, sl
 800b354:	2205      	movs	r2, #5
 800b356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b35a:	4858      	ldr	r0, [pc, #352]	; (800b4bc <_vfiprintf_r+0x24c>)
 800b35c:	f7f4 ff78 	bl	8000250 <memchr>
 800b360:	9a04      	ldr	r2, [sp, #16]
 800b362:	b9d8      	cbnz	r0, 800b39c <_vfiprintf_r+0x12c>
 800b364:	06d1      	lsls	r1, r2, #27
 800b366:	bf44      	itt	mi
 800b368:	2320      	movmi	r3, #32
 800b36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b36e:	0713      	lsls	r3, r2, #28
 800b370:	bf44      	itt	mi
 800b372:	232b      	movmi	r3, #43	; 0x2b
 800b374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b378:	f89a 3000 	ldrb.w	r3, [sl]
 800b37c:	2b2a      	cmp	r3, #42	; 0x2a
 800b37e:	d015      	beq.n	800b3ac <_vfiprintf_r+0x13c>
 800b380:	9a07      	ldr	r2, [sp, #28]
 800b382:	4654      	mov	r4, sl
 800b384:	2000      	movs	r0, #0
 800b386:	f04f 0c0a 	mov.w	ip, #10
 800b38a:	4621      	mov	r1, r4
 800b38c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b390:	3b30      	subs	r3, #48	; 0x30
 800b392:	2b09      	cmp	r3, #9
 800b394:	d94e      	bls.n	800b434 <_vfiprintf_r+0x1c4>
 800b396:	b1b0      	cbz	r0, 800b3c6 <_vfiprintf_r+0x156>
 800b398:	9207      	str	r2, [sp, #28]
 800b39a:	e014      	b.n	800b3c6 <_vfiprintf_r+0x156>
 800b39c:	eba0 0308 	sub.w	r3, r0, r8
 800b3a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	9304      	str	r3, [sp, #16]
 800b3a8:	46a2      	mov	sl, r4
 800b3aa:	e7d2      	b.n	800b352 <_vfiprintf_r+0xe2>
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	1d19      	adds	r1, r3, #4
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	9103      	str	r1, [sp, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	bfbb      	ittet	lt
 800b3b8:	425b      	neglt	r3, r3
 800b3ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b3be:	9307      	strge	r3, [sp, #28]
 800b3c0:	9307      	strlt	r3, [sp, #28]
 800b3c2:	bfb8      	it	lt
 800b3c4:	9204      	strlt	r2, [sp, #16]
 800b3c6:	7823      	ldrb	r3, [r4, #0]
 800b3c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b3ca:	d10c      	bne.n	800b3e6 <_vfiprintf_r+0x176>
 800b3cc:	7863      	ldrb	r3, [r4, #1]
 800b3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d0:	d135      	bne.n	800b43e <_vfiprintf_r+0x1ce>
 800b3d2:	9b03      	ldr	r3, [sp, #12]
 800b3d4:	1d1a      	adds	r2, r3, #4
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	9203      	str	r2, [sp, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	bfb8      	it	lt
 800b3de:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3e2:	3402      	adds	r4, #2
 800b3e4:	9305      	str	r3, [sp, #20]
 800b3e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4cc <_vfiprintf_r+0x25c>
 800b3ea:	7821      	ldrb	r1, [r4, #0]
 800b3ec:	2203      	movs	r2, #3
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	f7f4 ff2e 	bl	8000250 <memchr>
 800b3f4:	b140      	cbz	r0, 800b408 <_vfiprintf_r+0x198>
 800b3f6:	2340      	movs	r3, #64	; 0x40
 800b3f8:	eba0 000a 	sub.w	r0, r0, sl
 800b3fc:	fa03 f000 	lsl.w	r0, r3, r0
 800b400:	9b04      	ldr	r3, [sp, #16]
 800b402:	4303      	orrs	r3, r0
 800b404:	3401      	adds	r4, #1
 800b406:	9304      	str	r3, [sp, #16]
 800b408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b40c:	482c      	ldr	r0, [pc, #176]	; (800b4c0 <_vfiprintf_r+0x250>)
 800b40e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b412:	2206      	movs	r2, #6
 800b414:	f7f4 ff1c 	bl	8000250 <memchr>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d03f      	beq.n	800b49c <_vfiprintf_r+0x22c>
 800b41c:	4b29      	ldr	r3, [pc, #164]	; (800b4c4 <_vfiprintf_r+0x254>)
 800b41e:	bb1b      	cbnz	r3, 800b468 <_vfiprintf_r+0x1f8>
 800b420:	9b03      	ldr	r3, [sp, #12]
 800b422:	3307      	adds	r3, #7
 800b424:	f023 0307 	bic.w	r3, r3, #7
 800b428:	3308      	adds	r3, #8
 800b42a:	9303      	str	r3, [sp, #12]
 800b42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42e:	443b      	add	r3, r7
 800b430:	9309      	str	r3, [sp, #36]	; 0x24
 800b432:	e767      	b.n	800b304 <_vfiprintf_r+0x94>
 800b434:	fb0c 3202 	mla	r2, ip, r2, r3
 800b438:	460c      	mov	r4, r1
 800b43a:	2001      	movs	r0, #1
 800b43c:	e7a5      	b.n	800b38a <_vfiprintf_r+0x11a>
 800b43e:	2300      	movs	r3, #0
 800b440:	3401      	adds	r4, #1
 800b442:	9305      	str	r3, [sp, #20]
 800b444:	4619      	mov	r1, r3
 800b446:	f04f 0c0a 	mov.w	ip, #10
 800b44a:	4620      	mov	r0, r4
 800b44c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b450:	3a30      	subs	r2, #48	; 0x30
 800b452:	2a09      	cmp	r2, #9
 800b454:	d903      	bls.n	800b45e <_vfiprintf_r+0x1ee>
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0c5      	beq.n	800b3e6 <_vfiprintf_r+0x176>
 800b45a:	9105      	str	r1, [sp, #20]
 800b45c:	e7c3      	b.n	800b3e6 <_vfiprintf_r+0x176>
 800b45e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b462:	4604      	mov	r4, r0
 800b464:	2301      	movs	r3, #1
 800b466:	e7f0      	b.n	800b44a <_vfiprintf_r+0x1da>
 800b468:	ab03      	add	r3, sp, #12
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	462a      	mov	r2, r5
 800b46e:	4b16      	ldr	r3, [pc, #88]	; (800b4c8 <_vfiprintf_r+0x258>)
 800b470:	a904      	add	r1, sp, #16
 800b472:	4630      	mov	r0, r6
 800b474:	f3af 8000 	nop.w
 800b478:	4607      	mov	r7, r0
 800b47a:	1c78      	adds	r0, r7, #1
 800b47c:	d1d6      	bne.n	800b42c <_vfiprintf_r+0x1bc>
 800b47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b480:	07d9      	lsls	r1, r3, #31
 800b482:	d405      	bmi.n	800b490 <_vfiprintf_r+0x220>
 800b484:	89ab      	ldrh	r3, [r5, #12]
 800b486:	059a      	lsls	r2, r3, #22
 800b488:	d402      	bmi.n	800b490 <_vfiprintf_r+0x220>
 800b48a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b48c:	f7fd fd68 	bl	8008f60 <__retarget_lock_release_recursive>
 800b490:	89ab      	ldrh	r3, [r5, #12]
 800b492:	065b      	lsls	r3, r3, #25
 800b494:	f53f af12 	bmi.w	800b2bc <_vfiprintf_r+0x4c>
 800b498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b49a:	e711      	b.n	800b2c0 <_vfiprintf_r+0x50>
 800b49c:	ab03      	add	r3, sp, #12
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	462a      	mov	r2, r5
 800b4a2:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <_vfiprintf_r+0x258>)
 800b4a4:	a904      	add	r1, sp, #16
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f000 f880 	bl	800b5ac <_printf_i>
 800b4ac:	e7e4      	b.n	800b478 <_vfiprintf_r+0x208>
 800b4ae:	bf00      	nop
 800b4b0:	0800bcbc 	.word	0x0800bcbc
 800b4b4:	0800bcdc 	.word	0x0800bcdc
 800b4b8:	0800bc9c 	.word	0x0800bc9c
 800b4bc:	0800c099 	.word	0x0800c099
 800b4c0:	0800c0a3 	.word	0x0800c0a3
 800b4c4:	00000000 	.word	0x00000000
 800b4c8:	0800b24b 	.word	0x0800b24b
 800b4cc:	0800c09f 	.word	0x0800c09f

0800b4d0 <_printf_common>:
 800b4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	4616      	mov	r6, r2
 800b4d6:	4699      	mov	r9, r3
 800b4d8:	688a      	ldr	r2, [r1, #8]
 800b4da:	690b      	ldr	r3, [r1, #16]
 800b4dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	bfb8      	it	lt
 800b4e4:	4613      	movlt	r3, r2
 800b4e6:	6033      	str	r3, [r6, #0]
 800b4e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4ec:	4607      	mov	r7, r0
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	b10a      	cbz	r2, 800b4f6 <_printf_common+0x26>
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	6033      	str	r3, [r6, #0]
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	0699      	lsls	r1, r3, #26
 800b4fa:	bf42      	ittt	mi
 800b4fc:	6833      	ldrmi	r3, [r6, #0]
 800b4fe:	3302      	addmi	r3, #2
 800b500:	6033      	strmi	r3, [r6, #0]
 800b502:	6825      	ldr	r5, [r4, #0]
 800b504:	f015 0506 	ands.w	r5, r5, #6
 800b508:	d106      	bne.n	800b518 <_printf_common+0x48>
 800b50a:	f104 0a19 	add.w	sl, r4, #25
 800b50e:	68e3      	ldr	r3, [r4, #12]
 800b510:	6832      	ldr	r2, [r6, #0]
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	42ab      	cmp	r3, r5
 800b516:	dc26      	bgt.n	800b566 <_printf_common+0x96>
 800b518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b51c:	1e13      	subs	r3, r2, #0
 800b51e:	6822      	ldr	r2, [r4, #0]
 800b520:	bf18      	it	ne
 800b522:	2301      	movne	r3, #1
 800b524:	0692      	lsls	r2, r2, #26
 800b526:	d42b      	bmi.n	800b580 <_printf_common+0xb0>
 800b528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b52c:	4649      	mov	r1, r9
 800b52e:	4638      	mov	r0, r7
 800b530:	47c0      	blx	r8
 800b532:	3001      	adds	r0, #1
 800b534:	d01e      	beq.n	800b574 <_printf_common+0xa4>
 800b536:	6823      	ldr	r3, [r4, #0]
 800b538:	68e5      	ldr	r5, [r4, #12]
 800b53a:	6832      	ldr	r2, [r6, #0]
 800b53c:	f003 0306 	and.w	r3, r3, #6
 800b540:	2b04      	cmp	r3, #4
 800b542:	bf08      	it	eq
 800b544:	1aad      	subeq	r5, r5, r2
 800b546:	68a3      	ldr	r3, [r4, #8]
 800b548:	6922      	ldr	r2, [r4, #16]
 800b54a:	bf0c      	ite	eq
 800b54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b550:	2500      	movne	r5, #0
 800b552:	4293      	cmp	r3, r2
 800b554:	bfc4      	itt	gt
 800b556:	1a9b      	subgt	r3, r3, r2
 800b558:	18ed      	addgt	r5, r5, r3
 800b55a:	2600      	movs	r6, #0
 800b55c:	341a      	adds	r4, #26
 800b55e:	42b5      	cmp	r5, r6
 800b560:	d11a      	bne.n	800b598 <_printf_common+0xc8>
 800b562:	2000      	movs	r0, #0
 800b564:	e008      	b.n	800b578 <_printf_common+0xa8>
 800b566:	2301      	movs	r3, #1
 800b568:	4652      	mov	r2, sl
 800b56a:	4649      	mov	r1, r9
 800b56c:	4638      	mov	r0, r7
 800b56e:	47c0      	blx	r8
 800b570:	3001      	adds	r0, #1
 800b572:	d103      	bne.n	800b57c <_printf_common+0xac>
 800b574:	f04f 30ff 	mov.w	r0, #4294967295
 800b578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b57c:	3501      	adds	r5, #1
 800b57e:	e7c6      	b.n	800b50e <_printf_common+0x3e>
 800b580:	18e1      	adds	r1, r4, r3
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	2030      	movs	r0, #48	; 0x30
 800b586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b58a:	4422      	add	r2, r4
 800b58c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b590:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b594:	3302      	adds	r3, #2
 800b596:	e7c7      	b.n	800b528 <_printf_common+0x58>
 800b598:	2301      	movs	r3, #1
 800b59a:	4622      	mov	r2, r4
 800b59c:	4649      	mov	r1, r9
 800b59e:	4638      	mov	r0, r7
 800b5a0:	47c0      	blx	r8
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	d0e6      	beq.n	800b574 <_printf_common+0xa4>
 800b5a6:	3601      	adds	r6, #1
 800b5a8:	e7d9      	b.n	800b55e <_printf_common+0x8e>
	...

0800b5ac <_printf_i>:
 800b5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	7e0f      	ldrb	r7, [r1, #24]
 800b5b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5b4:	2f78      	cmp	r7, #120	; 0x78
 800b5b6:	4691      	mov	r9, r2
 800b5b8:	4680      	mov	r8, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	469a      	mov	sl, r3
 800b5be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5c2:	d807      	bhi.n	800b5d4 <_printf_i+0x28>
 800b5c4:	2f62      	cmp	r7, #98	; 0x62
 800b5c6:	d80a      	bhi.n	800b5de <_printf_i+0x32>
 800b5c8:	2f00      	cmp	r7, #0
 800b5ca:	f000 80d8 	beq.w	800b77e <_printf_i+0x1d2>
 800b5ce:	2f58      	cmp	r7, #88	; 0x58
 800b5d0:	f000 80a3 	beq.w	800b71a <_printf_i+0x16e>
 800b5d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5dc:	e03a      	b.n	800b654 <_printf_i+0xa8>
 800b5de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5e2:	2b15      	cmp	r3, #21
 800b5e4:	d8f6      	bhi.n	800b5d4 <_printf_i+0x28>
 800b5e6:	a101      	add	r1, pc, #4	; (adr r1, 800b5ec <_printf_i+0x40>)
 800b5e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5ec:	0800b645 	.word	0x0800b645
 800b5f0:	0800b659 	.word	0x0800b659
 800b5f4:	0800b5d5 	.word	0x0800b5d5
 800b5f8:	0800b5d5 	.word	0x0800b5d5
 800b5fc:	0800b5d5 	.word	0x0800b5d5
 800b600:	0800b5d5 	.word	0x0800b5d5
 800b604:	0800b659 	.word	0x0800b659
 800b608:	0800b5d5 	.word	0x0800b5d5
 800b60c:	0800b5d5 	.word	0x0800b5d5
 800b610:	0800b5d5 	.word	0x0800b5d5
 800b614:	0800b5d5 	.word	0x0800b5d5
 800b618:	0800b765 	.word	0x0800b765
 800b61c:	0800b689 	.word	0x0800b689
 800b620:	0800b747 	.word	0x0800b747
 800b624:	0800b5d5 	.word	0x0800b5d5
 800b628:	0800b5d5 	.word	0x0800b5d5
 800b62c:	0800b787 	.word	0x0800b787
 800b630:	0800b5d5 	.word	0x0800b5d5
 800b634:	0800b689 	.word	0x0800b689
 800b638:	0800b5d5 	.word	0x0800b5d5
 800b63c:	0800b5d5 	.word	0x0800b5d5
 800b640:	0800b74f 	.word	0x0800b74f
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	1d1a      	adds	r2, r3, #4
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	602a      	str	r2, [r5, #0]
 800b64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b654:	2301      	movs	r3, #1
 800b656:	e0a3      	b.n	800b7a0 <_printf_i+0x1f4>
 800b658:	6820      	ldr	r0, [r4, #0]
 800b65a:	6829      	ldr	r1, [r5, #0]
 800b65c:	0606      	lsls	r6, r0, #24
 800b65e:	f101 0304 	add.w	r3, r1, #4
 800b662:	d50a      	bpl.n	800b67a <_printf_i+0xce>
 800b664:	680e      	ldr	r6, [r1, #0]
 800b666:	602b      	str	r3, [r5, #0]
 800b668:	2e00      	cmp	r6, #0
 800b66a:	da03      	bge.n	800b674 <_printf_i+0xc8>
 800b66c:	232d      	movs	r3, #45	; 0x2d
 800b66e:	4276      	negs	r6, r6
 800b670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b674:	485e      	ldr	r0, [pc, #376]	; (800b7f0 <_printf_i+0x244>)
 800b676:	230a      	movs	r3, #10
 800b678:	e019      	b.n	800b6ae <_printf_i+0x102>
 800b67a:	680e      	ldr	r6, [r1, #0]
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b682:	bf18      	it	ne
 800b684:	b236      	sxthne	r6, r6
 800b686:	e7ef      	b.n	800b668 <_printf_i+0xbc>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	6820      	ldr	r0, [r4, #0]
 800b68c:	1d19      	adds	r1, r3, #4
 800b68e:	6029      	str	r1, [r5, #0]
 800b690:	0601      	lsls	r1, r0, #24
 800b692:	d501      	bpl.n	800b698 <_printf_i+0xec>
 800b694:	681e      	ldr	r6, [r3, #0]
 800b696:	e002      	b.n	800b69e <_printf_i+0xf2>
 800b698:	0646      	lsls	r6, r0, #25
 800b69a:	d5fb      	bpl.n	800b694 <_printf_i+0xe8>
 800b69c:	881e      	ldrh	r6, [r3, #0]
 800b69e:	4854      	ldr	r0, [pc, #336]	; (800b7f0 <_printf_i+0x244>)
 800b6a0:	2f6f      	cmp	r7, #111	; 0x6f
 800b6a2:	bf0c      	ite	eq
 800b6a4:	2308      	moveq	r3, #8
 800b6a6:	230a      	movne	r3, #10
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6ae:	6865      	ldr	r5, [r4, #4]
 800b6b0:	60a5      	str	r5, [r4, #8]
 800b6b2:	2d00      	cmp	r5, #0
 800b6b4:	bfa2      	ittt	ge
 800b6b6:	6821      	ldrge	r1, [r4, #0]
 800b6b8:	f021 0104 	bicge.w	r1, r1, #4
 800b6bc:	6021      	strge	r1, [r4, #0]
 800b6be:	b90e      	cbnz	r6, 800b6c4 <_printf_i+0x118>
 800b6c0:	2d00      	cmp	r5, #0
 800b6c2:	d04d      	beq.n	800b760 <_printf_i+0x1b4>
 800b6c4:	4615      	mov	r5, r2
 800b6c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6ca:	fb03 6711 	mls	r7, r3, r1, r6
 800b6ce:	5dc7      	ldrb	r7, [r0, r7]
 800b6d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6d4:	4637      	mov	r7, r6
 800b6d6:	42bb      	cmp	r3, r7
 800b6d8:	460e      	mov	r6, r1
 800b6da:	d9f4      	bls.n	800b6c6 <_printf_i+0x11a>
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d10b      	bne.n	800b6f8 <_printf_i+0x14c>
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	07de      	lsls	r6, r3, #31
 800b6e4:	d508      	bpl.n	800b6f8 <_printf_i+0x14c>
 800b6e6:	6923      	ldr	r3, [r4, #16]
 800b6e8:	6861      	ldr	r1, [r4, #4]
 800b6ea:	4299      	cmp	r1, r3
 800b6ec:	bfde      	ittt	le
 800b6ee:	2330      	movle	r3, #48	; 0x30
 800b6f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6f8:	1b52      	subs	r2, r2, r5
 800b6fa:	6122      	str	r2, [r4, #16]
 800b6fc:	f8cd a000 	str.w	sl, [sp]
 800b700:	464b      	mov	r3, r9
 800b702:	aa03      	add	r2, sp, #12
 800b704:	4621      	mov	r1, r4
 800b706:	4640      	mov	r0, r8
 800b708:	f7ff fee2 	bl	800b4d0 <_printf_common>
 800b70c:	3001      	adds	r0, #1
 800b70e:	d14c      	bne.n	800b7aa <_printf_i+0x1fe>
 800b710:	f04f 30ff 	mov.w	r0, #4294967295
 800b714:	b004      	add	sp, #16
 800b716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71a:	4835      	ldr	r0, [pc, #212]	; (800b7f0 <_printf_i+0x244>)
 800b71c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b720:	6829      	ldr	r1, [r5, #0]
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	f851 6b04 	ldr.w	r6, [r1], #4
 800b728:	6029      	str	r1, [r5, #0]
 800b72a:	061d      	lsls	r5, r3, #24
 800b72c:	d514      	bpl.n	800b758 <_printf_i+0x1ac>
 800b72e:	07df      	lsls	r7, r3, #31
 800b730:	bf44      	itt	mi
 800b732:	f043 0320 	orrmi.w	r3, r3, #32
 800b736:	6023      	strmi	r3, [r4, #0]
 800b738:	b91e      	cbnz	r6, 800b742 <_printf_i+0x196>
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	f023 0320 	bic.w	r3, r3, #32
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	2310      	movs	r3, #16
 800b744:	e7b0      	b.n	800b6a8 <_printf_i+0xfc>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	f043 0320 	orr.w	r3, r3, #32
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	2378      	movs	r3, #120	; 0x78
 800b750:	4828      	ldr	r0, [pc, #160]	; (800b7f4 <_printf_i+0x248>)
 800b752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b756:	e7e3      	b.n	800b720 <_printf_i+0x174>
 800b758:	0659      	lsls	r1, r3, #25
 800b75a:	bf48      	it	mi
 800b75c:	b2b6      	uxthmi	r6, r6
 800b75e:	e7e6      	b.n	800b72e <_printf_i+0x182>
 800b760:	4615      	mov	r5, r2
 800b762:	e7bb      	b.n	800b6dc <_printf_i+0x130>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	6826      	ldr	r6, [r4, #0]
 800b768:	6961      	ldr	r1, [r4, #20]
 800b76a:	1d18      	adds	r0, r3, #4
 800b76c:	6028      	str	r0, [r5, #0]
 800b76e:	0635      	lsls	r5, r6, #24
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	d501      	bpl.n	800b778 <_printf_i+0x1cc>
 800b774:	6019      	str	r1, [r3, #0]
 800b776:	e002      	b.n	800b77e <_printf_i+0x1d2>
 800b778:	0670      	lsls	r0, r6, #25
 800b77a:	d5fb      	bpl.n	800b774 <_printf_i+0x1c8>
 800b77c:	8019      	strh	r1, [r3, #0]
 800b77e:	2300      	movs	r3, #0
 800b780:	6123      	str	r3, [r4, #16]
 800b782:	4615      	mov	r5, r2
 800b784:	e7ba      	b.n	800b6fc <_printf_i+0x150>
 800b786:	682b      	ldr	r3, [r5, #0]
 800b788:	1d1a      	adds	r2, r3, #4
 800b78a:	602a      	str	r2, [r5, #0]
 800b78c:	681d      	ldr	r5, [r3, #0]
 800b78e:	6862      	ldr	r2, [r4, #4]
 800b790:	2100      	movs	r1, #0
 800b792:	4628      	mov	r0, r5
 800b794:	f7f4 fd5c 	bl	8000250 <memchr>
 800b798:	b108      	cbz	r0, 800b79e <_printf_i+0x1f2>
 800b79a:	1b40      	subs	r0, r0, r5
 800b79c:	6060      	str	r0, [r4, #4]
 800b79e:	6863      	ldr	r3, [r4, #4]
 800b7a0:	6123      	str	r3, [r4, #16]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7a8:	e7a8      	b.n	800b6fc <_printf_i+0x150>
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	4640      	mov	r0, r8
 800b7b2:	47d0      	blx	sl
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	d0ab      	beq.n	800b710 <_printf_i+0x164>
 800b7b8:	6823      	ldr	r3, [r4, #0]
 800b7ba:	079b      	lsls	r3, r3, #30
 800b7bc:	d413      	bmi.n	800b7e6 <_printf_i+0x23a>
 800b7be:	68e0      	ldr	r0, [r4, #12]
 800b7c0:	9b03      	ldr	r3, [sp, #12]
 800b7c2:	4298      	cmp	r0, r3
 800b7c4:	bfb8      	it	lt
 800b7c6:	4618      	movlt	r0, r3
 800b7c8:	e7a4      	b.n	800b714 <_printf_i+0x168>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	4649      	mov	r1, r9
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	47d0      	blx	sl
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	d09b      	beq.n	800b710 <_printf_i+0x164>
 800b7d8:	3501      	adds	r5, #1
 800b7da:	68e3      	ldr	r3, [r4, #12]
 800b7dc:	9903      	ldr	r1, [sp, #12]
 800b7de:	1a5b      	subs	r3, r3, r1
 800b7e0:	42ab      	cmp	r3, r5
 800b7e2:	dcf2      	bgt.n	800b7ca <_printf_i+0x21e>
 800b7e4:	e7eb      	b.n	800b7be <_printf_i+0x212>
 800b7e6:	2500      	movs	r5, #0
 800b7e8:	f104 0619 	add.w	r6, r4, #25
 800b7ec:	e7f5      	b.n	800b7da <_printf_i+0x22e>
 800b7ee:	bf00      	nop
 800b7f0:	0800c0aa 	.word	0x0800c0aa
 800b7f4:	0800c0bb 	.word	0x0800c0bb

0800b7f8 <__swbuf_r>:
 800b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fa:	460e      	mov	r6, r1
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	4605      	mov	r5, r0
 800b800:	b118      	cbz	r0, 800b80a <__swbuf_r+0x12>
 800b802:	6983      	ldr	r3, [r0, #24]
 800b804:	b90b      	cbnz	r3, 800b80a <__swbuf_r+0x12>
 800b806:	f7fd fae7 	bl	8008dd8 <__sinit>
 800b80a:	4b21      	ldr	r3, [pc, #132]	; (800b890 <__swbuf_r+0x98>)
 800b80c:	429c      	cmp	r4, r3
 800b80e:	d12b      	bne.n	800b868 <__swbuf_r+0x70>
 800b810:	686c      	ldr	r4, [r5, #4]
 800b812:	69a3      	ldr	r3, [r4, #24]
 800b814:	60a3      	str	r3, [r4, #8]
 800b816:	89a3      	ldrh	r3, [r4, #12]
 800b818:	071a      	lsls	r2, r3, #28
 800b81a:	d52f      	bpl.n	800b87c <__swbuf_r+0x84>
 800b81c:	6923      	ldr	r3, [r4, #16]
 800b81e:	b36b      	cbz	r3, 800b87c <__swbuf_r+0x84>
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	6820      	ldr	r0, [r4, #0]
 800b824:	1ac0      	subs	r0, r0, r3
 800b826:	6963      	ldr	r3, [r4, #20]
 800b828:	b2f6      	uxtb	r6, r6
 800b82a:	4283      	cmp	r3, r0
 800b82c:	4637      	mov	r7, r6
 800b82e:	dc04      	bgt.n	800b83a <__swbuf_r+0x42>
 800b830:	4621      	mov	r1, r4
 800b832:	4628      	mov	r0, r5
 800b834:	f7fe fb96 	bl	8009f64 <_fflush_r>
 800b838:	bb30      	cbnz	r0, 800b888 <__swbuf_r+0x90>
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	60a3      	str	r3, [r4, #8]
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	6022      	str	r2, [r4, #0]
 800b846:	701e      	strb	r6, [r3, #0]
 800b848:	6963      	ldr	r3, [r4, #20]
 800b84a:	3001      	adds	r0, #1
 800b84c:	4283      	cmp	r3, r0
 800b84e:	d004      	beq.n	800b85a <__swbuf_r+0x62>
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	07db      	lsls	r3, r3, #31
 800b854:	d506      	bpl.n	800b864 <__swbuf_r+0x6c>
 800b856:	2e0a      	cmp	r6, #10
 800b858:	d104      	bne.n	800b864 <__swbuf_r+0x6c>
 800b85a:	4621      	mov	r1, r4
 800b85c:	4628      	mov	r0, r5
 800b85e:	f7fe fb81 	bl	8009f64 <_fflush_r>
 800b862:	b988      	cbnz	r0, 800b888 <__swbuf_r+0x90>
 800b864:	4638      	mov	r0, r7
 800b866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <__swbuf_r+0x9c>)
 800b86a:	429c      	cmp	r4, r3
 800b86c:	d101      	bne.n	800b872 <__swbuf_r+0x7a>
 800b86e:	68ac      	ldr	r4, [r5, #8]
 800b870:	e7cf      	b.n	800b812 <__swbuf_r+0x1a>
 800b872:	4b09      	ldr	r3, [pc, #36]	; (800b898 <__swbuf_r+0xa0>)
 800b874:	429c      	cmp	r4, r3
 800b876:	bf08      	it	eq
 800b878:	68ec      	ldreq	r4, [r5, #12]
 800b87a:	e7ca      	b.n	800b812 <__swbuf_r+0x1a>
 800b87c:	4621      	mov	r1, r4
 800b87e:	4628      	mov	r0, r5
 800b880:	f000 f80c 	bl	800b89c <__swsetup_r>
 800b884:	2800      	cmp	r0, #0
 800b886:	d0cb      	beq.n	800b820 <__swbuf_r+0x28>
 800b888:	f04f 37ff 	mov.w	r7, #4294967295
 800b88c:	e7ea      	b.n	800b864 <__swbuf_r+0x6c>
 800b88e:	bf00      	nop
 800b890:	0800bcbc 	.word	0x0800bcbc
 800b894:	0800bcdc 	.word	0x0800bcdc
 800b898:	0800bc9c 	.word	0x0800bc9c

0800b89c <__swsetup_r>:
 800b89c:	4b32      	ldr	r3, [pc, #200]	; (800b968 <__swsetup_r+0xcc>)
 800b89e:	b570      	push	{r4, r5, r6, lr}
 800b8a0:	681d      	ldr	r5, [r3, #0]
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	b125      	cbz	r5, 800b8b2 <__swsetup_r+0x16>
 800b8a8:	69ab      	ldr	r3, [r5, #24]
 800b8aa:	b913      	cbnz	r3, 800b8b2 <__swsetup_r+0x16>
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	f7fd fa93 	bl	8008dd8 <__sinit>
 800b8b2:	4b2e      	ldr	r3, [pc, #184]	; (800b96c <__swsetup_r+0xd0>)
 800b8b4:	429c      	cmp	r4, r3
 800b8b6:	d10f      	bne.n	800b8d8 <__swsetup_r+0x3c>
 800b8b8:	686c      	ldr	r4, [r5, #4]
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8c0:	0719      	lsls	r1, r3, #28
 800b8c2:	d42c      	bmi.n	800b91e <__swsetup_r+0x82>
 800b8c4:	06dd      	lsls	r5, r3, #27
 800b8c6:	d411      	bmi.n	800b8ec <__swsetup_r+0x50>
 800b8c8:	2309      	movs	r3, #9
 800b8ca:	6033      	str	r3, [r6, #0]
 800b8cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d6:	e03e      	b.n	800b956 <__swsetup_r+0xba>
 800b8d8:	4b25      	ldr	r3, [pc, #148]	; (800b970 <__swsetup_r+0xd4>)
 800b8da:	429c      	cmp	r4, r3
 800b8dc:	d101      	bne.n	800b8e2 <__swsetup_r+0x46>
 800b8de:	68ac      	ldr	r4, [r5, #8]
 800b8e0:	e7eb      	b.n	800b8ba <__swsetup_r+0x1e>
 800b8e2:	4b24      	ldr	r3, [pc, #144]	; (800b974 <__swsetup_r+0xd8>)
 800b8e4:	429c      	cmp	r4, r3
 800b8e6:	bf08      	it	eq
 800b8e8:	68ec      	ldreq	r4, [r5, #12]
 800b8ea:	e7e6      	b.n	800b8ba <__swsetup_r+0x1e>
 800b8ec:	0758      	lsls	r0, r3, #29
 800b8ee:	d512      	bpl.n	800b916 <__swsetup_r+0x7a>
 800b8f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8f2:	b141      	cbz	r1, 800b906 <__swsetup_r+0x6a>
 800b8f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8f8:	4299      	cmp	r1, r3
 800b8fa:	d002      	beq.n	800b902 <__swsetup_r+0x66>
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff fbe1 	bl	800b0c4 <_free_r>
 800b902:	2300      	movs	r3, #0
 800b904:	6363      	str	r3, [r4, #52]	; 0x34
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	2300      	movs	r3, #0
 800b910:	6063      	str	r3, [r4, #4]
 800b912:	6923      	ldr	r3, [r4, #16]
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	f043 0308 	orr.w	r3, r3, #8
 800b91c:	81a3      	strh	r3, [r4, #12]
 800b91e:	6923      	ldr	r3, [r4, #16]
 800b920:	b94b      	cbnz	r3, 800b936 <__swsetup_r+0x9a>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b92c:	d003      	beq.n	800b936 <__swsetup_r+0x9a>
 800b92e:	4621      	mov	r1, r4
 800b930:	4630      	mov	r0, r6
 800b932:	f000 f84d 	bl	800b9d0 <__smakebuf_r>
 800b936:	89a0      	ldrh	r0, [r4, #12]
 800b938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b93c:	f010 0301 	ands.w	r3, r0, #1
 800b940:	d00a      	beq.n	800b958 <__swsetup_r+0xbc>
 800b942:	2300      	movs	r3, #0
 800b944:	60a3      	str	r3, [r4, #8]
 800b946:	6963      	ldr	r3, [r4, #20]
 800b948:	425b      	negs	r3, r3
 800b94a:	61a3      	str	r3, [r4, #24]
 800b94c:	6923      	ldr	r3, [r4, #16]
 800b94e:	b943      	cbnz	r3, 800b962 <__swsetup_r+0xc6>
 800b950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b954:	d1ba      	bne.n	800b8cc <__swsetup_r+0x30>
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	0781      	lsls	r1, r0, #30
 800b95a:	bf58      	it	pl
 800b95c:	6963      	ldrpl	r3, [r4, #20]
 800b95e:	60a3      	str	r3, [r4, #8]
 800b960:	e7f4      	b.n	800b94c <__swsetup_r+0xb0>
 800b962:	2000      	movs	r0, #0
 800b964:	e7f7      	b.n	800b956 <__swsetup_r+0xba>
 800b966:	bf00      	nop
 800b968:	20000010 	.word	0x20000010
 800b96c:	0800bcbc 	.word	0x0800bcbc
 800b970:	0800bcdc 	.word	0x0800bcdc
 800b974:	0800bc9c 	.word	0x0800bc9c

0800b978 <abort>:
 800b978:	b508      	push	{r3, lr}
 800b97a:	2006      	movs	r0, #6
 800b97c:	f000 f890 	bl	800baa0 <raise>
 800b980:	2001      	movs	r0, #1
 800b982:	f7f6 f921 	bl	8001bc8 <_exit>

0800b986 <__swhatbuf_r>:
 800b986:	b570      	push	{r4, r5, r6, lr}
 800b988:	460e      	mov	r6, r1
 800b98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b98e:	2900      	cmp	r1, #0
 800b990:	b096      	sub	sp, #88	; 0x58
 800b992:	4614      	mov	r4, r2
 800b994:	461d      	mov	r5, r3
 800b996:	da08      	bge.n	800b9aa <__swhatbuf_r+0x24>
 800b998:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	602a      	str	r2, [r5, #0]
 800b9a0:	061a      	lsls	r2, r3, #24
 800b9a2:	d410      	bmi.n	800b9c6 <__swhatbuf_r+0x40>
 800b9a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9a8:	e00e      	b.n	800b9c8 <__swhatbuf_r+0x42>
 800b9aa:	466a      	mov	r2, sp
 800b9ac:	f000 f894 	bl	800bad8 <_fstat_r>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	dbf1      	blt.n	800b998 <__swhatbuf_r+0x12>
 800b9b4:	9a01      	ldr	r2, [sp, #4]
 800b9b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9be:	425a      	negs	r2, r3
 800b9c0:	415a      	adcs	r2, r3
 800b9c2:	602a      	str	r2, [r5, #0]
 800b9c4:	e7ee      	b.n	800b9a4 <__swhatbuf_r+0x1e>
 800b9c6:	2340      	movs	r3, #64	; 0x40
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	6023      	str	r3, [r4, #0]
 800b9cc:	b016      	add	sp, #88	; 0x58
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}

0800b9d0 <__smakebuf_r>:
 800b9d0:	898b      	ldrh	r3, [r1, #12]
 800b9d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9d4:	079d      	lsls	r5, r3, #30
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	460c      	mov	r4, r1
 800b9da:	d507      	bpl.n	800b9ec <__smakebuf_r+0x1c>
 800b9dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	6123      	str	r3, [r4, #16]
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	6163      	str	r3, [r4, #20]
 800b9e8:	b002      	add	sp, #8
 800b9ea:	bd70      	pop	{r4, r5, r6, pc}
 800b9ec:	ab01      	add	r3, sp, #4
 800b9ee:	466a      	mov	r2, sp
 800b9f0:	f7ff ffc9 	bl	800b986 <__swhatbuf_r>
 800b9f4:	9900      	ldr	r1, [sp, #0]
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f7fd fae9 	bl	8008fd0 <_malloc_r>
 800b9fe:	b948      	cbnz	r0, 800ba14 <__smakebuf_r+0x44>
 800ba00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba04:	059a      	lsls	r2, r3, #22
 800ba06:	d4ef      	bmi.n	800b9e8 <__smakebuf_r+0x18>
 800ba08:	f023 0303 	bic.w	r3, r3, #3
 800ba0c:	f043 0302 	orr.w	r3, r3, #2
 800ba10:	81a3      	strh	r3, [r4, #12]
 800ba12:	e7e3      	b.n	800b9dc <__smakebuf_r+0xc>
 800ba14:	4b0d      	ldr	r3, [pc, #52]	; (800ba4c <__smakebuf_r+0x7c>)
 800ba16:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba18:	89a3      	ldrh	r3, [r4, #12]
 800ba1a:	6020      	str	r0, [r4, #0]
 800ba1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba20:	81a3      	strh	r3, [r4, #12]
 800ba22:	9b00      	ldr	r3, [sp, #0]
 800ba24:	6163      	str	r3, [r4, #20]
 800ba26:	9b01      	ldr	r3, [sp, #4]
 800ba28:	6120      	str	r0, [r4, #16]
 800ba2a:	b15b      	cbz	r3, 800ba44 <__smakebuf_r+0x74>
 800ba2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba30:	4630      	mov	r0, r6
 800ba32:	f000 f863 	bl	800bafc <_isatty_r>
 800ba36:	b128      	cbz	r0, 800ba44 <__smakebuf_r+0x74>
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	f023 0303 	bic.w	r3, r3, #3
 800ba3e:	f043 0301 	orr.w	r3, r3, #1
 800ba42:	81a3      	strh	r3, [r4, #12]
 800ba44:	89a0      	ldrh	r0, [r4, #12]
 800ba46:	4305      	orrs	r5, r0
 800ba48:	81a5      	strh	r5, [r4, #12]
 800ba4a:	e7cd      	b.n	800b9e8 <__smakebuf_r+0x18>
 800ba4c:	08008d71 	.word	0x08008d71

0800ba50 <_raise_r>:
 800ba50:	291f      	cmp	r1, #31
 800ba52:	b538      	push	{r3, r4, r5, lr}
 800ba54:	4604      	mov	r4, r0
 800ba56:	460d      	mov	r5, r1
 800ba58:	d904      	bls.n	800ba64 <_raise_r+0x14>
 800ba5a:	2316      	movs	r3, #22
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba66:	b112      	cbz	r2, 800ba6e <_raise_r+0x1e>
 800ba68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba6c:	b94b      	cbnz	r3, 800ba82 <_raise_r+0x32>
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f000 f830 	bl	800bad4 <_getpid_r>
 800ba74:	462a      	mov	r2, r5
 800ba76:	4601      	mov	r1, r0
 800ba78:	4620      	mov	r0, r4
 800ba7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba7e:	f000 b817 	b.w	800bab0 <_kill_r>
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d00a      	beq.n	800ba9c <_raise_r+0x4c>
 800ba86:	1c59      	adds	r1, r3, #1
 800ba88:	d103      	bne.n	800ba92 <_raise_r+0x42>
 800ba8a:	2316      	movs	r3, #22
 800ba8c:	6003      	str	r3, [r0, #0]
 800ba8e:	2001      	movs	r0, #1
 800ba90:	e7e7      	b.n	800ba62 <_raise_r+0x12>
 800ba92:	2400      	movs	r4, #0
 800ba94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba98:	4628      	mov	r0, r5
 800ba9a:	4798      	blx	r3
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	e7e0      	b.n	800ba62 <_raise_r+0x12>

0800baa0 <raise>:
 800baa0:	4b02      	ldr	r3, [pc, #8]	; (800baac <raise+0xc>)
 800baa2:	4601      	mov	r1, r0
 800baa4:	6818      	ldr	r0, [r3, #0]
 800baa6:	f7ff bfd3 	b.w	800ba50 <_raise_r>
 800baaa:	bf00      	nop
 800baac:	20000010 	.word	0x20000010

0800bab0 <_kill_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4d07      	ldr	r5, [pc, #28]	; (800bad0 <_kill_r+0x20>)
 800bab4:	2300      	movs	r3, #0
 800bab6:	4604      	mov	r4, r0
 800bab8:	4608      	mov	r0, r1
 800baba:	4611      	mov	r1, r2
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	f7f6 f873 	bl	8001ba8 <_kill>
 800bac2:	1c43      	adds	r3, r0, #1
 800bac4:	d102      	bne.n	800bacc <_kill_r+0x1c>
 800bac6:	682b      	ldr	r3, [r5, #0]
 800bac8:	b103      	cbz	r3, 800bacc <_kill_r+0x1c>
 800baca:	6023      	str	r3, [r4, #0]
 800bacc:	bd38      	pop	{r3, r4, r5, pc}
 800bace:	bf00      	nop
 800bad0:	200055c0 	.word	0x200055c0

0800bad4 <_getpid_r>:
 800bad4:	f7f6 b860 	b.w	8001b98 <_getpid>

0800bad8 <_fstat_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d07      	ldr	r5, [pc, #28]	; (800baf8 <_fstat_r+0x20>)
 800badc:	2300      	movs	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	4611      	mov	r1, r2
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	f7f6 f8be 	bl	8001c66 <_fstat>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d102      	bne.n	800baf4 <_fstat_r+0x1c>
 800baee:	682b      	ldr	r3, [r5, #0]
 800baf0:	b103      	cbz	r3, 800baf4 <_fstat_r+0x1c>
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	bf00      	nop
 800baf8:	200055c0 	.word	0x200055c0

0800bafc <_isatty_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4d06      	ldr	r5, [pc, #24]	; (800bb18 <_isatty_r+0x1c>)
 800bb00:	2300      	movs	r3, #0
 800bb02:	4604      	mov	r4, r0
 800bb04:	4608      	mov	r0, r1
 800bb06:	602b      	str	r3, [r5, #0]
 800bb08:	f7f6 f8bd 	bl	8001c86 <_isatty>
 800bb0c:	1c43      	adds	r3, r0, #1
 800bb0e:	d102      	bne.n	800bb16 <_isatty_r+0x1a>
 800bb10:	682b      	ldr	r3, [r5, #0]
 800bb12:	b103      	cbz	r3, 800bb16 <_isatty_r+0x1a>
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	bd38      	pop	{r3, r4, r5, pc}
 800bb18:	200055c0 	.word	0x200055c0

0800bb1c <_init>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	bf00      	nop
 800bb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb22:	bc08      	pop	{r3}
 800bb24:	469e      	mov	lr, r3
 800bb26:	4770      	bx	lr

0800bb28 <_fini>:
 800bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2a:	bf00      	nop
 800bb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2e:	bc08      	pop	{r3}
 800bb30:	469e      	mov	lr, r3
 800bb32:	4770      	bx	lr
